<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ColorfulWorld</title>
  
  
  <link href="https://colorfulworld.github.io/atom.xml" rel="self"/>
  
  <link href="https://colorfulworld.github.io/"/>
  <updated>2021-05-26T13:53:09.329Z</updated>
  <id>https://colorfulworld.github.io/</id>
  
  <author>
    <name>ColorfulWorld</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用JS工具方法</title>
    <link href="https://colorfulworld.github.io/%E5%B8%B8%E7%94%A8JS%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/"/>
    <id>https://colorfulworld.github.io/%E5%B8%B8%E7%94%A8JS%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/</id>
    <published>2021-05-26T08:03:02.000Z</published>
    <updated>2021-05-26T13:53:09.329Z</updated>
    
    <content type="html"><![CDATA[<p>搬运平时常用的工具函数</p><span id="more"></span><h2 id="isStatic：检测数据是不是除了-symbol-外的原始数据"><a href="#isStatic：检测数据是不是除了-symbol-外的原始数据" class="headerlink" title="isStatic：检测数据是不是除了 symbol 外的原始数据"></a>isStatic：检测数据是不是除了 symbol 外的原始数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isStatic</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="keyword">typeof</span> value === <span class="string">&#x27;string&#x27;</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> value === <span class="string">&#x27;number&#x27;</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> value === <span class="string">&#x27;boolean&#x27;</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> value === <span class="string">&#x27;undefined&#x27;</span> ||</span><br><span class="line">    value === <span class="literal">null</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isPrimitive：检测数据是不是原始数据"><a href="#isPrimitive：检测数据是不是原始数据" class="headerlink" title="isPrimitive：检测数据是不是原始数据"></a>isPrimitive：检测数据是不是原始数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrimitive</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isStatic(value) || <span class="keyword">typeof</span> value === <span class="string">&#x27;symbol&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isObject：判断数据是不是引用类型的数据"><a href="#isObject：判断数据是不是引用类型的数据" class="headerlink" title="isObject：判断数据是不是引用类型的数据"></a>isObject：判断数据是不是引用类型的数据</h2><p>例如： arrays, functions, objects, regexes, new Number(0),以及 new String(‘’)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> type = <span class="keyword">typeof</span> value</span><br><span class="line">  <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; (type == <span class="string">&#x27;object&#x27;</span> || type == <span class="string">&#x27;function&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isObjectLike：检查-value-是否是-类对象。"><a href="#isObjectLike：检查-value-是否是-类对象。" class="headerlink" title="isObjectLike：检查 value 是否是 类对象。"></a>isObjectLike：检查 value 是否是 类对象。</h2><p>如果一个值是类对象，那么它不应该是 null，而且 typeof 后的结果是 “object”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObjectLike</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> value == <span class="string">&#x27;object&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getRawType：获取数据类型，返回结果为-Number、String、Object、Array-等"><a href="#getRawType：获取数据类型，返回结果为-Number、String、Object、Array-等" class="headerlink" title="getRawType：获取数据类型，返回结果为 Number、String、Object、Array 等"></a>getRawType：获取数据类型，返回结果为 Number、String、Object、Array 等</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRawType</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value).slice(<span class="number">8</span>, -<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isPlainObject：判断数据是不是-Object-类型的数据"><a href="#isPlainObject：判断数据是不是-Object-类型的数据" class="headerlink" title="isPlainObject：判断数据是不是 Object 类型的数据"></a>isPlainObject：判断数据是不是 Object 类型的数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">&#x27;[object Object]&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isArray：判断数据是不是数组类型的数据"><a href="#isArray：判断数据是不是数组类型的数据" class="headerlink" title="isArray：判断数据是不是数组类型的数据"></a>isArray：判断数据是不是数组类型的数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(arr)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isArrayLike：检查-value-是否是类数组"><a href="#isArrayLike：检查-value-是否是类数组" class="headerlink" title="isArrayLike：检查 value 是否是类数组"></a>isArrayLike：检查 value 是否是类数组</h2><p>如果一个值被认为是类数组，那么它不是一个函数，并且 value.length 是个整数，大于等于 0，小于或等于 Number.MAX_SAFE_INTEGER。这里字符串也将被当作类数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayLike</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value != <span class="literal">null</span> &amp;&amp; isLength(value.length) &amp;&amp; !isFunction(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isEmpty：检查-value-是否为空"><a href="#isEmpty：检查-value-是否为空" class="headerlink" title="isEmpty：检查 value 是否为空"></a>isEmpty：检查 value 是否为空</h2><p>如果是 null，直接返回 true；如果是类数组，判断数据长度；如果是 Object 对象，判断是否具有属性；如果是其他数据，直接返回 false(也可改为返回 true)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmpty</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isArrayLike(value)) &#123;</span><br><span class="line">        <span class="keyword">return</span> !value.length;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isPlainObject(value))&#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hasOwnProperty.call(value, key)) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="cached：记忆函数：缓存函数的运算结果"><a href="#cached：记忆函数：缓存函数的运算结果" class="headerlink" title="cached：记忆函数：缓存函数的运算结果"></a>cached：记忆函数：缓存函数的运算结果</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cached</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">cachedFn</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> hit = cache[str]</span><br><span class="line">    <span class="keyword">return</span> hit || (cache[str] = fn(str))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="camelize：横线转驼峰命名"><a href="#camelize：横线转驼峰命名" class="headerlink" title="camelize：横线转驼峰命名"></a>camelize：横线转驼峰命名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> camelizeRE = <span class="regexp">/-(\w)/g</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">camelize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(camelizeRE, <span class="function"><span class="keyword">function</span> (<span class="params">_, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> c ? c.toUpperCase() : <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ab-cd-ef ==&gt; abCdEf</span></span><br><span class="line"><span class="comment">//使用记忆函数</span></span><br><span class="line"><span class="keyword">let</span> _camelize = cached(camelize)</span><br></pre></td></tr></table></figure><h2 id="hyphenate：驼峰命名转横线命名：拆分字符串，使用-相连，并且转换为小写"><a href="#hyphenate：驼峰命名转横线命名：拆分字符串，使用-相连，并且转换为小写" class="headerlink" title="hyphenate：驼峰命名转横线命名：拆分字符串，使用 - 相连，并且转换为小写"></a>hyphenate：驼峰命名转横线命名：拆分字符串，使用 - 相连，并且转换为小写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hyphenateRE = <span class="regexp">/\B([A-Z])/g</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hyphenate</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(hyphenateRE, <span class="string">&#x27;-$1&#x27;</span>).toLowerCase()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//abCd ==&gt; ab-cd</span></span><br><span class="line"><span class="comment">//使用记忆函数</span></span><br><span class="line"><span class="keyword">let</span> _hyphenate = cached(hyphenate)</span><br></pre></td></tr></table></figure><h2 id="capitalize：字符串首位大写"><a href="#capitalize：字符串首位大写" class="headerlink" title="capitalize：字符串首位大写"></a>capitalize：字符串首位大写</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">capitalize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.charAt(<span class="number">0</span>).toUpperCase() + str.slice(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abc ==&gt; Abc</span></span><br><span class="line"><span class="comment">//使用记忆函数</span></span><br><span class="line"><span class="keyword">let</span> _capitalize = cached(capitalize)</span><br></pre></td></tr></table></figure><h2 id="extend：将属性混合到目标对象中"><a href="#extend：将属性混合到目标对象中" class="headerlink" title="extend：将属性混合到目标对象中"></a>extend：将属性混合到目标对象中</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">to, _from</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> _from) &#123;</span><br><span class="line">    to[key] = _from[key]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> to</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="识别各种浏览器及平台"><a href="#识别各种浏览器及平台" class="headerlink" title="识别各种浏览器及平台"></a>识别各种浏览器及平台</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//运行环境是浏览器</span></span><br><span class="line"><span class="keyword">let</span> inBrowser = <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span></span><br><span class="line"><span class="comment">//运行环境是微信</span></span><br><span class="line"><span class="keyword">let</span> inWeex = <span class="keyword">typeof</span> WXEnvironment !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; !!WXEnvironment.platform</span><br><span class="line"><span class="keyword">let</span> weexPlatform = inWeex &amp;&amp; WXEnvironment.platform.toLowerCase()</span><br><span class="line"><span class="comment">//浏览器 UA 判断</span></span><br><span class="line"><span class="keyword">let</span> UA = inBrowser &amp;&amp; <span class="built_in">window</span>.navigator.userAgent.toLowerCase()</span><br><span class="line"><span class="keyword">let</span> isIE = UA &amp;&amp; <span class="regexp">/msie|trident/</span>.test(UA)</span><br><span class="line"><span class="keyword">let</span> isIE9 = UA &amp;&amp; UA.indexOf(<span class="string">&#x27;msie 9.0&#x27;</span>) &gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> isEdge = UA &amp;&amp; UA.indexOf(<span class="string">&#x27;edge/&#x27;</span>) &gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> isAndroid = (UA &amp;&amp; UA.indexOf(<span class="string">&#x27;android&#x27;</span>) &gt; <span class="number">0</span>) || weexPlatform === <span class="string">&#x27;android&#x27;</span></span><br><span class="line"><span class="keyword">let</span> isIOS = (UA &amp;&amp; <span class="regexp">/iphone|ipad|ipod|ios/</span>.test(UA)) || weexPlatform === <span class="string">&#x27;ios&#x27;</span></span><br><span class="line"><span class="keyword">let</span> isChrome = UA &amp;&amp; <span class="regexp">/chrome\/\d+/</span>.test(UA) &amp;&amp; !isEdge</span><br></pre></td></tr></table></figure><h2 id="getExplorerInfo：获取浏览器信息"><a href="#getExplorerInfo：获取浏览器信息" class="headerlink" title="getExplorerInfo：获取浏览器信息"></a>getExplorerInfo：获取浏览器信息</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getExplorerInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> t = navigator.userAgent.toLowerCase()</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span> &lt;= t.indexOf(<span class="string">&#x27;msie&#x27;</span>)</span><br><span class="line">    ? &#123;</span><br><span class="line">        <span class="comment">//ie &lt; 11</span></span><br><span class="line">        type: <span class="string">&#x27;IE&#x27;</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/msie ([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    : !!t.match(<span class="regexp">/trident\/.+?rv:(([\d.]+))/</span>)</span><br><span class="line">    ? &#123;</span><br><span class="line">        <span class="comment">// ie 11</span></span><br><span class="line">        type: <span class="string">&#x27;IE&#x27;</span>,</span><br><span class="line">        version: <span class="number">11</span></span><br><span class="line">      &#125;</span><br><span class="line">    : <span class="number">0</span> &lt;= t.indexOf(<span class="string">&#x27;edge&#x27;</span>)</span><br><span class="line">    ? &#123;</span><br><span class="line">        type: <span class="string">&#x27;Edge&#x27;</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/edge\/([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    : <span class="number">0</span> &lt;= t.indexOf(<span class="string">&#x27;firefox&#x27;</span>)</span><br><span class="line">    ? &#123;</span><br><span class="line">        type: <span class="string">&#x27;Firefox&#x27;</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/firefox\/([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    : <span class="number">0</span> &lt;= t.indexOf(<span class="string">&#x27;chrome&#x27;</span>)</span><br><span class="line">    ? &#123;</span><br><span class="line">        type: <span class="string">&#x27;Chrome&#x27;</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/chrome\/([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    : <span class="number">0</span> &lt;= t.indexOf(<span class="string">&#x27;opera&#x27;</span>)</span><br><span class="line">    ? &#123;</span><br><span class="line">        type: <span class="string">&#x27;Opera&#x27;</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/opera.([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    : <span class="number">0</span> &lt;= t.indexOf(<span class="string">&#x27;Safari&#x27;</span>)</span><br><span class="line">    ? &#123;</span><br><span class="line">        type: <span class="string">&#x27;Safari&#x27;</span>,</span><br><span class="line">        version: <span class="built_in">Number</span>(t.match(<span class="regexp">/version\/([\d]+)/</span>)[<span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    : &#123;</span><br><span class="line">        type: t,</span><br><span class="line">        version: -<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isPCBroswer：检测是否为-PC-端浏览器模式"><a href="#isPCBroswer：检测是否为-PC-端浏览器模式" class="headerlink" title="isPCBroswer：检测是否为 PC 端浏览器模式"></a>isPCBroswer：检测是否为 PC 端浏览器模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPCBroswer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> e = navigator.userAgent.toLowerCase(),</span><br><span class="line">    t = <span class="string">&#x27;ipad&#x27;</span> == e.match(<span class="regexp">/ipad/i</span>),</span><br><span class="line">    i = <span class="string">&#x27;iphone&#x27;</span> == e.match(<span class="regexp">/iphone/i</span>),</span><br><span class="line">    r = <span class="string">&#x27;midp&#x27;</span> == e.match(<span class="regexp">/midp/i</span>),</span><br><span class="line">    n = <span class="string">&#x27;rv:1.2.3.4&#x27;</span> == e.match(<span class="regexp">/rv:1.2.3.4/i</span>),</span><br><span class="line">    a = <span class="string">&#x27;ucweb&#x27;</span> == e.match(<span class="regexp">/ucweb/i</span>),</span><br><span class="line">    o = <span class="string">&#x27;android&#x27;</span> == e.match(<span class="regexp">/android/i</span>),</span><br><span class="line">    s = <span class="string">&#x27;windows ce&#x27;</span> == e.match(<span class="regexp">/windows ce/i</span>),</span><br><span class="line">    l = <span class="string">&#x27;windows mobile&#x27;</span> == e.match(<span class="regexp">/windows mobile/i</span>)</span><br><span class="line">  <span class="keyword">return</span> !(t || i || r || n || a || o || s || l)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="dateFormater：格式化时间"><a href="#dateFormater：格式化时间" class="headerlink" title="dateFormater：格式化时间"></a>dateFormater：格式化时间</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateFormater</span>(<span class="params">formater, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> date = t ? <span class="keyword">new</span> <span class="built_in">Date</span>(t) : <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">    Y = date.getFullYear() + <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    M = date.getMonth() + <span class="number">1</span>,</span><br><span class="line">    D = date.getDate(),</span><br><span class="line">    H = date.getHours(),</span><br><span class="line">    m = date.getMinutes(),</span><br><span class="line">    s = date.getSeconds()</span><br><span class="line">  <span class="keyword">return</span> formater</span><br><span class="line">    .replace(<span class="regexp">/YYYY|yyyy/g</span>, Y)</span><br><span class="line">    .replace(<span class="regexp">/YY|yy/g</span>, Y.substr(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">    .replace(<span class="regexp">/MM/g</span>, (M &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;&#x27;</span>) + M)</span><br><span class="line">    .replace(<span class="regexp">/DD/g</span>, (D &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;&#x27;</span>) + D)</span><br><span class="line">    .replace(<span class="regexp">/HH|hh/g</span>, (H &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;&#x27;</span>) + H)</span><br><span class="line">    .replace(<span class="regexp">/mm/g</span>, (m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;&#x27;</span>) + m)</span><br><span class="line">    .replace(<span class="regexp">/ss/g</span>, (s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;&#x27;</span>) + s)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dateFormater(&#x27;YYYY-MM-DD HH:mm&#x27;, t) ==&gt; 2019-06-26 18:30</span></span><br><span class="line"><span class="comment">// dateFormater(&#x27;YYYYMMDDHHmm&#x27;, t) ==&gt; 201906261830</span></span><br></pre></td></tr></table></figure><h2 id="dateStrForma：将指定字符串由一种时间格式转化为另一种"><a href="#dateStrForma：将指定字符串由一种时间格式转化为另一种" class="headerlink" title="dateStrForma：将指定字符串由一种时间格式转化为另一种"></a>dateStrForma：将指定字符串由一种时间格式转化为另一种</h2><p>from 的格式应对应 str 的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateStrForma</span>(<span class="params">str, <span class="keyword">from</span>, to</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//&#x27;20190626&#x27; &#x27;YYYYMMDD&#x27; &#x27;YYYY年MM月DD日&#x27;</span></span><br><span class="line">  str += <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">let</span> Y = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (~(Y = <span class="keyword">from</span>.indexOf(<span class="string">&#x27;YYYY&#x27;</span>))) &#123;</span><br><span class="line">    Y = str.substr(Y, <span class="number">4</span>)</span><br><span class="line">    to = to.replace(<span class="regexp">/YYYY|yyyy/g</span>, Y)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (~(Y = <span class="keyword">from</span>.indexOf(<span class="string">&#x27;YY&#x27;</span>))) &#123;</span><br><span class="line">    Y = str.substr(Y, <span class="number">2</span>)</span><br><span class="line">    to = to.replace(<span class="regexp">/YY|yy/g</span>, Y)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> k, i</span><br><span class="line">  ;[<span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;s&#x27;</span>].forEach(<span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">    i = <span class="keyword">from</span>.indexOf(s + s)</span><br><span class="line">    k = ~i ? str.substr(i, <span class="number">2</span>) : <span class="string">&#x27;&#x27;</span></span><br><span class="line">    to = to.replace(s + s, k)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> to</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dateStrForma(&#x27;20190626&#x27;, &#x27;YYYYMMDD&#x27;, &#x27;YYYY年MM月DD日&#x27;) ==&gt; 2019年06月26日</span></span><br><span class="line"><span class="comment">// dateStrForma(&#x27;121220190626&#x27;, &#x27;----YYYYMMDD&#x27;, &#x27;YYYY年MM月DD日&#x27;) ==&gt; 2019年06月26日</span></span><br><span class="line"><span class="comment">// dateStrForma(&#x27;2019年06月26日&#x27;, &#x27;YYYY年MM月DD日&#x27;, &#x27;YYYYMMDD&#x27;) ==&gt; 20190626</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般的也可以使用正则来实现</span></span><br><span class="line"><span class="comment">//&#x27;2019年06月26日&#x27;.replace(/(\d&#123;4&#125;)年(\d&#123;2&#125;)月(\d&#123;2&#125;)日/, &#x27;$1-$2-$3&#x27;) ==&gt; 2019-06-26</span></span><br></pre></td></tr></table></figure><h2 id="GetUrlParam：获取-Url-参数，返回一个对象"><a href="#GetUrlParam：获取-Url-参数，返回一个对象" class="headerlink" title="GetUrlParam：获取 Url 参数，返回一个对象"></a>GetUrlParam：获取 Url 参数，返回一个对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetUrlParam</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="built_in">document</span>.location.toString()</span><br><span class="line">  <span class="keyword">let</span> arrObj = url.split(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> params = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">if</span> (arrObj.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    arrObj = arrObj[<span class="number">1</span>].split(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">    arrObj.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      item = item.split(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">      params[item[<span class="number">0</span>]] = item[<span class="number">1</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> params</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ?a=1&amp;b=2&amp;c=3 ==&gt; &#123;a: &quot;1&quot;, b: &quot;2&quot;, c: &quot;3&quot;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="downloadFile：base64-数据导出文件，文件下载"><a href="#downloadFile：base64-数据导出文件，文件下载" class="headerlink" title="downloadFile：base64 数据导出文件，文件下载"></a>downloadFile：base64 数据导出文件，文件下载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params">filename, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> DownloadLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (DownloadLink) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(DownloadLink)</span><br><span class="line">    DownloadLink.style = <span class="string">&#x27;display: none&#x27;</span></span><br><span class="line">    DownloadLink.download = filename</span><br><span class="line">    DownloadLink.href = data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.createEvent) &#123;</span><br><span class="line">      <span class="keyword">let</span> DownloadEvt = <span class="built_in">document</span>.createEvent(<span class="string">&#x27;MouseEvents&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      DownloadEvt.initEvent(<span class="string">&#x27;click&#x27;</span>, <span class="literal">true</span>, <span class="literal">false</span>)</span><br><span class="line">      DownloadLink.dispatchEvent(DownloadEvt)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.createEventObject) DownloadLink.fireEvent(<span class="string">&#x27;onclick&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> DownloadLink.onclick == <span class="string">&#x27;function&#x27;</span>) DownloadLink.onclick()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(DownloadLink)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="toFullScreen：全屏"><a href="#toFullScreen：全屏" class="headerlink" title="toFullScreen：全屏"></a>toFullScreen：全屏</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toFullScreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> elem = <span class="built_in">document</span>.body</span><br><span class="line">  elem.webkitRequestFullScreen</span><br><span class="line">    ? elem.webkitRequestFullScreen()</span><br><span class="line">    : elem.mozRequestFullScreen</span><br><span class="line">    ? elem.mozRequestFullScreen()</span><br><span class="line">    : elem.msRequestFullscreen</span><br><span class="line">    ? elem.msRequestFullscreen()</span><br><span class="line">    : elem.requestFullScreen</span><br><span class="line">    ? elem.requestFullScreen()</span><br><span class="line">    : alert(<span class="string">&#x27;浏览器不支持全屏&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exitFullscreen：退出全屏"><a href="#exitFullscreen：退出全屏" class="headerlink" title="exitFullscreen：退出全屏"></a>exitFullscreen：退出全屏</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exitFullscreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> elem = parent.document</span><br><span class="line">  elem.webkitCancelFullScreen</span><br><span class="line">    ? elem.webkitCancelFullScreen()</span><br><span class="line">    : elem.mozCancelFullScreen</span><br><span class="line">    ? elem.mozCancelFullScreen()</span><br><span class="line">    : elem.cancelFullScreen</span><br><span class="line">    ? elem.cancelFullScreen()</span><br><span class="line">    : elem.msExitFullscreen</span><br><span class="line">    ? elem.msExitFullscreen()</span><br><span class="line">    : elem.exitFullscreen</span><br><span class="line">    ? elem.exitFullscreen()</span><br><span class="line">    : alert(<span class="string">&#x27;切换失败,可尝试Esc退出&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="requestAnimationFrame：window-动画"><a href="#requestAnimationFrame：window-动画" class="headerlink" title="requestAnimationFrame：window 动画"></a>requestAnimationFrame：window 动画</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.requestAnimationFrame =</span><br><span class="line">  <span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line">  <span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line">  <span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line">  <span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line">  <span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//为了使setTimteout的尽可能的接近每秒60帧的效果</span></span><br><span class="line">    <span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.cancelAnimationFrame =</span><br><span class="line">  <span class="built_in">window</span>.cancelAnimationFrame ||</span><br><span class="line">  Window.webkitCancelAnimationFrame ||</span><br><span class="line">  <span class="built_in">window</span>.mozCancelAnimationFrame ||</span><br><span class="line">  <span class="built_in">window</span>.msCancelAnimationFrame ||</span><br><span class="line">  <span class="built_in">window</span>.oCancelAnimationFrame ||</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//为了使setTimteout的尽可能的接近每秒60帧的效果</span></span><br><span class="line">    <span class="built_in">window</span>.clearTimeout(id)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="max：求取数组中非-NaN-数据中的最大值"><a href="#max：求取数组中非-NaN-数据中的最大值" class="headerlink" title="max：求取数组中非 NaN 数据中的最大值"></a>max：求取数组中非 NaN 数据中的最大值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  arr = arr.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> !_isNaN(item))</span><br><span class="line">  <span class="keyword">return</span> arr.length ? <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr) : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//max([1, 2, &#x27;11&#x27;, null, &#x27;fdf&#x27;, []]) ==&gt; 11</span></span><br></pre></td></tr></table></figure><h2 id="min：求取数组中非-NaN-数据中的最小值"><a href="#min：求取数组中非-NaN-数据中的最小值" class="headerlink" title="min：求取数组中非 NaN 数据中的最小值"></a>min：求取数组中非 NaN 数据中的最小值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  arr = arr.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> !_isNaN(item))</span><br><span class="line">  <span class="keyword">return</span> arr.length ? <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, arr) : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//min([1, 2, &#x27;11&#x27;, null, &#x27;fdf&#x27;, []]) ==&gt; 1</span></span><br></pre></td></tr></table></figure><h2 id="random：返回一个-lower-upper-之间的随机数"><a href="#random：返回一个-lower-upper-之间的随机数" class="headerlink" title="random：返回一个 lower - upper 之间的随机数"></a>random：返回一个 lower - upper 之间的随机数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params">lower, upper</span>) </span>&#123;</span><br><span class="line">  lower = +lower || <span class="number">0</span></span><br><span class="line">  upper = +upper || <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.random() * (upper - lower) + lower</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//random(0, 0.5) ==&gt; 0.3567039135734613</span></span><br><span class="line"><span class="comment">//random(2, 1) ===&gt; 1.6718418553475423</span></span><br><span class="line"><span class="comment">//random(-2, -1) ==&gt; -1.4474325452361945</span></span><br></pre></td></tr></table></figure><h2 id="performance-timing：利用-performance-timing-进行性能分析"><a href="#performance-timing：利用-performance-timing-进行性能分析" class="headerlink" title="performance.timing：利用 performance.timing 进行性能分析"></a>performance.timing：利用 performance.timing 进行性能分析</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> t = performance.timing</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">&#x27;DNS查询耗时 ：&#x27;</span> + (t.domainLookupEnd - t.domainLookupStart).toFixed(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;TCP链接耗时 ：&#x27;</span> + (t.connectEnd - t.connectStart).toFixed(<span class="number">0</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">&#x27;request请求耗时 ：&#x27;</span> + (t.responseEnd - t.responseStart).toFixed(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">&#x27;解析dom树耗时 ：&#x27;</span> + (t.domComplete - t.domInteractive).toFixed(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">&#x27;白屏时间 ：&#x27;</span> + (t.responseStart - t.navigationStart).toFixed(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">&#x27;domready时间 ：&#x27;</span> +</span><br><span class="line">        (t.domContentLoadedEventEnd - t.navigationStart).toFixed(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">&#x27;onload时间 ：&#x27;</span> + (t.loadEventEnd - t.navigationStart).toFixed(<span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((t = performance.memory)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">&#x27;js内存使用占比 ：&#x27;</span> +</span><br><span class="line">          ((t.usedJSHeapSize / t.totalJSHeapSize) * <span class="number">100</span>).toFixed(<span class="number">2</span>) +</span><br><span class="line">          <span class="string">&#x27;%&#x27;</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="禁止某些键盘事件"><a href="#禁止某些键盘事件" class="headerlink" title="禁止某些键盘事件"></a>禁止某些键盘事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;keydown&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    !(</span><br><span class="line">      (</span><br><span class="line">        <span class="number">112</span> == event.keyCode || <span class="comment">//F1</span></span><br><span class="line">        <span class="number">123</span> == event.keyCode || <span class="comment">//F12</span></span><br><span class="line">        (event.ctrlKey &amp;&amp; <span class="number">82</span> == event.keyCode) || <span class="comment">//ctrl + R</span></span><br><span class="line">        (event.ctrlKey &amp;&amp; <span class="number">78</span> == event.keyCode) || <span class="comment">//ctrl + N</span></span><br><span class="line">        (event.shiftKey &amp;&amp; <span class="number">121</span> == event.keyCode) || <span class="comment">//shift + F10</span></span><br><span class="line">        (event.altKey &amp;&amp; <span class="number">115</span> == event.keyCode) || <span class="comment">//alt + F4</span></span><br><span class="line">        (<span class="string">&#x27;A&#x27;</span> == event.srcElement.tagName &amp;&amp; event.shiftKey)</span><br><span class="line">      ) <span class="comment">//shift + 点击a标签</span></span><br><span class="line">    ) || (event.returnValue = <span class="literal">false</span>)</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="禁止右键、选择、复制"><a href="#禁止右键、选择、复制" class="headerlink" title="禁止右键、选择、复制"></a>禁止右键、选择、复制</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">;[<span class="string">&#x27;contextmenu&#x27;</span>, <span class="string">&#x27;selectstart&#x27;</span>, <span class="string">&#x27;copy&#x27;</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(ev, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (event.returnValue = <span class="literal">false</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;搬运平时常用的工具函数&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://colorfulworld.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>运营商劫持</title>
    <link href="https://colorfulworld.github.io/%E8%BF%90%E8%90%A5%E5%95%86%E5%8A%AB%E6%8C%81/"/>
    <id>https://colorfulworld.github.io/%E8%BF%90%E8%90%A5%E5%95%86%E5%8A%AB%E6%8C%81/</id>
    <published>2021-05-23T11:45:57.000Z</published>
    <updated>2021-05-23T15:21:47.740Z</updated>
    
    <content type="html"><![CDATA[<p>什么是运营商劫持?有什么预防措施？</p><span id="more"></span><h2 id="什么是运营商"><a href="#什么是运营商" class="headerlink" title="什么是运营商"></a>什么是运营商</h2><p>运营商是指那些提供宽带服务的 ISP，包括三大运营商中国电信、中国移动、中国联通，还有一些小运营商，比如长城宽带等。运营商提供最基础的网络服务，掌握着通往用户武力大门的钥匙，目前运营商劫持很普遍。</p><h2 id="劫持方式"><a href="#劫持方式" class="headerlink" title="劫持方式"></a>劫持方式</h2><p>常见的方式有三种，分别是 DNS 劫持、HTTP 劫持（HTTP 是明文传输）、HTTPS 劫持</p><h2 id="DNS-劫持"><a href="#DNS-劫持" class="headerlink" title="DNS 劫持"></a>DNS 劫持</h2><p>这种劫持会将页面链接重定向到其他网站，所熟知的钓鱼网站就是如此，但是因为它的违法性， 现在被严厉监管起来。DNS 是域名和 IP 地址相互映射的一个分布式数据库，DNS 使用 TCP 和 UDP 端口。DNS 劫持是通过某种技术手段，篡改正确域名和 IP 地址的映射关系，使得域名映射到了错误的 IP 地址，因此可以认为 DNS 劫持是一种 DNS 重定向攻击。</p><h3 id="本地-DNS-劫持"><a href="#本地-DNS-劫持" class="headerlink" title="本地 DNS 劫持"></a>本地 DNS 劫持</h3><p>客户端侧发生的 DNS 劫持统称为本地 DNS 劫持。本地 DNS 劫持可能是：</p><ol><li>黑客通过木马病毒或者恶意程序入侵 PC，篡改 DNS 配置（host 文件，DNS 服务器地址，DNS 缓存等）</li><li>黑客利用路由器漏洞或者攻击路由器管理账号入侵路由器并且篡改 DNS 配置。</li><li>一些企业配置设备（如 Cisco Umbrella intelligent proxy）针对切页内部场景对一些特定的域名做 DNS 劫持解析为指定的结果。</li></ol><h3 id="DNS-解析路径劫持"><a href="#DNS-解析路径劫持" class="headerlink" title="DNS 解析路径劫持"></a>DNS 解析路径劫持</h3><p>DNS 解析过程中发生在哭护短和 DNS 服务器网络通信时的 DNS 劫持统一归类为 DNS 解析路径劫持。通过对 DNS 解析报文在查询阶段的劫持路径进行划分，又可以将 DNS 解析路径劫持划分为以下 3 类</p><ul><li>DNS 请求转发：通过技术手段（中间盒子，软件等）将 DNS 流量重定向到其他 DNS 服务器。</li><li>DNS 请求复制：利用分光设备将 DNS 查询复制到网络设备，并先于正常应答返回 DNS 劫持结果（一个 DNS 查询抓包返回两个不同的应答）</li><li>DNS 请求代答：网络设备或软件直接代替 DNS 服务器对 DNS 查询进行应答</li></ul><h3 id="篡改-DNS-权威记录"><a href="#篡改-DNS-权威记录" class="headerlink" title="篡改 DNS 权威记录"></a>篡改 DNS 权威记录</h3><p>串改 DNS 权威记录是指黑客非法入侵 DNS 权威记录管理账号，直接修改 DNS 记录的行为（黑客黑入域名的管理账户，篡改 DNS 权威记录指向自己的恶意服务器以实现 DNS 劫持。</p><h3 id="DNS-劫持应对策略"><a href="#DNS-劫持应对策略" class="headerlink" title="DNS 劫持应对策略"></a>DNS 劫持应对策略</h3><ul><li>安装杀毒软件，防御木马病毒和恶意软件；定期修改路由器管理账号密码和更新固件</li><li>选择支持 DNSSEC 域名解析服务商，并且给自己的域名实施 DNSSEC。DNSSEC 能够保证递归 DNS 服务器和权威 DNS 服务器之间的通信不被篡改。（阿里云 DNS）</li><li>在客户端和递归 DNS 服务器通信的使用 DNS 加密技术，例如 DNS-over-TLS,DNS-over-HTTPS 等</li></ul><h2 id="HTTP-劫持"><a href="#HTTP-劫持" class="headerlink" title="HTTP 劫持"></a>HTTP 劫持</h2><p>有时页脚会出现一些小广告，有时这些广告不是站点的，而是第三方运营商提供的</p><p>HTTP 劫持的步骤：</p><ul><li>标识 HTTP 连接，在总舵的 TCP 链接中，找到应用层采用了 HTTP 协议的链接，进行标识</li><li>篡改 HTTP 的响应体，可以通过网关来获取数据包进行内容的篡改</li><li>抢先回包，将篡改后的数据包强心正常点返回的数据包先到达用户侧，这样后面正常的数据包在达到之后会被直接丢弃</li></ul><h3 id="HTTP-劫持的防范"><a href="#HTTP-劫持的防范" class="headerlink" title="HTTP 劫持的防范"></a>HTTP 劫持的防范</h3><p>一般都是插入静态脚本或者是 HTML Contenet，或者是将整体替换成 iframe，然后在顶层的 iframe 上进行内容的植入。（script、iframe 注入型劫持）</p><p>HTTP 劫持的防范主要分为</p><ul><li>事前加密<ul><li>https,TLS 握手会有 2 次 RTT 延迟</li><li>加密代理：加密代理是在用户侧和目标 web 服务器之间增加一个代理服务器，在用户和代理之间使用 HTTP 请求，只需确认代理与 web 服务之间不会被 HTTP 劫持就可以避开 HTTP 劫持</li></ul></li><li>事中规避<br>拆分 HTTP 请求数据包</li><li>事后屏蔽<br>通过浏览器 Api，根据若干规则去匹配 DOM 中的节点，对匹配到的节点作拦截和隐藏</li></ul><p>CSP（内容安全策略），DOM 事件监听等。</p><h2 id="HTTPS-劫持"><a href="#HTTPS-劫持" class="headerlink" title="HTTPS 劫持"></a>HTTPS 劫持</h2><p>HTTPS 劫持有两种：</p><ul><li>伪造证书，通过病毒或者其他方式将伪造证书的根证书安装在用户系统中</li><li>代理也有客户的证书与私钥，或者客户端与代理认证的时候不校验合法性，即可通过代理来与我们服务端进行数据交互（较多）</li></ul><h3 id="MITM"><a href="#MITM" class="headerlink" title="MITM"></a>MITM</h3><p>中间人攻击(man-in-the-middle attack, abbreviated to MITM),简单的讲，就是黑客悄悄的躲在通信双方之间，窃听甚至篡改通信信息。而通信双方并不知道消息已经被截获甚至篡改了。</p><p>也有一些人通过代理服务器浏览外网，这里的代理服务器其实就是充当中间人的角色，所以要当心使用免费 vpn。</p><p>在通信过程中，客户端或者操作系统内置了权威 CA 的根证书，而服务器在通信之初，会先返回在 CA 那里获取的签名证书，然后客户端用根证书验证证书有效性，最后使用验证通过的证书提供公钥加密数据</p><p>早年 12306 使用了自己签名的证书，但是主流浏览器不认可，导致用户需要在首次下载证书并安装，不发纷争完全可以利用这个机制把非法、书安装到用户设备上，但如今 12306 已经采用 digiCert 颁布的证书了</p><p>除了 CA 数字证书，还有一些专用的秘钥交互协议，比如 ZRTP、HPKP、DNSSEC 等，他们都能在一定程度上保证通信安全</p><h2 id="参考与扩展"><a href="#参考与扩展" class="headerlink" title="参考与扩展"></a>参考与扩展</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/86538629">聊一聊 DNS 劫持那些事</a></li><li><a href="https://developer.aliyun.com/article/711961">DNS 攻击防范科普系列一</a></li><li><a href="https://www.aliyun.com/?spm=a2c6h.12873639.J_8058803260.1.17a82993X6QmeG">DNS 服务器怎么防 DDoS 攻击</a></li><li><a href="https://developer.aliyun.com/article/716777">如何保障 DNS 操作安全</a></li><li><a href="https://developer.aliyun.com/article/718497">遭遇 DNS 缓存投毒该怎么办</a></li><li><a href="https://zhuanlan.zhihu.com/p/31344484">HTTP 劫持</a></li><li><a href="https://segmentfault.com/a/1190000020405407">中间人攻击，HTTPS 也可以被碾压</a></li><li><a href="https://weibo.com/p/230418639769c30102vx8d?mod=zwenzhang&sudaref=www.google.com">12306 的证书问题</a></li><li><a href="https://juejin.cn/post/6844903713669283847">防运营商劫持</a></li><li><a href="https://fex.baidu.com/blog/2014/08/ssl-frontend-hijack/">SSLStrip 的未来 —— HTTPS 前端劫持</a></li><li><a href="https://github.com/airuikun/Weekly-FE-Interview/issues/11">如何劫持 https 的请求</a></li><li><a href="https://blog.xray.cool/post/HTTPS-hijacking/">HTTPS 劫持漫谈：代理劫持与透明劫持</a></li><li><a href="https://cjting.me/2021/03/02/how-to-validate-tls-certificate/">安全背后: 浏览器是如何校验证书的</a></li><li><a href="https://blogs.360.cn/post/%E8%BF%90%E8%90%A5%E5%95%86dns%E5%8A%AB%E6%8C%81%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF-%E4%BD%9C%E8%80%85%EF%BC%9Airideas.html">运营商 DNS 劫持的那些事儿</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;什么是运营商劫持?有什么预防措施？&lt;/p&gt;</summary>
    
    
    
    <category term="网络&amp;安全" scheme="https://colorfulworld.github.io/categories/%E7%BD%91%E7%BB%9C-%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>node中间层及简单api编写</title>
    <link href="https://colorfulworld.github.io/node%E4%B8%AD%E9%97%B4%E5%B1%82%E5%8F%8A%E7%AE%80%E5%8D%95api%E7%BC%96%E5%86%99/"/>
    <id>https://colorfulworld.github.io/node%E4%B8%AD%E9%97%B4%E5%B1%82%E5%8F%8A%E7%AE%80%E5%8D%95api%E7%BC%96%E5%86%99/</id>
    <published>2021-04-20T06:49:27.000Z</published>
    <updated>2021-04-24T15:38:16.548Z</updated>
    
    <content type="html"><![CDATA[<p>Node.js 对前端来说无疑具有里程碑意义，尤其是在越来越流行的今天，掌握 Node.js 技术已经不仅仅是加分项，而是前端攻城师们需要去掌握的一项技能。</p><span id="more"></span><h2 id="Node-js-是什么"><a href="#Node-js-是什么" class="headerlink" title="Node.js 是什么"></a>Node.js 是什么</h2><p>简单的说 Node.js 就是一个 javascript 运行环境。它让 javascript 可以开发后端程序，实现几乎其他后端语言实现的所有功能，可以与 PHP、Java、Python、.NET、Ruby 等后端语言一较高下。</p><p>Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。</p><p>Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好。<br><code>Node.js = Runtime Environment + JavaScript Library</code></p><h2 id="Node-js-优势"><a href="#Node-js-优势" class="headerlink" title="Node.js 优势"></a>Node.js 优势</h2><ul><li><p><strong>Nodejs 语法完全是 js 语法</strong><br>只要你懂 js 基础就可以学会 Nodejs 后端开发，对前端开发者友好。</p></li><li><p><strong>NodeJs 超强的高并发能力</strong><br>放弃了“为每一个用户连接创建一个新线程”的思想，通过非阻塞 I/O、事件驱动机制，让 Node.js 程序宏观上也是并行的。</p></li><li><p><strong>实现高性能服务器</strong><br>严格地说，Node.js 是一个用于开发各种 web 服务器的开发工具。在 Node.js 服务器中，运行的是高性能 V8 JavaScript 脚本语言，该语言是一种可以运行在服务器端的脚本语言。</p><p>Node.js 自身哲学，是话最小的硬件成本，追求更高的并发，更高的处理性能。</p></li></ul><h2 id="Node-js-特点"><a href="#Node-js-特点" class="headerlink" title="Node.js 特点"></a>Node.js 特点</h2><p>异步事件驱动、非堵塞 I/O</p><ul><li><p><strong>Node.js 使用事件驱动模型，当 web server 接收到请求，就把它关闭然后进行处理，然后去服务下一个 web 请求。</strong><br>当这个请求完成，它被放回处理队列，当到达队列开头，这个结果被返回给用户。<br>这个模型非常高效可扩展性非常强，因为 webserver 一直接受请求而不等待任何读写操作。这个模型非常高效可扩展性非常强，因为 webserver 一直接受请求而不等待任何读写操作。（这也被称之为非阻塞式 IO 或者事件驱动 IO）</p><p>在事件驱动模型中，会生成一个主循环来监听事件，当检测到事件时触发回调函数</p></li><li><p><strong>单线程</strong></p><p>Nodejs 跟 Nginx 一样都是单线程为基础的，这里的单线程指主线程为单线程，所有的阻塞的全部放入一个线程池中，然后主线程通过队列的方式跟线程池来协作。我们写 js 部分不需要关心线程的问题，简单了解就可以了，主要由一堆 callback 回调构成的，然后主线程在循环过在适当场合调用。</p></li><li><p><strong>性能出众</strong></p><p>底层选择用 c++和 v8 来实现的，上面第一点讲到过，nodejs 的事件驱动机制，这意味着面对大规模的 http 请求，nodejs 是凭借事件驱动来完成的，性能部分是不用担心的，并且很出色。</p></li></ul><h2 id="Node-js-应用实例"><a href="#Node-js-应用实例" class="headerlink" title="Node.js 应用实例"></a>Node.js 应用实例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hostname = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.statusCode = <span class="number">200</span>;</span><br><span class="line">  res.setHeader(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>);</span><br><span class="line">  res.end(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(port, hostname, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Server running at http://<span class="subst">$&#123;hostname&#125;</span>:<span class="subst">$&#123;port&#125;</span>/`</span>);</span><br></pre></td></tr></table></figure><h2 id="Express-简介"><a href="#Express-简介" class="headerlink" title="Express 简介"></a>Express 简介</h2><p>Express 是一个简洁而灵活的 node.js Web 应用框架, 提供了一系列强大特性帮助你创建各种 Web 应用，和丰富的 HTTP 工具。</p><p>使用 Express 可以快速地搭建一个完整功能的网站。</p><p>Express 框架核心特性：</p><ul><li>可以设置中间件来响应 HTTP 请求。</li><li>定义了路由表用于执行不同的 HTTP 请求动作。</li><li>可以通过向模板传递参数来动态渲染 HTML 页面。</li><li>介绍就先告一段落了，接下来通过一个项目实例来进行 node 搭建服务的讲解</li></ul><h2 id="Node-简单的-api-编写"><a href="#Node-简单的-api-编写" class="headerlink" title="Node 简单的 api 编写"></a>Node 简单的 api 编写</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>此章节采用项目实例直接演示如何实现简单 API 的编写。前端项目采用的技术栈是基于 Vue + Antdv，用 vue-cli 构建前端界面，后端项目采用的技术栈是基于 Node.js + Express + MySQL，用 Express 搭建的后端服务器。</p><h3 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h3><p>使用 Vue + antdv，用 vue-cli 构建前端项目</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">│ package.json // npm 包管理所需模块及配置信息</span><br><span class="line">│ vue.config.js // webpack 配置</span><br><span class="line">├─public</span><br><span class="line">│ favicon.ico // 图标</span><br><span class="line">│ index.html // 入口 html 文件</span><br><span class="line">└─src</span><br><span class="line">│ App.vue // 根组件</span><br><span class="line">│ main.js // 程序入口文件</span><br><span class="line">│ permission.js // 权限拦截</span><br><span class="line">│ globla.less // 全局样式</span><br><span class="line">├─api</span><br><span class="line">│ task.js // 任务模块接口</span><br><span class="line">│ user.js // 用户模块接口</span><br><span class="line">├─assets // 存放公共图片文件夹</span><br><span class="line">├─components</span><br><span class="line">│ ProLayout // Pro 布局组建</span><br><span class="line">├─layouts</span><br><span class="line">│ index.js // 布局整合</span><br><span class="line">│ UserLayout.vue // 用户布局</span><br><span class="line">│ BasicLayout.vue // 基本布局</span><br><span class="line">├─core</span><br><span class="line">│ lazy_use.js // 懒加载使用的 antd 等</span><br><span class="line">├─router</span><br><span class="line">│ index.js // 单页面路由注册组件</span><br><span class="line">├─store</span><br><span class="line">│ │ index.js // 状态管理仓库入口文件</span><br><span class="line">│ │ getters.js // getter</span><br><span class="line">│ │ mutation-types.js // store 使用的常量</span><br><span class="line">│ └─modules</span><br><span class="line">│ user.js // 用户模块状态管理文件</span><br><span class="line">├─utils</span><br><span class="line">│ axios.js // 安装 axios 插件</span><br><span class="line">│ domUtils.js // 操作页签 title</span><br><span class="line">│ request.js // axios 封装与拦截器配置</span><br><span class="line">└─views</span><br><span class="line">user // 用户模块页面</span><br><span class="line">task // 任务模块页面</span><br><span class="line"><span class="number">404</span>.vue // <span class="number">404</span> 页面</span><br></pre></td></tr></table></figure><h3 id="MySQL-与-Navicat"><a href="#MySQL-与-Navicat" class="headerlink" title="MySQL 与 Navicat"></a>MySQL 与 Navicat</h3><p>MySQL 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。</p><p>Navicat premium 是一款数据库管理工具,是一个可多重连线资料库的管理工具，它可以让你以单一程式同时连线到 MySQL、SQLite、Oracle 及 PostgreSQL 资料库，让管理不同类型的资料库更加的方便。</p><h4 id="数据库设计部分"><a href="#数据库设计部分" class="headerlink" title="数据库设计部分"></a>数据库设计部分</h4><p>使用 MYSQL，创建数据库 todo，创建 sys_user 用户表及创建 sys_task 任务表</p><p>-创建数据库–</p><p><code>CREATE DATABASE </code>todo<code> DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</code><br>–创建用户表–</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS <span class="string">`sys_user`</span>;</span><br><span class="line">CREATE TABLE <span class="string">`sys_user`</span> (</span><br><span class="line"><span class="string">`id`</span> BIGINT(<span class="number">20</span>) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT <span class="string">&#x27;唯一标识&#x27;</span>,</span><br><span class="line"><span class="string">`username`</span> VARCHAR(<span class="number">50</span>) NOT NULL COMMENT <span class="string">&#x27;登录帐号&#x27;</span>,</span><br><span class="line"><span class="string">`password`</span> VARCHAR(<span class="number">64</span>) NOT NULL  COMMENT <span class="string">&#x27;登录密码&#x27;</span>,</span><br><span class="line"><span class="string">`nickname`</span> VARCHAR(<span class="number">50</span>) NULL DEFAULT <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line"><span class="string">`avator`</span> VARCHAR(<span class="number">50</span>) NULL DEFAULT <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;用户头像&#x27;</span>,</span><br><span class="line"><span class="string">`sex`</span> int(<span class="number">3</span>) NULL DEFAULT <span class="number">0</span> COMMENT <span class="string">&#x27;性别：0:未知, 1:男, 2:女&#x27;</span>,</span><br><span class="line"><span class="string">`gmt_create`</span> BIGINT(<span class="number">13</span>) NOT NULL COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line"><span class="string">`gmt_modify`</span> BIGINT(<span class="number">13</span>) NOT NULL COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line"> PRIMARY KEY (<span class="string">`id`</span>) USING BTREE,</span><br><span class="line"> UNIQUE KEY <span class="string">`username_UNIQUE`</span> (<span class="string">`username`</span>)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=<span class="number">1</span> COMMENT=<span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>–创建任务表–</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS <span class="string">`sys_task`</span>;</span><br><span class="line">CREATE TABLE <span class="string">`sys_task`</span> (</span><br><span class="line"><span class="string">`id`</span> bigint(<span class="number">20</span>) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT <span class="string">&#x27;唯一标识&#x27;</span>,</span><br><span class="line"><span class="string">`title`</span> varchar(<span class="number">100</span>) NOT NULL COMMENT <span class="string">&#x27;任务名称&#x27;</span>,</span><br><span class="line"><span class="string">`description`</span> varchar(<span class="number">255</span>) NOT NULL COMMENT <span class="string">&#x27;任务内容&#x27;</span>,</span><br><span class="line"><span class="string">`status`</span> int(<span class="number">3</span>) NULL DEFAULT <span class="number">0</span> COMMENT <span class="string">&#x27;任务状态：0:待办 1:完成 2:删除&#x27;</span>,</span><br><span class="line"><span class="string">`gmt_create`</span> bigint(<span class="number">13</span>) NOT NULL COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line"><span class="string">`gmt_expire`</span> bigint(<span class="number">13</span>) NOT NULL COMMENT <span class="string">&#x27;截止日期&#x27;</span>,</span><br><span class="line">PRIMARY KEY (<span class="string">`id`</span>) USING BTREE</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=<span class="number">1</span> COMMENT=<span class="string">&#x27;任务表&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h3><p>使用 Node.js + Express + MySQL，搭建的后端服务器。</p><h4 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight m"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">│  app.js                             // 入口文件</span><br><span class="line">│  package.json                       // npm包管理所需模块及配置信息</span><br><span class="line">│  bin</span><br><span class="line">│      www                            // start程序运行文件</span><br><span class="line">│  config</span><br><span class="line">│      db.js                          // mysql数据库基础配置</span><br><span class="line">├─db</span><br><span class="line">│      mysql.js                       // 封装连接mysql模块</span><br><span class="line">├─routes</span><br><span class="line">│      index.js                       // 初始化路由信息，引入auth中间件</span><br><span class="line">│      tasks.js                       // 任务路由模块</span><br><span class="line">│      users.js                       // 用户路由模块</span><br><span class="line">├─controllers</span><br><span class="line">│      index.js                  // 业务逻辑处理 - 入口</span><br><span class="line">│      tasks.js                  // 业务逻辑处理 - 任务相关接口</span><br><span class="line">│      users.js                  // 业务逻辑处理 - 用户相关接口</span><br><span class="line">└─utils</span><br><span class="line">        constant.js                   // 自定义常量</span><br><span class="line">        crypto.js                     // 加密标准实现方法</span><br><span class="line">        jwtAuth.js                    // jwt-token验证和解析函数</span><br><span class="line">        resHandler.js                 // 包装统一返回格式</span><br></pre></td></tr></table></figure><h4 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h4><p>后端登录注册功能使用了 jwt-token 认证模式来实现。使用 express、express-validator、jsonwebtoken、express-jwt、mySQL 组件库来简化开发。</p><ul><li>express：提供了创建 Web 服务器的最简单但功能最强大的方法之一。</li><li>express-validator：一个基于 Express 的数据验证中间件，可以方便的判断传入的表单数据是否合法。</li><li>jsonwebtoken：基于 jwt 的概念实现安全的加密方案库，实现加密 token 和解析 token 的功能。</li><li>express-jwt：express-jwt 是在 jsonwebtoken 的基础上做了上层封装，基于 Express 框架下认证 jwt 的中间件，来实现 jwt 的认证功能。</li><li>http-errors：轻松创建 Express，Koa，Connect 等的 HTTP 错误。</li><li>mysql：Node.js 连接 MySQL 数据库。</li><li>nodemon：实现实时热更新，自动重启项目。</li></ul><h4 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h4><ul><li>用户模块：登录、注册</li><li>任务模块：todoList 增删改查</li></ul><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul><li><strong>安装全局依赖</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install express -g or yarn <span class="built_in">global</span> add express</span><br><span class="line">npm install express-generator -g or yarn <span class="built_in">global</span> express-generator</span><br></pre></td></tr></table></figure><ul><li><strong>使用 express-generator 生成 todo_api 项目</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir todo_api</span><br><span class="line">cd todo_api</span><br><span class="line">express</span><br><span class="line">npm install or yarn install</span><br><span class="line">npm start or yarn start</span><br></pre></td></tr></table></figure><p>然后访问 localhost:3000，最简单的服务器就 👌 了</p><ul><li><p><strong>添加自动重启服务</strong></p><p>每次修改 js 文件，我们都需要重启服务器，这样修改的内容才会生效，但是每次重启比较麻烦，影响开发效果。所以我们在开发环境中引入 nodemon 插件，实现实时热更新，自动重启项目。</p></li></ul><p><code>yarn add nodemon -D</code><br>修改 package.json 文件中配置的 start 命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;start&quot;</span>: <span class="string">&quot;nodemon ./bin/www&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><p><strong>安装相关依赖库</strong><br><code>yarn add express-validator jsonwebtoken express-jwt mysql</code><br>** 修改目录结构**</p></li><li><p><strong>项目配置模块（Config）</strong><br>在根目录下 config 文件夹，并新增 db.js 文件，用于 mysql 数据库基础配置</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置</span></span><br><span class="line"><span class="keyword">const</span> MYSQL_CONF = &#123;</span><br><span class="line">  host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  user: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  password: <span class="string">&#x27;xzh123456&#x27;</span>,</span><br><span class="line">  port: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">  database: <span class="string">&#x27;todo&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  MYSQL_CONF</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>数据库模块（DB）</strong><br>在根目录下创建 db 文件夹，并创建 mysql.js 文件，用于封装连接 mysql 模块</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; MYSQL_CONF &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../config/db&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connection = <span class="function">() =&gt;</span> mysql.createConnection(MYSQL_CONF)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> querySql = <span class="function">(<span class="params">sql</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> conn = connection()</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      conn.query(sql, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          reject(err)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          resolve(res)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      reject(e)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="comment">// 释放连接</span></span><br><span class="line">      conn.end()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  querySql</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>工具模块（Utils）</strong><br>在根目录下创建 utils 文件夹</li></ul><p>创建 constant.js 文件，用于自定义常量</p><p>代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  CODE_ERROR: <span class="string">&quot;9999&quot;</span>, <span class="comment">// 请求响应失败code码</span></span><br><span class="line">  CODE_SUCCESS: <span class="string">&quot;0000&quot;</span>, <span class="comment">// 请求响应成功code码</span></span><br><span class="line">  PRIVATE_KEY: <span class="string">&quot;todo&quot;</span>, <span class="comment">// 自定义jwt加密的私钥</span></span><br><span class="line">  JWT_EXPIRED: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>, <span class="comment">// 过期时间24小时</span></span><br><span class="line">&#125;;</span><br><span class="line">创建crypto.js文件，用于加密标准实现方法</span><br></pre></td></tr></table></figure><p>代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>) <span class="comment">// 引入crypto加密模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> md5 = <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> crypto</span><br><span class="line">    .createHash(<span class="string">&#x27;md5&#x27;</span>)</span><br><span class="line">    .update(<span class="string">&#x27;&#x27;</span> + v)</span><br><span class="line">    .digest(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  md5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>) <span class="comment">// 引入crypto加密模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> md5 = <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> crypto</span><br><span class="line">    .createHash(<span class="string">&#x27;md5&#x27;</span>)</span><br><span class="line">    .update(<span class="string">&#x27;&#x27;</span> + v)</span><br><span class="line">    .digest(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  md5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 jwtAuth.js 文件，用于 jwt-token 验证和解析函数<br>代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> expressJwt = <span class="built_in">require</span>(<span class="string">&#x27;express-jwt&#x27;</span>) <span class="comment">// 引入express-jwt模块</span></span><br><span class="line"><span class="keyword">const</span> &#123; PRIVATE_KEY &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./constant&#x27;</span>) <span class="comment">// 引入自定义的jwt密钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证token是否过期</span></span><br><span class="line"><span class="keyword">const</span> jwtAuth = expressJwt(&#123;</span><br><span class="line">  <span class="comment">// 设置密钥</span></span><br><span class="line">  secret: PRIVATE_KEY,</span><br><span class="line">  <span class="comment">// 设置为true表示校验，false表示不校验</span></span><br><span class="line">  credentialsRequired: <span class="literal">true</span>,</span><br><span class="line">  algorithms: [<span class="string">&#x27;HS256&#x27;</span>],</span><br><span class="line">  <span class="comment">// 自定义获取token的函数</span></span><br><span class="line">  getToken: <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.headers[<span class="string">&#x27;access-token&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> (req.headers[<span class="string">&#x27;access-token&#x27;</span>]) &#123;</span><br><span class="line">      <span class="keyword">return</span> req.headers[<span class="string">&#x27;access-token&#x27;</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.query &amp;&amp; req.query.token) &#123;</span><br><span class="line">      <span class="keyword">return</span> req.query.token</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置jwt认证白名单，比如/api/user/login登录接口不需要拦截</span></span><br><span class="line">&#125;).unless(&#123;</span><br><span class="line">  path: [<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;/api/user/login&#x27;</span>, <span class="string">&#x27;/api/user/register&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  jwtAuth</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>路由控制层（Routes）</strong><br>创建 index.js 文件，代码如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./users&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> taskRouter = <span class="built_in">require</span>(<span class="string">&#x27;./tasks&#x27;</span>)</span><br><span class="line"></span><br><span class="line">router.use(<span class="string">&#x27;/api/user&#x27;</span>, userRouter)</span><br><span class="line">router.use(<span class="string">&#x27;/api/task&#x27;</span>, taskRouter)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><p>创建 users.js 文件，代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> &#123; userController &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../controllers&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; checkSchema &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express-validator&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rules = &#123;</span><br><span class="line">  loginValidator: checkSchema(&#123;</span><br><span class="line">    username: &#123;</span><br><span class="line">      isLength: &#123;</span><br><span class="line">        errorMessage: <span class="string">&#x27;username长度至少5位&#x27;</span>,</span><br><span class="line">        options: &#123; <span class="attr">min</span>: <span class="number">5</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    password: &#123;</span><br><span class="line">      isLength: &#123;</span><br><span class="line">        errorMessage: <span class="string">&#x27;password长度至少5位&#x27;</span>,</span><br><span class="line">        options: &#123; <span class="attr">min</span>: <span class="number">5</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录</span></span><br><span class="line">router.post(<span class="string">&#x27;/login&#x27;</span>, rules.loginValidator, userController.login)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line">router.post(<span class="string">&#x27;/register&#x27;</span>, rules.loginValidator, userController.register)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><ul><li><strong>创建 tasks.js 文件，代码如下</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> router = express.Router()</span><br><span class="line"><span class="keyword">const</span> &#123; taskController &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../controllers&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务列表</span></span><br><span class="line">router.post(<span class="string">&#x27;/list&#x27;</span>, taskController.getTaskList)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务添加</span></span><br><span class="line">router.post(<span class="string">&#x27;/add&#x27;</span>, taskController.addTask)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务编辑</span></span><br><span class="line">router.post(<span class="string">&#x27;/update&#x27;</span>, taskController.updateTask)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 任务删除</span></span><br><span class="line">router.get(<span class="string">&#x27;/delete&#x27;</span>, taskController.deleteTask)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure><ul><li><p><strong>业务逻辑层（Controllers）</strong><br>在写业务逻辑层之前，我们先来看一下，sql 语句的一些返回值 数据库操作( CURD)</p><p>在根目录下创建 controlles 文件夹</p><p>创建 index.js 文件，代码如下</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userController = <span class="built_in">require</span>(<span class="string">&#x27;./users&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> taskController = <span class="built_in">require</span>(<span class="string">&#x27;./tasks&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  userController,</span><br><span class="line">  taskController</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 users.js 文件，代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; validationResult &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express-validator&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; querySql &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../db/mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; md5 &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../utils/crypto&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; PRIVATE_KEY, JWT_EXPIRED &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../utils/constant&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; getErrorRes, getSuccessRes &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../utils/resHandler&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">login</span>(<span class="params">req, res, next</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> err = validationResult(req)</span><br><span class="line">    <span class="keyword">if</span> (!err.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">const</span> [&#123; msg &#125;] = err.errors</span><br><span class="line">      res.json(getErrorRes(&#123; <span class="attr">message</span>: msg &#125;))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; username, password &#125; = req.body</span><br><span class="line">      password = md5(password)</span><br><span class="line">      <span class="keyword">const</span> sql = <span class="string">`select * from sys_user where username=&#x27;<span class="subst">$&#123;username&#125;</span>&#x27; and password=&#x27;<span class="subst">$&#123;password&#125;</span>&#x27;`</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> findRes = <span class="keyword">await</span> querySql(sql)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;--查询登录账号数据--&#x27;</span>, findRes)</span><br><span class="line">        <span class="keyword">if</span> (findRes.length === <span class="number">0</span>) &#123;</span><br><span class="line">          res.json(getErrorRes(&#123; <span class="attr">message</span>: <span class="string">&#x27;用户名或密码错误&#x27;</span> &#125;))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 登录成功，签发一个token并返回给前端</span></span><br><span class="line">          <span class="keyword">const</span> token = jwt.sign(</span><br><span class="line">            <span class="comment">// payload：签发的 token 里面要包含的一些数据。</span></span><br><span class="line">            &#123; username &#125;,</span><br><span class="line">            <span class="comment">// 私钥</span></span><br><span class="line">            PRIVATE_KEY,</span><br><span class="line">            &#123; <span class="attr">algorithm</span>: <span class="string">&#x27;HS256&#x27;</span>, <span class="attr">expiresIn</span>: JWT_EXPIRED &#125;</span><br><span class="line">          )</span><br><span class="line">          <span class="keyword">let</span> userData = &#123;</span><br><span class="line">            id: findRes[<span class="number">0</span>].id,</span><br><span class="line">            username: findRes[<span class="number">0</span>].username,</span><br><span class="line">            nickname: findRes[<span class="number">0</span>].nickname</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">const</span> result = getSuccessRes(&#123;</span><br><span class="line">            message: <span class="string">&#x27;登录成功&#x27;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">              token,</span><br><span class="line">              userData</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          res.json(result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(&#123; <span class="attr">message</span>: error &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">register</span>(<span class="params">req, res, next</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> err = validationResult(req)</span><br><span class="line">    <span class="keyword">if</span> (!err.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">const</span> [&#123; msg &#125;] = err.errors</span><br><span class="line">      res.json(getErrorRes(&#123; <span class="attr">message</span>: msg &#125;))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; username, password &#125; = req.body</span><br><span class="line">      <span class="keyword">const</span> sql = <span class="string">`select id, username from sys_user where username=&#x27;<span class="subst">$&#123;username&#125;</span>&#x27;`</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> findRes = <span class="keyword">await</span> querySql(sql)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;--查询用户是否已存在--&#x27;</span>, findRes)</span><br><span class="line">        <span class="keyword">if</span> (findRes &amp;&amp; findRes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          res.json(getErrorRes(&#123; <span class="attr">message</span>: <span class="string">&#x27;用户已存在&#x27;</span> &#125;))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          password = md5(password)</span><br><span class="line">          <span class="keyword">const</span> sql = <span class="string">`insert into sys_user(username, password, gmt_create, gmt_modify) values(&#x27;<span class="subst">$&#123;username&#125;</span>&#x27;, &#x27;<span class="subst">$&#123;password&#125;</span>&#x27;, &#x27;<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span>&#x27;, &#x27;<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span>&#x27;)`</span></span><br><span class="line">          <span class="keyword">const</span> insertRes = <span class="keyword">await</span> querySql(sql)</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;--注册用户--&#x27;</span>, insertRes)</span><br><span class="line">          res.json(getSuccessRes(&#123; <span class="attr">message</span>: <span class="string">&#x27;注册成功&#x27;</span> &#125;))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(&#123; <span class="attr">message</span>: error &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> UserController()</span><br></pre></td></tr></table></figure><p>创建 tasks.js 文件，代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; querySql &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../db/mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; validationResult &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express-validator&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; getErrorRes, getSuccessRes &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../utils/resHandler&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaskController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">getTaskList</span>(<span class="params">req, res, next</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> err = validationResult(req)</span><br><span class="line">    <span class="keyword">if</span> (!err.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">const</span> [&#123; msg &#125;] = err.errors</span><br><span class="line">      res.json(getErrorRes(&#123; <span class="attr">message</span>: msg &#125;))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; pageNum, pageSize = <span class="number">10</span> &#125; = req.body</span><br><span class="line">      <span class="keyword">let</span> query = <span class="string">`select d.id, d.title, d.description, d.status, d.gmt_create, d.gmt_expire from sys_task d where status != &#x27;2&#x27;`</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> findRes = <span class="keyword">await</span> querySql(query)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;--查询任务列表--&#x27;</span>, findRes)</span><br><span class="line">        <span class="keyword">let</span> isLimit = findRes.length &gt; pageSize</span><br><span class="line">        <span class="keyword">let</span> limitRes = []</span><br><span class="line">        <span class="keyword">if</span> (isLimit) &#123;</span><br><span class="line">          <span class="keyword">let</span> n = (pageNum - <span class="number">1</span>) * pageSize</span><br><span class="line">          limitRes = <span class="keyword">await</span> querySql(query + <span class="string">` limit <span class="subst">$&#123;n&#125;</span> , <span class="subst">$&#123;pageSize&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        res.json(</span><br><span class="line">          getSuccessRes(&#123;</span><br><span class="line">            message: <span class="string">&#x27;查询数据成功&#x27;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">              total: findRes.length,</span><br><span class="line">              list: isLimit ? limitRes : findRes,</span><br><span class="line">              pageNum,</span><br><span class="line">              pageSize</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(&#123; <span class="attr">message</span>: error &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">addTask</span>(<span class="params">req, res, next</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> err = validationResult(req)</span><br><span class="line">    <span class="keyword">if</span> (!err.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">const</span> [&#123; msg &#125;] = err.errors</span><br><span class="line">      res.json(getErrorRes(&#123; <span class="attr">message</span>: msg &#125;))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; title, description, gmt_expire &#125; = req.body</span><br><span class="line">      <span class="keyword">const</span> sql = <span class="string">`select id, title from sys_task where title=&#x27;<span class="subst">$&#123;title&#125;</span>&#x27; and status != 2`</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> findRes = <span class="keyword">await</span> querySql(sql)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;--addTask先查找同名任务--&#x27;</span>, findRes)</span><br><span class="line">        <span class="keyword">if</span> (findRes &amp;&amp; findRes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          res.json(getErrorRes(&#123; <span class="attr">message</span>: <span class="string">&#x27;任务已存在&#x27;</span> &#125;))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> sql = <span class="string">`insert into sys_task(title, description, gmt_create, gmt_expire) values(&#x27;<span class="subst">$&#123;title&#125;</span>&#x27;, &#x27;<span class="subst">$&#123;description&#125;</span>&#x27;, &#x27;<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span>&#x27;, <span class="subst">$&#123;gmt_expire&#125;</span>)`</span></span><br><span class="line">          <span class="keyword">let</span> insertRes = <span class="keyword">await</span> querySql(sql)</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;--添加task数据--&#x27;</span>, insertRes)</span><br><span class="line">          res.json(getSuccessRes(&#123; <span class="attr">message</span>: <span class="string">&#x27;添加数据成功&#x27;</span> &#125;))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(&#123; <span class="attr">message</span>: error &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">updateTask</span>(<span class="params">req, res, next</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> err = validationResult(req)</span><br><span class="line">    <span class="comment">// 如果验证错误，empty不为空</span></span><br><span class="line">    <span class="keyword">if</span> (!err.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">const</span> [&#123; msg &#125;] = err.errors</span><br><span class="line">      res.json(getErrorRes(&#123; <span class="attr">message</span>: msg &#125;))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; id, title, description, status, gmt_expire &#125; = req.body</span><br><span class="line">      <span class="keyword">const</span> sql = <span class="string">`select id, title from sys_task where id != <span class="subst">$&#123;id&#125;</span> and title=&#x27;<span class="subst">$&#123;title&#125;</span>&#x27; and status != 2 `</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> findRes = <span class="keyword">await</span> querySql(sql)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;--查询不等于当前id的任务是否存在--&#x27;</span>, findRes)</span><br><span class="line">        <span class="keyword">if</span> (findRes &amp;&amp; findRes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          res.json(getErrorRes(&#123; <span class="attr">message</span>: <span class="string">&#x27;任务已存在&#x27;</span> &#125;))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> sql = <span class="string">`update sys_task set title=&#x27;<span class="subst">$&#123;title&#125;</span>&#x27;, description=&#x27;<span class="subst">$&#123;description&#125;</span>&#x27;,status=&#x27;<span class="subst">$&#123;status&#125;</span>&#x27;, gmt_expire=&#x27;<span class="subst">$&#123;gmt_expire&#125;</span>&#x27; where id=&#x27;<span class="subst">$&#123;id&#125;</span>&#x27;`</span></span><br><span class="line">          <span class="keyword">let</span> updateRes = <span class="keyword">await</span> querySql(sql)</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">`--更新当前<span class="subst">$&#123;id&#125;</span>的任务数据--`</span>, updateRes)</span><br><span class="line">          <span class="keyword">if</span> (updateRes &amp;&amp; updateRes.affectedRows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            res.json(getSuccessRes(&#123; <span class="attr">message</span>: <span class="string">&#x27;更新数据成功&#x27;</span> &#125;))</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(getErrorRes(&#123; <span class="attr">message</span>: <span class="string">&#x27;更新数据失败&#x27;</span> &#125;))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(&#123; <span class="attr">message</span>: error &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">deleteTask</span>(<span class="params">req, res, next</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> err = validationResult(req)</span><br><span class="line">    <span class="keyword">if</span> (!err.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">const</span> [&#123; msg &#125;] = err.errors</span><br><span class="line">      res.json(getErrorRes(&#123; <span class="attr">message</span>: msg &#125;))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; id, status &#125; = req.query</span><br><span class="line">      <span class="keyword">const</span> sql = <span class="string">`update sys_task set status=&#x27;<span class="subst">$&#123;status&#125;</span>&#x27; where id=&#x27;<span class="subst">$&#123;id&#125;</span>&#x27;`</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> deleteRes = <span class="keyword">await</span> querySql(sql)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`--删除<span class="subst">$&#123;id&#125;</span>的任务数据--`</span>, deleteRes)</span><br><span class="line">        <span class="keyword">if</span> (deleteRes &amp;&amp; deleteRes.affectedRows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          res.json(getSuccessRes(&#123; <span class="attr">message</span>: <span class="string">&#x27;删除数据成功&#x27;</span> &#125;))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res.json(getErrorRes(&#123; <span class="attr">message</span>: <span class="string">&#x27;删除数据失败&#x27;</span> &#125;))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> next(&#123; <span class="attr">message</span>: error &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> TaskController()</span><br></pre></td></tr></table></figure><ul><li><strong>入口文件配置</strong><br>在根目录 app.js 程序入口文件中，导入 Express 模块，再引入常用的中间件和自定义 routes 路由的中间件，代码如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createError = <span class="built_in">require</span>(<span class="string">&#x27;http-errors&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;morgan&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; getErrorRes &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./utils/resHandler&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = <span class="built_in">require</span>(<span class="string">&#x27;./routes/index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(logger(<span class="string">&#x27;dev&#x27;</span>))</span><br><span class="line">app.use(express.json())</span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(cookieParser())</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>, routes)</span><br><span class="line"></span><br><span class="line"><span class="comment">// catch 404 and forward to error handler</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  next(createError(<span class="number">404</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// error handler</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// set locals, only providing error in development</span></span><br><span class="line">  res.locals.message = err.message</span><br><span class="line">  res.locals.error = req.app.get(<span class="string">&#x27;env&#x27;</span>) === <span class="string">&#x27;development&#x27;</span> ? err : &#123;&#125;</span><br><span class="line">  res.status(err.status || <span class="number">500</span>)</span><br><span class="line">  <span class="keyword">if</span> (err.status == <span class="number">401</span>) &#123;</span><br><span class="line">    res.json(getErrorRes(&#123; <span class="attr">message</span>: <span class="string">&#x27;用户未登录&#x27;</span> &#125;))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.json(getErrorRes(&#123; <span class="attr">message</span>: err.message || <span class="string">&#x27;服务器出错&#x27;</span> &#125;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = app</span><br></pre></td></tr></table></figure><p>到此基于 Vue + antdv + Express + Node.js + MySQL 实现的前后端功能已基本完成，此章节暂告一段落。</p><h2 id="什么是-BFF"><a href="#什么是-BFF" class="headerlink" title="什么是 BFF"></a>什么是 BFF</h2><p>BFF，即 Backends For Frontends（服务于前端的后端）。在 2015 年，Sam Newman 对此提出了，Pattern: Backends For Frontends ，国内也俗称为粘合层。</p><p>在 BFF 理念中，最重要的一点是： 服务自治，谁使用谁开发，即它应该由前端同学去维护。</p><ul><li>服务自治减少了沟通成本，带来了灵活和高效。</li><li>BFF 并不限制具体技术，团队根据自己的技术栈来选型： Java/Node/PHP/Python/Ruby…<br>PS：Serverless For Frontend</li></ul><h3 id="为什么选择-Node-作为中间层"><a href="#为什么选择-Node-作为中间层" class="headerlink" title="为什么选择 Node 作为中间层"></a>为什么选择 Node 作为中间层</h3><p><img src="/images/common/bff.png" alt="network"></p><h4 id="业务驱动"><a href="#业务驱动" class="headerlink" title="业务驱动"></a>业务驱动</h4><p>Node 有个突出的优势，他的开发者可以是前端，都会倾向于选择生态更优，语法更熟悉的 Node.js。</p><p>前端对于页面所需要的数据有更好的理解，每个页面要用到哪些接口，每个接口要用到哪些字段前端是最清楚的。再加上实际业务开发中，前端页面需求经常会发生变化，需要修改字段或者数据结构，所以对接页面的这部分接口由前端直接开发非常合适，可以显著的减少沟通成本。</p><h4 id="架构需要"><a href="#架构需要" class="headerlink" title="架构需要"></a>架构需要</h4><p>面向用户的接口由 Node 中间层负责以后，真正的服务端可以专注于提供基于领域模型的对内接口，做微服务。</p><p>比如可以基于 Goods 模型，提供所有商品相关的接口；基于 Users 模型，提供所有用户相关接口。当一个接口需要商品+用户信息时，由 Node 分别查询组装。从整体业务代码维护角度来说，变得更容易，不会因为业务发展使得每个接口都异常繁杂。</p><h4 id="性能满足"><a href="#性能满足" class="headerlink" title="性能满足"></a>性能满足</h4><p>如果仅仅是架构层面的需求，需要有一个中间层来沉淀业务，那用 Java，PHP 也可以做到，为什么说 Node 更适合做呢？</p><p>因为 Node 天生异步！</p><p>众所周知，js 是一门单线程语言，所以 Node 在实现的时候，需要借助 libuv 来实现异步。libuv 为 Node 提供了线程池，事件池，异步 I/O 等能力。正是因为其中网络 I/O 的异步能力，可以让 Node 做接口聚合时，能够更高效的异步并发处理。</p><h4 id="成本较低"><a href="#成本较低" class="headerlink" title="成本较低"></a>成本较低</h4><p>Node 使用 js 开发，只需要学习简单的 api，前端开发者就可以无障碍使用，学习成本很低。</p><p>而且，Node 具有活跃的社区和丰富的模块池，拥有很多现成的功能实现。框架方面，也有成熟的 koa，express 等基本框架和 egg 等二次封装框架，可根据需求选择上手也比较方便。</p><p><strong>中间层能为我们做些什么？</strong><br><img src="/images/common/bff-1.jpeg" alt="network"></p><ul><li>代理：在开发环境下，我们可以利用代理来，解决最常见的跨域问题；在线上环境下，我们可以利用代理，转发请求到多个服务端。</li><li>缓存：缓存其实是更靠近前端的需求，用户的动作触发数据的更新，node 中间层可以直接处理一部分缓存需求。</li><li>限流：node 中间层，可以针对接口或者路由做响应的限流。</li><li>日志：相比其他服务端语言，node 中间层的日志记录，能更方便快捷的定位问题（是在浏览器端还是服务端）。</li><li>监控：擅长高并发的请求处理，做监控也是合适的选项。</li><li>鉴权：有一个中间层去鉴权，也是一种单一职责的实现。</li><li>路由：前端更需要掌握页面路由的权限和逻辑。</li><li><strong>服务端渲染：</strong>node 中间层的解决方案更灵活，比如 SSR、模板直出、利用一些 JS 库做预渲染等等。<br>更多的可能性</li></ul><p><strong>中间层业务接口实践思路</strong><br>非标准，只是一种参考<br><img src="/images/common/bff-2.jpeg" alt="network"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Node.js 对前端来说无疑具有里程碑意义，尤其是在越来越流行的今天，掌握 Node.js 技术已经不仅仅是加分项，而是前端攻城师们需要去掌握的一项技能。&lt;/p&gt;</summary>
    
    
    
    <category term="Node" scheme="https://colorfulworld.github.io/categories/Node/"/>
    
    
  </entry>
  
  <entry>
    <title>堆与栈</title>
    <link href="https://colorfulworld.github.io/%E5%A0%86%E4%B8%8E%E6%A0%88/"/>
    <id>https://colorfulworld.github.io/%E5%A0%86%E4%B8%8E%E6%A0%88/</id>
    <published>2021-04-19T13:13:55.000Z</published>
    <updated>2021-04-24T15:38:33.650Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构型的堆与栈和内存使用中的堆与栈的不同，迷糊。由各个地方摘录。</p><span id="more"></span><h2 id="内存使用中的堆与栈"><a href="#内存使用中的堆与栈" class="headerlink" title="内存使用中的堆与栈"></a>内存使用中的堆与栈</h2><ul><li>栈区（stack）——由编译器自动分配释放，存储函数的参数值，局部变量的值等，其操作方式类似数据中的栈，先进先出。</li><li>堆区（heap）——一般由程序员分配释放，若程序员不分配也就没有堆，不释放，程序结束时可能由 OS 回收</li></ul><h3 id="区别和联系"><a href="#区别和联系" class="headerlink" title="区别和联系"></a>区别和联系</h3><h4 id="申请方式"><a href="#申请方式" class="headerlink" title="申请方式"></a>申请方式</h4><ul><li>堆：由程序员自己申请并指明大小的，在 C 中 malloc 函数，如<code>p1=(char*)malloc(10)</code></li><li>栈：系统自动分配的，如声明在函数中一个局部变量 int b；系统自动在栈中为 b 开辟空间</li></ul><h4 id="申请后系统的响应动作"><a href="#申请后系统的响应动作" class="headerlink" title="申请后系统的响应动作"></a>申请后系统的响应动作</h4><ul><li>堆：首先应该知道操作系统有一个记录空闲内存地址的链表，当系统收到程序的申请时，会遍历该链表，寻找第一个空间大于所申请空间的堆结点，然后将该结点从空闲节点链表中删除，并将该结点的空间分配给程序</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;数据结构型的堆与栈和内存使用中的堆与栈的不同，迷糊。由各个地方摘录。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://colorfulworld.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Javascript链表数据结构</title>
    <link href="https://colorfulworld.github.io/Javascript%E9%93%BE%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://colorfulworld.github.io/Javascript%E9%93%BE%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2021-04-07T07:23:51.000Z</published>
    <updated>2021-04-07T12:41:07.206Z</updated>
    
    <content type="html"><![CDATA[<p>数组和列表可能是最常用的数据结构，但是要实现从起点插入或者是从中间插入或移出项的成本很高，因为需要移动元素。链表的好处在于添加或者移除元素时不需要移动其他的元素。然而想要访问链表中间的一个元素，则需要从起点开始迭代链表知道找到所需要的元素。</p><span id="more"></span><p>链表存储有序的元素集合，不同于数组，链表中的元素在内存中不是连续放置的。每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（也称指针活链接）组成。</p><p><img src="/images/common/linked-list.jpg" alt="network"></p><h2 id="实现单向数据链表"><a href="#实现单向数据链表" class="headerlink" title="实现单向数据链表"></a>实现单向数据链表</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.element = element</span><br><span class="line">    <span class="built_in">this</span>.next = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span></span><br><span class="line">    <span class="built_in">this</span>.head = <span class="literal">null</span></span><br><span class="line">    <span class="built_in">this</span>.equalsFn = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a === b <span class="comment">//用于实现indexOf的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">push</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//向链表尾部添加一个新元素</span></span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> Node(element)</span><br><span class="line">    <span class="keyword">let</span> current</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.head = node</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      current = <span class="built_in">this</span>.head</span><br><span class="line">      <span class="keyword">while</span> (current.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        current = current.next</span><br><span class="line">      &#125;</span><br><span class="line">      current.next = node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.count++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">insert</span>(<span class="params">element, position</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//向链表的特定位置插入一个新元素</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">      <span class="keyword">const</span> node = <span class="keyword">new</span> Node(element)</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> current = <span class="built_in">this</span>.head</span><br><span class="line">        node.next = current</span><br><span class="line">        <span class="built_in">this</span>.head = node</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> previous = <span class="built_in">this</span>.getElementAt(index - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">const</span> current = previous.next</span><br><span class="line">        node.next = current</span><br><span class="line">        previous.next = node</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.count++</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getElementAt</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//返回链表中特定位置的元素，若是不存在则返回undefined</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">      <span class="keyword">let</span> node = <span class="built_in">this</span>.head</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index &amp;&amp; node != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">        node = node.next</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">remove</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//从链表中移出一个元素 可以使用getElementAt来重构remove方法</span></span><br><span class="line">    <span class="keyword">const</span> index = <span class="built_in">this</span>.indexOf(element)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.removeAt(index)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">indexOf</span>(<span class="params">element</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//返回元素在链表中的索引，如果链表中没有改元素则返回-1</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.count &amp;&amp; current != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.equalsFn(element, current.element)) &#123;</span><br><span class="line">        <span class="keyword">return</span> i</span><br><span class="line">      &#125;</span><br><span class="line">      current = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">removeAt</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//从链表的特定位置移出一个元素</span></span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="built_in">this</span>.count) &#123;</span><br><span class="line">      <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = current.next</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//将previous与current 的下一项链接起来，跳过current，从而移除它</span></span><br><span class="line">        <span class="keyword">const</span> previous = <span class="built_in">this</span>.getElementAt(index - <span class="number">1</span>)</span><br><span class="line">        current = previous.next</span><br><span class="line">        previous.next = current.next</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.count--</span><br><span class="line">      <span class="keyword">return</span> current.element</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.size() === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">size</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getHead</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.head</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//返回表示整个链表的字符串</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.head == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> objString = <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.head.element&#125;</span>`</span></span><br><span class="line">    <span class="keyword">let</span> current = <span class="built_in">this</span>.head.next</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="built_in">this</span>.size() &amp;&amp; current != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">      objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;current.element&#125;</span>`</span></span><br><span class="line">      current = current.next</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> objString</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;数组和列表可能是最常用的数据结构，但是要实现从起点插入或者是从中间插入或移出项的成本很高，因为需要移动元素。链表的好处在于添加或者移除元素时不需要移动其他的元素。然而想要访问链表中间的一个元素，则需要从起点开始迭代链表知道找到所需要的元素。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://colorfulworld.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>了解Fetch api</title>
    <link href="https://colorfulworld.github.io/%E4%BA%86%E8%A7%A3Fetch-api/"/>
    <id>https://colorfulworld.github.io/%E4%BA%86%E8%A7%A3Fetch-api/</id>
    <published>2020-09-26T16:00:00.000Z</published>
    <updated>2021-04-24T15:38:16.550Z</updated>
    
    <content type="html"><![CDATA[<p>提及与服务器的异步通信，离不开 Ajax，实际上 Ajax 并非指某一项具体的技术，它主要是基于用脚本操作 HTTP 请求的 Web 应用架构。</p><p>在 Ajax 中涉及到的 JavaScript 方面的技术，即 XMLHttpRequest(以下简称 XHR)，至今我们基本都是通过 XHR 与服务器简历异步通信，在设计上将输入、输出和事件监听混杂在一个对象里，且必须通过实例化方式来发请求。配置和调用方式混乱，不符合关注分点离原则。</p><p>直到 Fetch API 的提出，前端和服务器端的异步通信方面更进了一步。</p><span id="more"></span><h2 id="什么是-Fetch"><a href="#什么是-Fetch" class="headerlink" title="什么是 Fetch"></a>什么是 Fetch</h2><p>Fetch API 是近年来被提及将要取代 XHR 的技术新标准，是一个 HTML5 的 API。</p><p>Fetch 并不是 XHR 的升级版本，而是从一个全新的角度来思考的一种设计。Fetch 是基于 Promise 语法结构，而且它的设计足够低阶，这表示它可以在实际需求中进行更多的弹性设计。对于 XHR 所提供的能力来说，Fetch 已经足够取代 XHR ，并且提供了更多拓展的可能性。</p><p>Fetch 的核心在于对 HTTP 接口的抽象，包括 Request，Response，Headers，Body，以及用于初始化异步请求的 global fetch。</p><h2 id="如何使用-Fetch"><a href="#如何使用-Fetch" class="headerlink" title="如何使用 Fetch"></a>如何使用 Fetch</h2><p>Fetch API 规范明确了用户代理获取资源的语义。原生支持 Promise1，调用方便，符合语义化。可配合使用 ES2016 中的 async / await 语法，更加优雅。</p><p>通过一个例子来快速了解和使用 Fetch API 最基本的用法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 some.json 资源</span></span><br><span class="line">fetch(<span class="string">&#x27;some.json&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;data&#x27;</span>, data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Fetch Error: &#x27;</span>, error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用ES2016的 async/await 语法</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(<span class="string">&#x27;some.json&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> response.json();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;data&#x27;</span>, data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Fetch Error: &#x27;</span>, error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以简单理解为，Fetch API 是面向未来的异步通信 API。通过例子我们可以发现，使用 Fetch API 能够快速便捷地进行资源地获取。</p><h2 id="具体用法"><a href="#具体用法" class="headerlink" title="具体用法"></a>具体用法</h2><p>fetch 方法有两种调用方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span> fetch(<span class="built_in">String</span> url, [, <span class="built_in">Object</span> options])</span><br><span class="line"><span class="built_in">Promise</span> fetch(Request req, [, <span class="built_in">Object</span> options])</span><br></pre></td></tr></table></figure><ul><li>第一个参数是一个 Request 对象，第二个参数是配置信息，可选</li><li>第一个参数是一个 url，第二个参数是配置信息，可选<br>可选配置信息是一个 Object 对象，可以包含以下字段：</li><li>method: 请求的方法，例如：GET,POST。</li><li>headers: 请求头部信息，可以是一个简单的对象，也可以是 Headers 类实例化的一个对象。</li><li>body: 需要发送的信息内容，可以是 Blob,BufferSource,FormData,URLSearchParams 或者 USVString。注意，GET,HEAD 方法不能包含 body。</li><li>mode: 请求模式，分别有 cors,no-cors,same-origin,navigate 这几个可选值。<ul><li>cors: 允许跨域，要求响应中 Acess-Control-Allow-Origin 这样的头部表示允许跨域。</li><li>no-cors: 只允许使用 HEAD,GET,POST 方法。</li><li>same-origin: 只允许同源请求，否则直接报错。</li><li>navigate: 支持页面导航。</li></ul></li><li>credentials: 表示是否发送 cookie，有三个选项<ul><li>omit: 不发送 cookie。</li><li>same-origin: 仅在同源时发送 cookie。</li><li>include: 发送 cookie。</li></ul></li><li>cache: 表示处理缓存的策略。</li><li>redirect: 表示发生重定向时，有三个选项<ul><li>follow: 跟随。</li><li>error: 发生错误。</li><li>manual: 需要用户手动跟随。</li></ul></li><li>integrity: 包含一个用于验证资资源完整性的字符串。</li></ul><h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><p>Headers 可用来表示 HTTP 的头部信息，使用 Headers 的接口，你可以通过 Headers() 构造函数来创建一个你自己的 headers 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> headers = <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">  <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Content-Length&#x27;</span>: content.length.toString(),</span><br><span class="line">  <span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;ProcessThisImmediately&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">headers.append(<span class="string">&#x27;X-Custom-Header&#x27;</span>, <span class="string">&#x27;AnotherValue&#x27;</span>)</span><br><span class="line">headers.has(<span class="string">&#x27;Content-Type&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">headers.getAll(<span class="string">&#x27;X-Custom-Header&#x27;</span>) <span class="comment">// [&quot;ProcessThisImmediately&quot;, &quot;AnotherValue&quot;]</span></span><br></pre></td></tr></table></figure><p>Headers 提供 append, delete, get, getAll, has, set, forEach 等这些实例方法，可供开发者更加灵活地配置请求中的 headers。</p><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> URL = <span class="string">&#x27;//api.some.com&#x27;</span></span><br><span class="line"><span class="keyword">var</span> getReq = <span class="keyword">new</span> Request(URL, &#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">cache</span>: <span class="string">&#x27;reload&#x27;</span> &#125;)</span><br><span class="line">fetch(getReq)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Fetch Error: &#x27;</span>, error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>Request 接口中的配置项 headers 可以是实例化的 Headers 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> URL = <span class="string">&#x27;//api.some.com&#x27;</span></span><br><span class="line"><span class="comment">// 实例化 Headers</span></span><br><span class="line"><span class="keyword">var</span> headers = <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">  <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;Content-Length&#x27;</span>: content.length.toString(),</span><br><span class="line">  <span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;ProcessThisImmediately&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> getReq = <span class="keyword">new</span> Request(URL, &#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">headers</span>: headers &#125;)</span><br><span class="line">fetch(getReq)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Fetch Error: &#x27;</span>, error)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>更便捷的是，Request 对象可以从已有的 Request 对象中继承，并拓展新的配置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> URL = <span class="string">&#x27;//api.some.com&#x27;</span></span><br><span class="line"><span class="keyword">var</span> getReq = <span class="keyword">new</span> Request(URL, &#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">headers</span>: headers &#125;)</span><br><span class="line"><span class="comment">// 基于已存在的 Request 实例，拓展创建新的 Request 实例</span></span><br><span class="line"><span class="keyword">var</span> postReq = <span class="keyword">new</span> Request(getReq, &#123; <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><p>Response 实例是在 fentch()处理完 promises 之后返回的。它的实例也可用通过 JavaScript 来创建，但只有在 ServiceWorkers 中才真正有用。<br><code>var res = new Response(body, init);</code><br>其中 body 可以是 Bolb, BufferSource, FormData, URLSearchParams, USVString 这些类型的值。</p><p><strong>init 是一个对象，可以包括以下这些字段</strong></p><ul><li>status: 响应状态码</li><li>statusText: 状态信息</li><li>headers: 头部信息，可以是对象或者 Headers 实例</li></ul><p><strong>Response 实例提供了以下实例属性，均是只读属性。</strong></p><ul><li>bodyUsed: 用于表示响应内容是否被使用过</li><li>headers: 头部信息</li><li>ok: 表明请求是否成功，响应状态为 200 ~ 299 时，值为 true</li><li>status: 状态码</li><li>statusText: 状态信息</li><li>type: 响应类型<ul><li>basic: 同源</li><li>cors: 跨域</li><li>error: 出错</li><li>opaque: Request mode 设置为 “no-cors”的响应</li></ul></li><li>url: 响应地址</li></ul><p><strong>Response 实例提供以下实例方法</strong></p><ul><li>clone: 复制一个响应对象。</li><li>arrayBuffer: 将响应数据转换为 arrayBuffer 后 reslove 。</li><li>bolb: 把响应数据转换为 Bolb 后 reslove 。</li><li>formData: 把响应数据转换为 formData 后 reslove 。</li><li>json: 把响应内容解析为对象后 reslove 。</li><li>text: 把响应数据当做字符串后 reslove 。</li></ul><h2 id="常用的-fetch-请求"><a href="#常用的-fetch-请求" class="headerlink" title="常用的 fetch 请求"></a>常用的 fetch 请求</h2><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;/index/fetchHtml&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.text()</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.innerHTML += result</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;/api/user/CaiCai&#x27;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.json()</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">json</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(json)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="POST-Form"><a href="#POST-Form" class="headerlink" title="POST Form"></a>POST Form</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postForm</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> form = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;form&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> name = <span class="built_in">encodeURI</span>(<span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;name&#x27;</span>)[<span class="number">0</span>].value)</span><br><span class="line">  fetch(<span class="string">`/api/user/<span class="subst">$&#123;name&#125;</span>`</span>, &#123;</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    body: <span class="keyword">new</span> FormData(form)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POST-JSON"><a href="#POST-JSON" class="headerlink" title="POST JSON"></a>POST JSON</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">&#x27;/api/user/CaiCai&#x27;</span>, &#123;</span><br><span class="line">  method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    name: <span class="string">&#x27;CaiCai&#x27;</span>,</span><br><span class="line">    age: <span class="string">&#x27;26&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="fetch-注意事项"><a href="#fetch-注意事项" class="headerlink" title="fetch 注意事项"></a>fetch 注意事项</h2><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>fetch 只有在网络错误的情况，返回的 promise 会被 reject。成功的 fetch() 检查不仅要包括 promise 被 resolve，还要包括 Response.ok 属性为 true。HTTP 404 状态并不被认为是网络错误，所以 Promise 的状态为 resolve。</p><h3 id="credentials-设置"><a href="#credentials-设置" class="headerlink" title="credentials 设置"></a>credentials 设置</h3><p>fetch 可以通过 credentials 自己控制发送请求时是否带上 cookie。credentials 可设置为 include、same-origin、omit。include 为了让浏览器发送包含凭据的请求（即使是跨域源）。如果你只想在请求 URL 与调用脚本位于同一起源处时发送凭据，请添加 credentials: ‘same-origin’。要改为确保浏览器不在请求中包含凭据，请使用 credentials: ‘omit’。</p><h3 id="中止"><a href="#中止" class="headerlink" title="中止"></a>中止</h3><p>fetch 自身并没有提供 中止请求的方法。但是部分浏览器有实现 AbortController，可以通过 AbortController 中止 fetch 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> AbortController()</span><br><span class="line"><span class="keyword">const</span> signal = controller.signal</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> controller.abort(), <span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">&#x27;/api/user/CaiCai&#x27;</span>, &#123;</span><br><span class="line">  signal, <span class="comment">// 在option中加入signal</span></span><br><span class="line">  method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="comment">// credentials:&#x27;include&#x27;,</span></span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">    name: <span class="string">&#x27;CaiCai&#x27;</span>,</span><br><span class="line">    age: <span class="string">&#x27;26&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.json()</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="Fetch-的缺点"><a href="#Fetch-的缺点" class="headerlink" title="Fetch 的缺点"></a>Fetch 的缺点</h2><ol><li><p>fetch 不支持 jsonp，如果项目中使用到 JSONP，需要单独实现一个 JSONP。</p></li><li><p>fetch 自身并没有提供 abort 的方法，需要 AbortController 去处理中止，实现起来会繁琐一点。并且 AbortController 兼容性不是很好，不过我们可以使用“abortcontroller-polyfill”。</p></li><li><p>在我们平常使用中，fetch 相对 XHR 差别不大，实际业务上，api 请求都是用再次封装好的函数来处理的。底层是 Fetch 还是 XHR 影响不大。所以如果没有特别的需求，从 XHR 升级到 fetch 的意义不大。但是在 ServiceWorker 中 fetch 会大放异彩。目前淘宝首页就使用 fetch+ServiceWorker 来实现离线缓存。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;提及与服务器的异步通信，离不开 Ajax，实际上 Ajax 并非指某一项具体的技术，它主要是基于用脚本操作 HTTP 请求的 Web 应用架构。&lt;/p&gt;
&lt;p&gt;在 Ajax 中涉及到的 JavaScript 方面的技术，即 XMLHttpRequest(以下简称 XHR)，至今我们基本都是通过 XHR 与服务器简历异步通信，在设计上将输入、输出和事件监听混杂在一个对象里，且必须通过实例化方式来发请求。配置和调用方式混乱，不符合关注分点离原则。&lt;/p&gt;
&lt;p&gt;直到 Fetch API 的提出，前端和服务器端的异步通信方面更进了一步。&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="https://colorfulworld.github.io/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue懒加载与分组打包</title>
    <link href="https://colorfulworld.github.io/vue%E6%87%92%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%88%86%E7%BB%84%E6%89%93%E5%8C%85/"/>
    <id>https://colorfulworld.github.io/vue%E6%87%92%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%88%86%E7%BB%84%E6%89%93%E5%8C%85/</id>
    <published>2020-04-01T10:28:07.000Z</published>
    <updated>2021-04-03T03:29:54.527Z</updated>
    
    <content type="html"><![CDATA[<p>vue 打包优化小知识点</p><span id="more"></span><p>在 vue-router 的 index.js 文件中<br>将原来的组件引入方式改变如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">&#x27;@/component/test1&#x27;</span></span><br></pre></td></tr></table></figure><p>变为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Test1 = <span class="function"><span class="params">r</span> =&gt;</span></span><br><span class="line">  <span class="built_in">require</span>.ensure([], <span class="function">() =&gt;</span> r(rquire(<span class="string">&#x27;../components/test1&#x27;</span>)), <span class="string">&#x27;chunkname1&#x27;</span>)</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HelloWorld = <span class="function"><span class="params">r</span> =&gt;</span></span><br><span class="line">  <span class="built_in">require</span>.ensure([], <span class="function">() =&gt;</span> r(<span class="built_in">require</span>(<span class="string">&#x27;../components/HelloWorld&#x27;</span>)), <span class="string">&#x27;chunkname1&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Test1 = <span class="function"><span class="params">r</span> =&gt;</span></span><br><span class="line">  <span class="built_in">require</span>.ensure([], <span class="function">() =&gt;</span> r(<span class="built_in">require</span>(<span class="string">&#x27;../components/test1&#x27;</span>)), <span class="string">&#x27;chunkname1&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Test2 = <span class="function"><span class="params">r</span> =&gt;</span></span><br><span class="line">  <span class="built_in">require</span>.ensure([], <span class="function">() =&gt;</span> r(<span class="built_in">require</span>(<span class="string">&#x27;../components/test2&#x27;</span>)), <span class="string">&#x27;chunkname3&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;vue 打包优化小知识点&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://colorfulworld.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>keep-alive小知识</title>
    <link href="https://colorfulworld.github.io/keep-alive%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
    <id>https://colorfulworld.github.io/keep-alive%E5%B0%8F%E7%9F%A5%E8%AF%86/</id>
    <published>2020-03-09T03:28:03.000Z</published>
    <updated>2021-02-27T12:24:38.486Z</updated>
    
    <content type="html"><![CDATA[<p>keep-alive 使用的小知识点</p><span id="more"></span><ul><li>在动态组件中的应用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;whiteList&quot;</span> <span class="attr">:exclude</span>=<span class="string">&quot;blackList&quot;</span> <span class="attr">:max</span>=<span class="string">&quot;amount&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>include 定义白名单</li><li>exclude定义黑名单</li><li>max 定义缓存组件的上限，超出上限使用LRU的策略置换缓存数据</li></ul><p>LRU:<br>内存管理的一种置换算法，对于在内存中但又不用数据块（内存块）叫做LRU，造作系统会根据那些数据属于LRU而将其移出内存而腾出空间来加载另外的数据。</p><p>只有当组件在keep-alive 内被切换，才会有actived和deactived 这两个钩子函数。</p><h2 id="keep-alive-组件的渲染"><a href="#keep-alive-组件的渲染" class="headerlink" title="keep-alive 组件的渲染"></a>keep-alive 组件的渲染</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;keep-alive 使用的小知识点&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://colorfulworld.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端监听返回键</title>
    <link href="https://colorfulworld.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9B%91%E5%90%AC%E8%BF%94%E5%9B%9E%E9%94%AE/"/>
    <id>https://colorfulworld.github.io/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9B%91%E5%90%AC%E8%BF%94%E5%9B%9E%E9%94%AE/</id>
    <published>2019-12-10T16:00:00.000Z</published>
    <updated>2021-06-15T15:34:38.003Z</updated>
    
    <content type="html"><![CDATA[<p>一直以为监听返回按键是 H5 做不到的事情，其实是可以做到的。所以记录一下，深究一下。<br>最近在工作中也接触到这个需求，需要在不同的情况下达到能正常返回或是跳转到其他页面(但是我想这个只能在多页应用实现，单页应用应该是不可以的，没有去尝试过)。</p><span id="more"></span><h2 id="浏览器前进、后退使用机制"><a href="#浏览器前进、后退使用机制" class="headerlink" title="浏览器前进、后退使用机制"></a>浏览器前进、后退使用机制</h2><p>用户点击浏览器工具栏中的后退按钮，或者是移动设备上的返回键的时候，或者是 JS 执行<code>history.go(-1)</code>的时候，浏览器会在当前窗口“打开”历史记录中的前一个页面。不同的浏览器在“打开”前一个页面的表现并不同意，这和浏览器的实现以及页面本身的设置都有关系。在浏览器中，“后退到前一个页面”意味着：前一个页面的 html/js/css 等等的静态资源的请求（甚至是 ajax 动态接口请求）根本不会重新发送，直接使用缓存的响应，而不管这些静态资源响应的缓存策略是否被设置了禁用状态。</p><h3 id="history-中的操作"><a href="#history-中的操作" class="headerlink" title="history 中的操作"></a>history 中的操作</h3><ol><li> <code>window.history.back()</code>:后退</li><li> <code>window.history.dorward()</code>:前进</li><li> <code>window.history.go(num)</code>:前进或后退指定数量历史记录</li><li><code>window.history.pushState(state,title,url)</code>:在页面中创建一个 histor 实体，直接天剑到历史记录。<ul><li>state:存储一个对象，可以添加相关信息，可以使用 history.state 读取其中的内容。</li><li>title:历史记录的标题。</li><li>url:创建的历史记录的链接，进行历史记录操作时会跳转到改链接。</li></ul></li><li> <code>window.history.replaceState()</code>:修改当前的 history 实体。</li><li> <code>popstate</code>事件:history 实体改变时触发的事件。</li><li> <code>window.history.state</code>:会获得 history 实体中的 state 对象。</li></ol><h3 id="popstate"><a href="#popstate" class="headerlink" title="popstate"></a>popstate</h3><p>popstate 只会在浏览器某些行为下触发，比如点击后退、前进按钮。</p><p>在微信浏览器中，从一个 HTML 跳到另一个 HTML 页面后，点击浏览器返回按钮，或者在第二个页面中调用<code>history.back()</code>等返回上一页的方法，在安卓中会直接返回上一页(相当于重新加载上一页的所有内容，js 会重新执行一遍)，但苹果手机中，范湖上一页是，浏览器会读取缓存中的页面内容，js 不会重新执行，在此进入这个页面不会触发 onload 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//强制刷新：</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  <span class="string">&#x27;popstate&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//检测到用户点击浏览器返回按钮，进行操作</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.referrer)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用href的形式去用跳转的形式，跳转到上一页</span></span><br><span class="line">    <span class="built_in">document</span>.location.href = <span class="built_in">document</span>.referrer</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> state = &#123;</span><br><span class="line">  title: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  url: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.history.pushState(state, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="pageshow"><a href="#pageshow" class="headerlink" title="pageshow"></a>pageshow</h3><p>onpageshow 事件在页面显示时触发，如果页面不在“往返缓存”中，改时间会在 onload 后触发，在 onpageshow 事件中，可以利用 event.persisted</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pageshow&#x27;</span>.function(evernt)&#123;</span><br><span class="line">    alert(event.persisted);</span><br><span class="line">    <span class="keyword">if</span>(event.persisted) location.reload();<span class="comment">//如果检测到页面是从“往返缓存”中读取的，刷新页面。</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="unload"><a href="#unload" class="headerlink" title="unload"></a>unload</h3><p>指定 unload 事件处理程序的页面会被自动排除在“往返缓存”之外，即使事件处理程序是空白的，原因在于，unload 最长用于撤销 load 中所执行的操作，而跳过 load 后再次显示页面很有可能会导致页面不正常。</p><h2 id="实现返回键监听"><a href="#实现返回键监听" class="headerlink" title="实现返回键监听"></a>实现返回键监听</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushHistory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> state = &#123;</span><br><span class="line">    title: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;#&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.history.pushState(state, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  <span class="string">&#x27;popstate&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//监听到返回时间 执行自己的js</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这样实现的代码在移动端可以监听浏览器返回按键、物理返回按键、虚拟返回按键、手势返回按键等。<br>history.state 中包含了 state 的 一份拷贝，可以使用 history.state 读取其中的内容。</p><h2 id="history-pushState"><a href="#history-pushState" class="headerlink" title="history.pushState"></a>history.pushState</h2><p>在当前页面创建并激活新的历史记录。</p><p>当调用 history.pushSate 或者是 history.replaceSate()不会触发 popstate 事件。只有做出后退的动作（执行 history.back()、history.go(-1)）时才会执行该事件。另外，该事件只针对同一个文档，如果浏览历史的切换，导致加载不同的文档，该事件也不会触发。</p><p>在百度的控制台输入以下代码：</p><p><code>window.history.pushState(null, null, &quot;https://www.baidu.com/?name=orange&quot;);</code><br>地址显示是<a href="https://www.baidu.com/name/orange%EF%BC%8C%E6%B3%A8%E6%84%8F%E8%BF%99%E9%87%8C%E7%9A%84url%E6%98%AF%E4%B8%8D%E6%94%AF%E6%8C%81%E8%B7%A8%E5%9F%9F%E7%9A%84%EF%BC%8C%E8%B7%A8%E5%9F%9F%E4%BC%9A%E6%8A%A5%E9%94%99">https://www.baidu.com/name/orange，注意这里的url是不支持跨域的，跨域会报错</a>.</p><p>history.pushState()只会改变当前地址的路径，并不会更新页面内容，只是产生了浏览器历史记录，此时点击返回按钮就返回到本页面，且也没有刷新，而且可以前进到<a href="https://www.baidu.com/?name=orange">https://www.baidu.com/?name=orange</a> 页面</p><p>当我们在历史记录中切换的时候就会触发 popstate 事件。</p><p>pushSate 三个参数：</p><ul><li>state，状态对象，状态对象 state 是一个 JS 对象，通过 pushSate()创建新的历史记录条目。无论什么时候用户导航到新的状态，popstate 时间就会被触发，且该时间的 state 属性包含该历史记录条目状态对象的副本。</li><li>title，历史记录的标题</li><li>url，创建的历史记录的链接。进行历史记录操作时会跳转到该链接。</li></ul><h2 id="popstate-1"><a href="#popstate-1" class="headerlink" title="popstate"></a>popstate</h2><p>popstate 事件，history 实体(hostory.state)改变时触发的事件。</p><p>当活动的历史条目被更改时，将触发 popstate 事件。如果被激活的历史记录条目是通过对 history.pushState()的调用创建的，或者受到 history.replaceSate()的调用的影响，popstate 的 state 属性包含历史条目的状态的对象的副本——MDN</p><p>popstate 每当活动历史记录在同一个文档的两个历史记录条目之间发生变化时，就会将事件分派到窗口。如果激活的历史记录条目是通过调用 history.pushState()创建的，或者受到 history.replaceState()调用的影响，则该 popstate 事件的 state 属性包含历史记录项的状态对象的副本。</p><p>注意：用于处理 popstate 事件的浏览器在页面加载时的方式不同，但现在它们的行为相同。Firefox 从未在页面加载时发出 popstate 事件，Chrome 直到版本 34 才可以，而 Safari 一直到版本 10.0。</p><h2 id="往返缓存"><a href="#往返缓存" class="headerlink" title="往返缓存"></a>往返缓存</h2><p>默认情况下，浏览器会在当前会话(session)缓存页面，当用户点击“前进”或“后退”按钮时，浏览器就会从缓存中加载页面（除去 meta 中加 no-cache 的情况）。</p><p>浏览器有一个特性叫“往返缓存”(back-forward cache 或 bfcache)，可以在用户使用浏览器的“后退”和“前进”按钮时加快页面的转换速度。这个缓存中不仅保存着页面数据，还保存了 DOM 和 javascript 的状态；实际上是将整个页面都保存在了内存里。如果页面位于 bfcache 中，那么再次打开该页面时就不会触发 load 事件</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>每次返回都会消耗一个 history 实体，若用户选择取消离开，则需要继续 pushSate 一个实体</li><li>pushState 只能一个实体，多个实体返回会报错。使用 window.history.state 查询是否存在添加的实体。</li></ol><p>例如，运行以下代码的<a href="http://example.com/example.html%E4%B8%AD%E7%9A%84%E9%A1%B5%E9%9D%A2%E5%B0%86%E6%8C%89%E7%85%A7%E6%8C%87%E7%A4%BA%E7%94%9F%E6%88%90%E8%AD%A6%E6%8A%A5%EF%BC%9A">http://example.com/example.html中的页面将按照指示生成警报：</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  alert(</span><br><span class="line">    <span class="string">&#x27;location: &#x27;</span> + <span class="built_in">document</span>.location + <span class="string">&#x27;, state: &#x27;</span> + <span class="built_in">JSON</span>.stringify(event.state)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">history.pushState(&#123; <span class="attr">page</span>: <span class="number">1</span> &#125;, <span class="string">&#x27;title 1&#x27;</span>, <span class="string">&#x27;?page=1&#x27;</span>)</span><br><span class="line">history.pushState(&#123; <span class="attr">page</span>: <span class="number">2</span> &#125;, <span class="string">&#x27;title 2&#x27;</span>, <span class="string">&#x27;?page=2&#x27;</span>)</span><br><span class="line">history.replaceState(&#123; <span class="attr">page</span>: <span class="number">3</span> &#125;, <span class="string">&#x27;title 3&#x27;</span>, <span class="string">&#x27;?page=3&#x27;</span>)</span><br><span class="line">history.back() <span class="comment">// alerts &quot;location: http://example.com/example.html?page=1, state: &#123;&quot;page&quot;:1&#125;&quot;</span></span><br><span class="line">history.back() <span class="comment">// alerts &quot;location: http://example.com/example.html, state: null history.go(2);</span></span><br><span class="line"><span class="comment">// alerts &quot;location: http://example.com/example.html?page=3, state: &#123;&quot;page&quot;:3&#125;</span></span><br></pre></td></tr></table></figure><p>请注意，即使原始历史记录项（for <a href="http://example.com/example.html%EF%BC%89%E6%B2%A1%E6%9C%89%E4%B8%8E%E5%85%B6%E5%85%B3%E8%81%94%E7%9A%84%E7%8A%B6%E6%80%81%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%BD%86%E5%BD%93%E6%88%91%E4%BB%AC%E5%9C%A8%E7%AC%AC%E4%BA%8C%E6%AC%A1%E8%B0%83%E7%94%A8history.back()%E5%90%8E%E6%BF%80%E6%B4%BB%E8%AF%A5%E7%8E%B0%E6%97%B6%EF%BC%8C%E4%BB%8D%E7%84%B6%E4%BC%9A%E8%A7%A6%E5%8F%91%E4%B8%80%E4%B8%AApopstate%E4%BA%8B%E4%BB%B6%E3%80%82">http://example.com/example.html）没有与其关联的状态对象，但当我们在第二次调用history.back()后激活该现时，仍然会触发一个popstate事件。</a></p><h2 id="填坑史"><a href="#填坑史" class="headerlink" title="填坑史"></a>填坑史</h2><p>这种东西一看就不靠谱，一用果然不靠谱，在移动端兼容好像还可以，目前没有发现在什么低端手机上完全不支持的。</p><p>需求是根据不同的情况来跳转，但是若是由接口返回参数进行判断的话则有可能用户在接口还没有反应的时候就进行了跳转，因此是使用的判断 cookies 的方式执行的 js。</p><p>业务场景：</p><p>页面 A-&gt;B-&gt;C，C 返回至 B 时页面返回时需要返回到指定的其他页面，比如跳到百度。</p><h3 id="IOS-端-popstate-的怪异行为"><a href="#IOS-端-popstate-的怪异行为" class="headerlink" title="IOS 端 popstate 的怪异行为"></a>IOS 端 popstate 的怪异行为</h3><p>由于 ios 的性能在缓存页面比较好，所以一般页面的后退都会保存之前的历史页面，不会触发页面上的 js 等，所以可以触发到 popstate 事件，而 webkit 的某些版本对 popstate 的理解与官方标准不一致，导致每次访问页面都会同步为访问了这个页面的历史纪录，所以 popstate 就被触发了。</p><p>问题：在 ios 上，页面 C 返回时，立即执行了 popstate 事件，导致直接跳转到百度了。</p><p>解决方法：通过 pageshow 事件处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bool = <span class="literal">false</span> <span class="comment">//定义一个变量</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;pageshow&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  bool = <span class="literal">false</span> <span class="comment">//进入页面时bool置为false，防止ios立即执行popstate</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//定时器延迟将bool置为true</span></span><br><span class="line">    bool = <span class="literal">true</span></span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">pushHistory()</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(</span><br><span class="line">  <span class="string">&#x27;popstate&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bool) &#123;</span><br><span class="line">      <span class="built_in">window</span>.location.href = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pushHistory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> state = &#123; <span class="attr">title</span>: <span class="string">&#x27;title&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;#&#x27;</span> &#125;</span><br><span class="line">  <span class="built_in">window</span>.history.pushState(state, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="刷新时反复-pushState"><a href="#刷新时反复-pushState" class="headerlink" title="刷新时反复 pushState"></a>刷新时反复 pushState</h3><p>因为刷新时重复 pushState，所以跳转到 baidu.com 时无法正常返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!history.state || history.state.url !== <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">//避免刷新是反复pushSate</span></span><br><span class="line">  pushHistory()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!history.state || history.state.url !== <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">//避免刷新是反复pushSate</span></span><br><span class="line">  pushHistory()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感觉就是很不靠谱，所以使用的时候慎重加多测。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一直以为监听返回按键是 H5 做不到的事情，其实是可以做到的。所以记录一下，深究一下。&lt;br&gt;最近在工作中也接触到这个需求，需要在不同的情况下达到能正常返回或是跳转到其他页面(但是我想这个只能在多页应用实现，单页应用应该是不可以的，没有去尝试过)。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://colorfulworld.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Jenkins对前端应用做自动化构建</title>
    <link href="https://colorfulworld.github.io/Jenkins%E5%AF%B9%E5%89%8D%E7%AB%AF%E5%BA%94%E7%94%A8%E5%81%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA/"/>
    <id>https://colorfulworld.github.io/Jenkins%E5%AF%B9%E5%89%8D%E7%AB%AF%E5%BA%94%E7%94%A8%E5%81%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA/</id>
    <published>2019-12-03T08:58:31.000Z</published>
    <updated>2021-03-29T15:09:23.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jenkins是什么"><a href="#Jenkins是什么" class="headerlink" title="Jenkins是什么"></a>Jenkins是什么</h1><p>Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能，最初的创建者川口清子（Kohsuke Kawaguchi）。他独自写了大部分代码</p><span id="more"></span><p><img src="https://user-images.githubusercontent.com/16111288/68524077-01e52f80-02fd-11ea-9531-d039a4c77113.png" alt="network"></p><p><img src="https://user-images.githubusercontent.com/16111288/68523536-9c417500-02f5-11ea-9862-dd7bc23ae9ec.png" alt="network"></p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>今天分享的主要内容有</p><ul><li>Docker简单介绍</li><li>Jenkins的简介与安装</li><li>Jenkins对接Github 项目做持续集成</li><li>Jenkins构建项目的几种方式</li><li>Jenkins上传前端包到文件服务器</li><li>云服务器简单使用介绍</li></ul><p>涉及到的资源和工具</p><ul><li>一台阿里云Linux服务器（默认安装Centos）。</li><li>Xshell：一个Windows软件，脚本的方式来操作服务器。</li><li>XFTP：是Xshell的一个插件，能图形化看到服务器的文件。</li><li>Nginx：展示前端页面</li><li>Docker：一个运行Jenkins的容器</li><li>Jenkins</li><li>Git</li></ul><h1 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h1><p>如今我们已经到前后端分离开发的模式。通常情况下，前端只需要把HTML，CSS，JS打包好之后，发给后端部署即可。最能体现这个场景比如使用vue来开发前端项目的时候，利用vue-cli脚手架来帮我们打包npm run build。 最终会生成一个dist目录，我们只需提供这个dist包给后端开发人员即可。</p><p>如果只发一个版本，这种方式完全OK，但是如果需要频繁的更新版本，就会有如下图的操作，各个人员在频发互传代码包，容易出问题。这对于前后端来说，都是一个很低效的事情。</p><p><img src="https://user-images.githubusercontent.com/16111288/68523471-c6466780-02f4-11ea-8700-e6c5e0bef519.png" alt="network"></p><p>因此我们需要将低效的手动式部署，升级为更加先进的工程化，流水线式的持续部署。Jenkins就很好的可以做这样的事情，而且我们公司的持续集成也是使用这个工具。</p><h1 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h1><h2 id="持续集成Continuous-Integration（CI）"><a href="#持续集成Continuous-Integration（CI）" class="headerlink" title="持续集成Continuous Integration（CI）"></a>持续集成Continuous Integration（CI）</h2><p>持续集成强调开发人员提交了新代码之后，立刻自动的进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。<br>持续集成过程中很重视自动化测试验证结果，对可能出现的一些问题进行预警，以保障最终合并的代码没有问题。</p><h2 id="持续交付Continuous-Delivery（CD）"><a href="#持续交付Continuous-Delivery（CD）" class="headerlink" title="持续交付Continuous Delivery（CD）"></a>持续交付Continuous Delivery（CD）</h2><p>持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。<br>持续交付并不是指软件每一个改动都要尽快部署到产品环境中，它指的是任何的代码修改都可以在任何时候实施部署。<br>这里强调的是</p><ul><li>手动部署</li><li>有部署的能力，但不一定部署</li></ul><h2 id="持续部署（Continuous-Deployment"><a href="#持续部署（Continuous-Deployment" class="headerlink" title="持续部署（Continuous Deployment)"></a>持续部署（Continuous Deployment)</h2><p>持续部署是指当交付的代码通过评审之后，自动部署到生产环境中。持续部署是持续交付的最高阶段。<br>这里强调</p><ul><li>持续部署是自动的</li><li>持续部署是持续交付的最高阶段</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」和「持续部署（Continuous Deployment）」提供了一个优秀的 DevOps 环境，对于整个团队来说，好处与挑战并行。无论如何，频繁部署、快速交付以及开发测试流程自动化都将成为未来软件工程的重要组成部分。</p><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="docker简介"><a href="#docker简介" class="headerlink" title="docker简介"></a>docker简介</h2><p>Docker 是现今非常流行的一种容器化打包和发布工具，配合Git、SVN等代码版本管理工具， Jenkins、Gitlab Runner等持续集成工具，以及Swarn、Kubernetes 等容器编排工具，可以形成一个完整的软件自动化集成、测试发布流水线（CI/CD），可以有效的提升团队的生产效率和运维体验。</p><p>Docker是一种Linux容器技术，容器有效的将由单个操作系统挂管理的资源划分到孤立的组中，以便更好的在组之间平衡有冲突的资源使用需求。可简单理解为一种沙盒 。每个容器内运行一个应用，不同的容器之间相互隔离，容器之间也可以建立通信机制。容器的创建和停止都十分快速，资源需求远远低于虚拟机，一个非常明显的区别就是在运行虚拟机中包含有操作系统，而容器中却没有。</p><p>虚拟机正因为带有独立的操作系统，它可以通过这个操作系统内核进行对硬件资源的自主访问，成为一个独立完备的计算机小生态。Docker容器不具备这样的功能，它只能通过与宿主机共享操作系统内核来进行硬件资源的访问，但这也不是docker 的缺点，反而因为不需要携带自己的操作系统，容器变得更小更轻量，创建容器变得非常快速</p><h2 id="docker与虚拟机对比"><a href="#docker与虚拟机对比" class="headerlink" title="docker与虚拟机对比"></a>docker与虚拟机对比</h2><table><thead><tr><th>特性</th><th>docker容器</th><th>虚拟机</th></tr></thead><tbody><tr><td>启动速度</td><td>秒级</td><td>分钟级</td></tr><tr><td>硬盘使用</td><td>一般为MB</td><td>一般为GB</td></tr><tr><td>性能</td><td>接近原生</td><td>弱于原生</td></tr><tr><td>系统支持量</td><td>单台机支持上千个容器</td><td>单台机支持几十个容器</td></tr><tr><td>隔离性</td><td>安全隔离</td><td>安全隔离</td></tr></tbody></table><h2 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h2><p> 类似linux系统环境，运行和隔离应用。容器从镜像启动的时候，docker会在镜像的最上一层创建一个可写层，镜像本身是只读的，保持不变，是一个文件系统。</p><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><p>Docker镜像是一个Docker的可执行文件，其中包含了运行应用程序所需要的代码、依赖库、环境变量、配置文件等等，也是一个文件系统。</p><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>仓库分为本地仓库和远程仓库，是用于存储镜像的地方，通常在电脑上通过docker build 构建镜像后，镜像就被存放着在本地仓库中；当我们要转移、分发这些镜像的时候，就需要利用远程镜像仓库，讲镜像上传，方便后续其他电脑可以从小这些远程仓库中下载到我们的镜像。</p><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>如果你想要从一个基础镜像开始建立一个自定义镜像，可以选择一步一步进行构建，也可以选择写一个配置文件，然后一条命令（docker build）完成构建，显然配置文件的方式可以更好地应对需求的变更，这个配置文件就是Dockerfile。<br>学习Dockerfile的最好方式就是阅读别人写的Dockerfile，遇到不会的指令就查一查Dockerfile的文档</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>关机后，docker容器会停止运行，镜像会保留在硬盘上，就想关机了，软件就关闭了，但可以再次打开。</p><h1 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h1><h2 id="Jenkins安装"><a href="#Jenkins安装" class="headerlink" title="Jenkins安装"></a>Jenkins安装</h2><p>建议直接在Linux上安装，首页的插件选择默认的安装。</p><h2 id="Jenkins页面简介"><a href="#Jenkins页面简介" class="headerlink" title="Jenkins页面简介"></a>Jenkins页面简介</h2><p>​        jenkins系统的介绍</p><h2 id="Jenkins插件安装"><a href="#Jenkins插件安装" class="headerlink" title="Jenkins插件安装"></a>Jenkins插件安装</h2><p>作为CI/CD的调度中心，Jenkins具有十八般武艺，目前已有1500多个插件，功能非常强大，比如说我们用到的，node插件，npm插件，Github插件，ssh上传文件插件，还有很多插件，比较多人用的，导出测试报告，sonar代码扫描等等。如果再jenkins里面没有搜到想用的插件，去官网搜，下载后在回来安装需要额外安装的有：</p><ul><li>Github plugin：把代码从Github上拉下来</li><li>Nodejs：运行前端项目，npm install，npm run build </li><li>Pubish Over SSH：把构建好的文件 上传到nginx</li><li>Email Extended  Template : 发送邮件通知</li></ul><h3 id="在github配置钩子"><a href="#在github配置钩子" class="headerlink" title="在github配置钩子"></a>在github配置钩子</h3><pre><code>Jenkins需要一个对项目有读写权限的账户，所以要在github生成一个token给jenkins使用，这个token，在后面需要用到。</code></pre><blockquote><pre><code>进入github --&gt; setting --&gt; Personal Access Token --&gt; Generate new token</code></pre></blockquote><p><img src="https://user-images.githubusercontent.com/16111288/68523844-aebdad80-02f9-11ea-9294-828868dfdf69.png" alt="network"></p><p><img src="https://user-images.githubusercontent.com/16111288/68523993-9e0e3700-02fb-11ea-9a0b-f07e19b9cc7f.png" alt="network"></p><p>拿到这个token之后先保存好，等会到jenkins中需要配置凭证<br>我们有一个token可以访问到github了，但是还要对其中的项目设置钩子</p><blockquote><pre><code>进入GitHub上指定的项目 --&gt; setting --&gt; WebHooks&amp;Services --&gt; add webhook --&gt; 输入刚刚部署jenkins的服务器的IP</code></pre></blockquote><p><img src="https://user-images.githubusercontent.com/16111288/68524015-04935500-02fc-11ea-9a12-9cfd5bfc7695.png" alt="network"></p><h2 id="在Jenkins和github钩子"><a href="#在Jenkins和github钩子" class="headerlink" title="在Jenkins和github钩子"></a>在Jenkins和github钩子</h2><h3 id="安装github-plugin"><a href="#安装github-plugin" class="headerlink" title="安装github plugin"></a>安装github plugin</h3><blockquote><p>系统管理–&gt;插件管理–&gt;可选插件</p></blockquote><h3 id="配置github-plugin"><a href="#配置github-plugin" class="headerlink" title="配置github plugin"></a>配置github plugin</h3><blockquote><p>系统管理–&gt;github plugin</p></blockquote><p>API URL 输入 <code>https://api.github.com</code>，Credentials点击Add添加，Kind选择Secret Text,具体如下图所示。</p><p><img src="https://user-images.githubusercontent.com/16111288/68524053-c64a6580-02fc-11ea-9f2d-db3a71b304d3.png" alt="network"></p><p><img src="https://user-images.githubusercontent.com/16111288/68524112-9485ce80-02fd-11ea-9047-d73780d20b48.png" alt="network"></p><p>设置完成后，点击<code>TestConnection</code>,提示<code>Credentials verified for user UUserName, rate limit: xxx</code>,则表明有效。</p><h2 id="构建配置"><a href="#构建配置" class="headerlink" title="构建配置"></a>构建配置</h2><h2 id="构建方式"><a href="#构建方式" class="headerlink" title="构建方式"></a>构建方式</h2><ul><li>手动构建：自己上Jenkins点击。</li><li>自动构建：提交代码到git仓库之后，自动构建。</li><li>定时构建：每隔一段时间构建一次，比如设置每天固定某个时间段构建。</li></ul><h3 id="编写shell脚本"><a href="#编写shell脚本" class="headerlink" title="编写shell脚本"></a>编写shell脚本</h3><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p><p><code>node -v</code><br><code>npm -v</code><br><code>npm --registry https://registry.npm.taobao.org install</code><br><code>npm run test:unit</code><br><code>npm run build</code></p><h3 id="参数化构建"><a href="#参数化构建" class="headerlink" title="参数化构建"></a>参数化构建</h3><p>选择参数化构建，配置参数，在工程的首页就会多一个构建入口，参数化构建使得构建变得更加灵活。</p><p><img src="https://user-images.githubusercontent.com/16111288/68524161-5d63ed00-02fe-11ea-9874-1f4672d47891.png" alt="network"></p><p><img src="https://user-images.githubusercontent.com/16111288/68524197-a0be5b80-02fe-11ea-8765-a5505bc42420.png" alt="network"></p><h3 id="上传构建包"><a href="#上传构建包" class="headerlink" title="上传构建包"></a>上传构建包</h3><p>使用nginx做为文件服务器<br>在机器上安装nginx<br>在nginx上配置为文件资源服务器</p><p><code>location / &#123;         root   /usr/share/nginx/html/static;         autoindex on;         autoindex_exact_size off;         autoindex_localtime on;     &#125;</code><br><img src="https://user-images.githubusercontent.com/16111288/68524366-0b709680-0301-11ea-8892-a7e1e50f4cfa.png" alt="network"></p><h2 id="Jenkins系统配置SSH账号"><a href="#Jenkins系统配置SSH账号" class="headerlink" title="Jenkins系统配置SSH账号"></a>Jenkins系统配置SSH账号</h2><p>安装Publish Over SSH插件用于SSH连接远程的服务器。</p><p>登录 jenkins 管理系统首页，打开“系统管理”–“管理插件”  搜索 Publish Over SSH 然后勾选安装<br>配置远程服务器的连接</p><p>打开“系统管理”–“系统设置”  找到 “Publish over SSH” 项 ，我这里远程服务器用的是ssh登录，通过ppk密钥进行连接，所以我的配置如图，如果是帐号密码登录的Passphrase填写密码Username填写用户名，path to key 为空就可以了。</p><p><img src="https://user-images.githubusercontent.com/16111288/68524390-5094c880-0301-11ea-8559-ad729ff4f671.png" alt="network"></p><p>点击 Test Configuration 按钮测试连接是否成功</p><p><img src="https://user-images.githubusercontent.com/16111288/68524400-6bffd380-0301-11ea-840d-96bc52a4257b.png" alt="network"></p><h3 id="JOB添加构建后上传"><a href="#JOB添加构建后上传" class="headerlink" title="JOB添加构建后上传"></a>JOB添加构建后上传</h3><blockquote><p>“构建后操作步骤”—“Send build artifacts over SSH” </p></blockquote><p>Name：第三步创建的远程服务器名称</p><p>Source files：本地需要传输过去的文件路径</p><p>Remove prefix：过滤掉的目录名</p><p>Remote directory：远程服务器的保存路径</p><p>Exec command：传输完成后在远程服务器执行的sh命令</p><p><img src="https://user-images.githubusercontent.com/16111288/68524450-03652680-0302-11ea-9bce-f7b42ddf589d.png" alt="network"></p><h2 id="构建后邮件通知"><a href="#构建后邮件通知" class="headerlink" title="构建后邮件通知"></a>构建后邮件通知</h2><p>构建成功之后，可以进行邮件通知。<br>第一步，先到插件管理安装插件，Email Extension Plugin，我只搜到了Email EXtension Template，所以就安装了它</p><p>如果是QQ邮箱，先去获取一个独立密码</p><p><img src="https://user-images.githubusercontent.com/16111288/68524622-02cd8f80-0304-11ea-949b-ec148ea39d08.png" alt="network"></p><blockquote><p>系统管理–&gt;系统设置–&gt; Extended E-mail Notification</p></blockquote><p><img src="https://user-images.githubusercontent.com/16111288/68524633-1a0c7d00-0304-11ea-8bdb-3c94222fcfb8.png" alt="network"></p><p><img src="https://user-images.githubusercontent.com/16111288/68524636-21338b00-0304-11ea-8ac7-0e8aa0f07aab.png" alt="network"></p><h2 id="配置邮件报错"><a href="#配置邮件报错" class="headerlink" title="配置邮件报错"></a>配置邮件报错</h2><p><img src="https://user-images.githubusercontent.com/16111288/68524653-593ace00-0304-11ea-9b60-d4f4227f020c.png" alt="network"></p><p>邮件配置的过程出错，是因为管理的邮箱没有配置，到用户设置去设置</p><p><img src="https://user-images.githubusercontent.com/16111288/68524659-6952ad80-0304-11ea-846b-fb1dc721ab56.png" alt="network"></p><h3 id="构建后选择接收人"><a href="#构建后选择接收人" class="headerlink" title="构建后选择接收人"></a>构建后选择接收人</h3><p><img src="https://user-images.githubusercontent.com/16111288/68524667-7f606e00-0304-11ea-8425-84fbd475e9af.png" alt="network"></p><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p> 对于新手来说，Jenkin最好直接安装在机器上，安装在docker上的话，Jenkins无法访问到宿主机器的环境变量，比如我在机器上安装Yarn，但docker上的Jenkins无法访问得到Yarn，只能老老实实的使用npm。</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ul><li>学习Jenkins，Docker这种工具，最好租一个服务器，不需要买域名，按月租就够了。</li><li>境外服务器的比境内便宜，但境外的经常连不上去，每天总有几个小时连不上去。</li><li>构建过程中npm install总是失败，服务器从1G内存扩容到2G 之后又成功了。</li><li>Docker安装的jenkins无法访问到本机的环境变量，例如无法在构建脚本中写Yarn命令。</li></ul><h1 id="阿里云简介"><a href="#阿里云简介" class="headerlink" title="阿里云简介"></a>阿里云简介</h1><p>轻量应用型服务器，便宜，适合学习。<br>买好之后，在点击进入自己的机器</p><p><img src="https://user-images.githubusercontent.com/16111288/68524467-30193e00-0302-11ea-8266-0114201443ba.png" alt="network"></p><p>服务器默认只开发 80,443，22端口是可以通过外网进行访问的，如果自己的应用是8080,8088这个端口，需要在阿里云防火墙里面添加规则，并重启机器</p><p><img src="https://user-images.githubusercontent.com/16111288/68524471-3c050000-0302-11ea-8d61-54e8fc0000fb.png" alt="network"></p><h2 id="通过xshell进入服务器"><a href="#通过xshell进入服务器" class="headerlink" title="通过xshell进入服务器"></a>通过xshell进入服务器</h2><p><img src="https://user-images.githubusercontent.com/16111288/68524476-4c1cdf80-0302-11ea-825b-aa3ce6144c22.png" alt="network"></p><h1 id="访问github慢"><a href="#访问github慢" class="headerlink" title="访问github慢"></a>访问github慢</h1><p>github的CDN被某墙屏了，由于网络代理商的原因，所以访问下载很慢。ping github.com 时，速度只有300多ms。<br>绕过dns解析，在本地直接绑定host，该方法也可加速其他因为CDN被屏蔽导致访问慢的网站。<br>windows系统的hosts文件的位置如下：C:\Windows\System32\drivers\etc\hosts<br>mac/linux系统的hosts文件的位置如下：/etc/hosts</p><p>修改windows里的hosts文件，添加如下内容</p><p><code># Github 151.101.44.249 github.global.ssl.fastly.net  192.30.253.113 github.com  103.245.222.133 assets-cdn.github.com  23.235.47.133 assets-cdn.github.com  203.208.39.104 assets-cdn.github.com  204.232.175.78 documentcloud.github.com  204.232.175.94 gist.github.com  107.21.116.220 help.github.com  207.97.227.252 nodeload.github.com  199.27.76.130 raw.github.com  107.22.3.110 status.github.com  204.232.175.78 training.github.com  207.97.227.243 www.github.com  185.31.16.184 github.global.ssl.fastly.net  185.31.18.133 avatars0.githubusercontent.com  185.31.19.133 avatars1.githubusercontent.com 192.30.253.120 codeload.github.com</code></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Jenkins是什么&quot;&gt;&lt;a href=&quot;#Jenkins是什么&quot; class=&quot;headerlink&quot; title=&quot;Jenkins是什么&quot;&gt;&lt;/a&gt;Jenkins是什么&lt;/h1&gt;&lt;p&gt;Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能，最初的创建者川口清子（Kohsuke Kawaguchi）。他独自写了大部分代码&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://colorfulworld.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>JS的number类型最大值</title>
    <link href="https://colorfulworld.github.io/JS%E7%9A%84number%E7%B1%BB%E5%9E%8B%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>https://colorfulworld.github.io/JS%E7%9A%84number%E7%B1%BB%E5%9E%8B%E6%9C%80%E5%A4%A7%E5%80%BC/</id>
    <published>2019-09-10T06:42:07.000Z</published>
    <updated>2021-02-27T12:24:38.482Z</updated>
    
    <content type="html"><![CDATA[<p>遇到过几次number类型精度丢失的问题，一次是后台传的类型为number类型的 超大值，结果丢失了精度，后来就修改成string 型的就没有了这个问题，一次是对number 型进行乘除操作，后台返回了超大值，出于产品方面的考虑，数据库限定了输入长度。但我想，若是真的有对一个超长number型数字处理的话，那该如何呢？</p><span id="more"></span><h2 id="精度丢失的根本原因"><a href="#精度丢失的根本原因" class="headerlink" title="精度丢失的根本原因"></a>精度丢失的根本原因</h2><p>js 的number类型有个最大值（安全值），即2的53次方，为9007199254740992，如果超出这个值，那么js 会出现不精准的问题，这个值为16位。在浏览器控制台分别输入Number.MAX_SAFE_INTEGER和Number.MIN_SAFE_INTEGER可查看对应的最大/小值</p><h2 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h2><p>BigInt 是JavaScript 中一个新的原始类型，可以用任一精度表示整数。使用BigInt，即使超出JS Number 的安全整数限制，也可以安全的存储和操作大整数。</p><p>chrome 67+开始支持BigInt，本文所有demo都是基于chrome 67。</p><p>要创建BigInit,在数字后面添加n后缀即可，例如123变成123n。</p><p>BigInt是JavaScript语言中的一个原始类型。因此，可以使用typeof操作符检测到这种类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>;</span><br><span class="line"><span class="comment">// → &#x27;number&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">123n</span>;</span><br><span class="line"><span class="comment">// → &#x27;bigint&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;遇到过几次number类型精度丢失的问题，一次是后台传的类型为number类型的 超大值，结果丢失了精度，后来就修改成string 型的就没有了这个问题，一次是对number 型进行乘除操作，后台返回了超大值，出于产品方面的考虑，数据库限定了输入长度。但我想，若是真的有对一个超长number型数字处理的话，那该如何呢？&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://colorfulworld.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack优化之preload和prefetch</title>
    <link href="https://colorfulworld.github.io/webpack%E4%BC%98%E5%8C%96%E4%B9%8Bpreload%E5%92%8Cprefetch/"/>
    <id>https://colorfulworld.github.io/webpack%E4%BC%98%E5%8C%96%E4%B9%8Bpreload%E5%92%8Cprefetch/</id>
    <published>2019-08-16T09:26:11.000Z</published>
    <updated>2021-04-03T03:29:17.968Z</updated>
    
    <content type="html"><![CDATA[<p>链接预取是一种浏览器机制，其利用浏览器空闲时间来下载或预取用户在不久的将来可能访问的文档。网页向浏览器提供一组预取提示，并在浏览器完成当前页面的加载后开始静默地拉取指定的文档并将其存储在缓存中。当用户访问其中一个预取文档时，便可以快速的从浏览器缓存中得到。</p><span id="more"></span><h1 id="prefetch"><a href="#prefetch" class="headerlink" title="prefetch"></a>prefetch</h1><p>prefetch 的设计初衷是为了让当前页面的关键资源尽早被发现和加载，从而提升首屏渲染性能。</p><p>当我们使用 webpack 构建页面时，就会在页面中发现有很多使用<code>link</code>引入的 JS 资源。</p><p><img src="https://img.hacpai.com/file/2019/08/15659449621-5fea8870.jpg" alt="network"></p><p>这段代码告诉浏览器，这段资源将会在未来某个导航或者功能要用到，但是本资源的下载顺序权重比较低。也就是说 prefetch 通常用于加速下一次导航，而不是本次的。</p><p>被标记为 prefetch 的资源，将会被浏览器在空闲时间加载。prefetch 指示的是<strong>下一次</strong>导航可能需要的资源。浏览器识别到 Prefetch 时，应该加载该资源（且不执行），等到真正请求相同资源时，就能够得到更快的响应。</p><p>![network]](<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Link_prefetching_FAQ">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Link_prefetching_FAQ</a>)</p><h1 id="preload"><a href="#preload" class="headerlink" title="preload"></a>preload</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;preload&quot; href&#x3D;&quot;late_discovered_thing.js&quot; as&#x3D;&quot;script&quot;&gt;</span><br></pre></td></tr></table></figure><p>as 属性的作用是告诉浏览器被加载的是什么资源，可能的 as 值包括：</p><ul><li>  “script”</li><li>  “style”</li><li>  “image”</li><li>  “media”</li><li>  “document”</li></ul><p>忽略 as 属性，或者错误的 as 属性会使 preload 等同于 XHR 请求，浏览器不知道加载的是什么，因此会赋予此类资源非常低的加载优先级。</p><p>preload 通常用于本页面要用到的关键资源，包括关键 js、字体、css 文件。preload 将会把资源得下载顺序权重提高，使得关键数据提前下载好，优化页面打开速度。</p><h1 id="什么时候使用-preload-和-prefetch"><a href="#什么时候使用-preload-和-prefetch" class="headerlink" title="什么时候使用 preload 和 prefetch"></a>什么时候使用 preload 和 prefetch</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对于当前页面很有必要的资源使用 &#96;preload&#96;，对于可能在将来的页面中使用的资源使用 &#96;prefetch&#96;。</span><br></pre></td></tr></table></figure><ul><li><p>  <code>preload</code>  是对浏览器指示预先请求当前页需要的资源（关键的脚本，字体，主要图片）。</p></li><li><p>  <code>prefetch</code>  应用场景稍微又些不同 —— 用户将来可能在其他部分（比如视图或页面）使用到的资源。如果  <code>A</code>  页面发起一个  <code>B</code>  页面的  <code>prefetch</code>  请求，这个资源获取过程和导航请求可能是同步进行的，而如果我们用  <code>preload</code>  的话，页面  <code>A</code>  离开时它会立即停止。</p></li></ul><p>使用  <code>preload</code>和  <code>prefetch</code>，我们有了对当前页面和将来页面加载关键资源的解决办法。</p><h1 id="preload-和-prefetch-的缓存行为"><a href="#preload-和-prefetch-的缓存行为" class="headerlink" title="preload 和  prefetch  的缓存行为"></a>preload 和  prefetch  的缓存行为</h1><p>chrome 有四种缓存：HTTP 缓存，内存缓存，Service Worker 缓存和 Push 缓存，preload 和 prefetch 都被缓存在 HTTP 缓存中。</p><p>当一个资源被  <code>preload</code>  或者  <code>prefetch</code>  获取后，它可以从 HTTP 缓存移动至渲染器的内存缓存中。如果资源可以被缓存（比如说存在有效的<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control"><code>cache-control</code></a>  和  <code>max-age</code>），它被存储在 HTTP 缓存中可以被现在或将来的任务使用，如果资源不能被缓存在 HTTP 缓存中，作为代替，它被放在内存缓存中直到被使用。</p><h1 id="webpack-搭配-prefetch-优化单页面应用-code-splitting"><a href="#webpack-搭配-prefetch-优化单页面应用-code-splitting" class="headerlink" title="webpack 搭配 prefetch 优化单页面应用 code-splitting"></a>webpack 搭配 prefetch 优化单页面应用 code-splitting</h1><p>单页面应用由于页面过多，可能会导致代码体积过大，从而使得首页打开速度过慢。所以切分代码，优化首屏打开速度尤为重要。</p><p>但是所有的技术手段都不是完美的。当我们切割代码后，首屏的 js 文件体积减少了好多。但是也有一个突出的问题：<br>那就是当跳转其他页面的时候，需要下载相应页面的 js 文件，这就导致体验极其不好，每一次点击访问新页面都要等待 js 文件下载，然后再去请求接口获取数据。频繁出现 loading 动画的体验真的不好.</p><p>所以如果我们在进入首页后，在浏览器的空闲时间提前下好用户可能会点击页面的 js 文件，这样首屏的 js 文件大小得到了控制，而且再点击新页面的时候，相关的 js 文件已经下载好了，就不再会出现 loading 动画。</p><p>动态引入 js 文件，实现 code-splitting，减少首屏打开时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">**<span class="comment">// 代码分割后的react组件</span></span><br><span class="line"><span class="keyword">const</span> Brand = asyncComponent(<span class="function">() =&gt;</span> <span class="keyword">import</span>(</span><br><span class="line"><span class="comment">/*webpackChunkName: &#x27;mp-supports&#x27;*/</span></span><br><span class="line"><span class="string">&#x27;./views/Brand&#x27;</span> )) <span class="comment">// 路由引入</span></span><br><span class="line">&lt;Route path=<span class="string">&quot;/&quot;</span> component=&#123;App&#125;&gt;</span><br><span class="line">&lt;Route path=<span class="string">&quot;/brand&quot;</span> component=&#123;Brand&#125; /&gt; &lt;/Route&gt;</span><br></pre></td></tr></table></figure><p>首页组件的生命周期：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在接口取的数据后，进行prefetch</span></span><br><span class="line"><span class="function"><span class="title">componentDidUpdate</span>(<span class="params">&#123; topics &#125;</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>( topics.length === <span class="number">0</span> &amp;&amp; <span class="built_in">this</span>.props.topics.length &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">   <span class="comment">// 实行prefetch，注意只有webpack 4版本才支持prefetch功能。</span></span><br><span class="line">    <span class="keyword">import</span>(</span><br><span class="line">        <span class="comment">/* webpackPrefetch: true */</span></span><br><span class="line">        <span class="comment">/*webpackChunkName: &#x27;topic&#x27;*/</span></span><br><span class="line">        <span class="string">&quot;../topic&quot;</span></span><br><span class="line">      )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键点：<br>1、 <code>_webpackChunkName: &#39;chunk-name&#39;_</code><br>2、 componentDidUpdate</p><h2 id="这里有两个关键点："><a href="#这里有两个关键点：" class="headerlink" title="这里有两个关键点："></a>这里有两个关键点：</h2><ol><li>webpack 的动态 import()需要指定包命，如果不在注释中说明包名，那么用了几次 import() , webpack 就会给同一个文件打包多少次。使得我们 prefetch 的文件和路由中要用到的文件并不是同一个文件。</li><li>prefetch 会在浏览器空闲时，下载相应文件。这是一个很笼统的定义，在我的使用中，我发现在接口没有返回数据，以及图片等还没有请求成功时，prefetch 就会请求数据了。这一点是很不好的，最起码 prefetch 不能影响首页接口的获取速度。所以我把 prefetch 的执行事件放在了 componentDidUpdate 生命周期内。保障了 prefetch 的执行，不会影响到关键的首页数据获取。</li></ol><p>当然 prefetch 在服务端渲染的页面并不会有影响接口的问题，是一个比较好的技术选择</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ol><li><a href="https://www.itcodemonkey.com/article/9707.html">Prefetch 和预加载实践</a></li><li><a href="https://www.jianshu.com/p/24ffa6d45087">关于 Preload, 你应该知道些什么</a></li><li><a href="https://www.w3cplus.com/performance/reloading/preload-prefetch-and-priorities-in-chrome.html">Preload，Prefetch 和它们在 Chrome 之中的优先级)</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;链接预取是一种浏览器机制，其利用浏览器空闲时间来下载或预取用户在不久的将来可能访问的文档。网页向浏览器提供一组预取提示，并在浏览器完成当前页面的加载后开始静默地拉取指定的文档并将其存储在缓存中。当用户访问其中一个预取文档时，便可以快速的从浏览器缓存中得到。&lt;/p&gt;</summary>
    
    
    
    <category term="webpack" scheme="https://colorfulworld.github.io/categories/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://colorfulworld.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://colorfulworld.github.io/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2019-08-12T08:56:17.000Z</published>
    <updated>2021-02-28T08:15:40.333Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式的特点是：1. 灵活性、逻辑性和功能性非常的强；2. 可以迅速地用极简单的方式达到字符串的复杂控制。3. 对于刚接触的人来说，比较晦涩难懂。</p><span id="more"></span><p><a href="http://tool.oschina.net/uploads/apidocs/jquery/regexp.html">正则表达式全集</a>;</p><h1 id="字面量字符-Literal-Characters"><a href="#字面量字符-Literal-Characters" class="headerlink" title="字面量字符( Literal Characters )"></a>字面量字符( Literal Characters )</h1><table><thead><tr><th>字符</th><th>描述</th><th>描述</th></tr></thead><tbody><tr><td>f</td><td>换页符</td><td>(u000C)</td></tr><tr><td>n</td><td>换行符</td><td>(u000A)</td></tr><tr><td>n</td><td>换行符</td><td>(u000A)</td></tr><tr><td>r</td><td>回车</td><td>(u000D)</td></tr><tr><td>o</td><td>NUL字符</td><td>(u0000)</td></tr><tr><td>t</td><td>制表符</td><td>(u0009)</td></tr><tr><td>v</td><td>垂直制表符</td><td>(u000B)</td></tr><tr><td>xnn</td><td>由十六进制数nn指定的拉丁字符</td><td>x0A等价于n</td></tr><tr><td>uxxxx</td><td>由十六进行xxxx指定的Unicode字符</td><td>u0009等价与t</td></tr><tr><td>cX    控制字符(X的值必须是A-Z或a-z)</td><td>cJ等价于换行符n</td><td></td></tr></tbody></table><h1 id="字符类-Character-Classes"><a href="#字符类-Character-Classes" class="headerlink" title="字符类( Character Classes )"></a>字符类( Character Classes )</h1><table><thead><tr><th>字符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>[xyz]</td><td>匹配位于括号内的任意字符</td><td>[abc]匹配’plain’中的a</td></tr><tr><td>[^xyz]</td><td>匹配不在括号之中的任意字符    [^abc]</td><td>匹配’plain’中的p</td></tr><tr><td>w</td><td>等价于[a-zA-Z0-9_]</td><td>w匹配’sina’中的s</td></tr><tr><td>W</td><td>等价于[^a-zA-Z0-9_]</td><td>w不能匹配’sina’</td></tr><tr><td>s</td><td>任何Unicode空白符</td><td>[ fnrtv]</td></tr><tr><td>S</td><td>任何非空白字符</td><td>[^ fnrtv]</td></tr><tr><td>d</td><td>等价于[0-9]</td><td>d匹配’sina123’中的1</td></tr><tr><td>D</td><td>等价于[^0-9]</td><td>D不能匹配’sina1’中的1</td></tr><tr><td>[b]</td><td>退格直接量(特例)</td><td></td></tr></tbody></table><h1 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h1><table><thead><tr><th>字符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>{n,m}</td><td>匹配至少n次,但不超过m次,n和m必须是非负整数,且n&lt;=m</td><td><code>/\d&#123;4,6&#125;/</code>匹配4-6位0-9的数字</td></tr><tr><td>{n,}</td><td>匹配至少n次    o{2,}</td><td>不匹配’Bob’中的’o’,但匹配’food’中的 o.</td></tr><tr><td>{n}</td><td>恰好匹配n次    o{2}</td><td>不匹配’Bob’中的’o’,但匹配’food’中的o.</td></tr><tr><td>?</td><td>匹配0次或1次,等价于{0,1}</td><td>zo? 匹配 “z” and “zo”, 但不匹配”zoo”.</td></tr></tbody></table><ul><li>|         匹配1次或多次,等价于{1,} |     zo+ 匹配 “zo” and “zoo”, 但不匹配 “z”.</li></ul><ul><li>|         匹配0次或多次,等价于{0,} |     zo* 匹配 “z” 和 “zoo”.</li></ul><h1 id="非贪婪的重复"><a href="#非贪婪的重复" class="headerlink" title="非贪婪的重复"></a>非贪婪的重复</h1><p>当？紧跟在其他限制符（*,+,?,{n},{n,},{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式是尽可能少的匹配所搜索的字符串。例如字符串”ooooo”,”o+?”将匹配单个”o”,而o+匹配所有o</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;正则表达式的特点是：1. 灵活性、逻辑性和功能性非常的强；2. 可以迅速地用极简单的方式达到字符串的复杂控制。3. 对于刚接触的人来说，比较晦涩难懂。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://colorfulworld.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>脚手架集成</title>
    <link href="https://colorfulworld.github.io/%E8%84%9A%E6%89%8B%E6%9E%B6%E9%9B%86%E6%88%90/"/>
    <id>https://colorfulworld.github.io/%E8%84%9A%E6%89%8B%E6%9E%B6%E9%9B%86%E6%88%90/</id>
    <published>2019-08-08T06:33:47.000Z</published>
    <updated>2021-05-13T14:06:04.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么需要脚手架？"><a href="#为什么需要脚手架？" class="headerlink" title="为什么需要脚手架？"></a>为什么需要脚手架？</h2><p>1、减少重复性的工作，不再需要复制其他项目再删除无关代码，或者从零创建一个项目和文件 。<br>2、根据交互动态生成项目结构和配置文件,具备更高的灵活性和人性化定制的能力 。<br>3、多人协作更为方便，避免了人工传递文件的繁琐。<br>4、集成互联网上的模板，方便自己与他人使用。</p><span id="more"></span><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>开发脚手架可以借鉴 vue-cli 的基本思路。vue-cli 是将项目模板放在 git 上，运行的时候再根据用户交互下载不同的模板，经过模板引擎渲染出来，生成项目。这样讲脚手架和模板分离，就可以各自维护，即使模板有所变动，只需要上传最新的模板即可，而不需要用户去更新脚手架就可以生成最新的项目。</p><h2 id="脚手架工作流"><a href="#脚手架工作流" class="headerlink" title="脚手架工作流"></a>脚手架工作流</h2><p><img src="https://image-static.segmentfault.com/409/200/409200816-5ab3668b4996f_articlex" alt="network"></p><h2 id="脚手架问答流"><a href="#脚手架问答流" class="headerlink" title="脚手架问答流"></a>脚手架问答流</h2><pre><code>PS D:\test&gt; vue create demo1</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, Vuex, CSS Pre-processors, Linter</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback in production) Yes</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less</span><br><span class="line">? Pick a linter &#x2F; formatter config: Basic</span><br><span class="line">? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)Lint on save</span><br><span class="line">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In package.json</span><br><span class="line">? Save this as a preset for future projects? Yes</span><br><span class="line">? Save preset as: preset1</span><br><span class="line"></span><br><span class="line">📄  Generating README.md...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">🎉  Successfully created project demo1.</span><br><span class="line">👉  Get started with the following commands:</span><br></pre></td></tr></table></figure><h2 id="如何搭建一个脚手架？"><a href="#如何搭建一个脚手架？" class="headerlink" title="如何搭建一个脚手架？"></a>如何搭建一个脚手架？</h2><p><img src="/images/cli/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9E%84%E5%BB%BA%E6%B5%81%E7%A8%8B.png" alt="network"></p><h2 id="第三方库的支持"><a href="#第三方库的支持" class="headerlink" title="第三方库的支持"></a>第三方库的支持</h2><p><img src="/images/cli/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%94%AF%E6%8C%81.png" alt="network"></p><p>会使用到的第三方库</p><ul><li>commander.js:可以自动解析命令和参数，用于处理用户输入的命令</li><li>download-git-repo:下载并提取 git 仓库，用于下载项目模板</li><li>inquirer.js:通过命令行用户界面集合，用于和用户进行交互</li><li>handlebars.js:模板引擎，将用户提交的信息动态填充到文件中</li><li>ora:下载过程久的话，可以用于显示下载中的动画效果</li><li>chalk:可以给终端的字体加上颜色</li><li>log-symbols:可以在终端上显示 √ 或 × 等图标</li></ul><h2 id="搭建步骤："><a href="#搭建步骤：" class="headerlink" title="搭建步骤："></a>搭建步骤：</h2><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>首先创建一个空项目，命名为 mbs-cli，然后新建一个 bin/mbs 文件，再执行 npm init 生成一个 package.json 文件。最后安装上面需要用到的依赖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install commander download-git-repo inquirer handlebars ora chalk log-symbols cli-table -S</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="处理命令行"><a href="#处理命令行" class="headerlink" title="处理命令行"></a>处理命令行</h3><p>node.js 内置了对命令行操作的支持，在 package.json 中的 bin 字段可以定义命令名和关联的执行文件。</p><p>在 package.json 中加上 bin 的内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: “mbs-cli<span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span>version<span class="string">&quot;: &quot;</span><span class="number">1.0</span><span class="number">.0</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">    &quot;</span>description<span class="string">&quot;: &quot;</span>中后台系统脚手架<span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span>bin<span class="string">&quot;: &#123;</span></span><br><span class="line"><span class="string">&quot;</span>mbs<span class="string">&quot;: &quot;</span>bin/mbs<span class="string">&quot;</span></span><br><span class="line"><span class="string">     &#125;</span></span><br><span class="line"><span class="string"> &#125;</span></span><br></pre></td></tr></table></figure><p>首先在 mbs 文件 中引入相关依赖模块：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; existsSync &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>) <span class="comment">//系统内置模块 主要用来操作文件</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>) <span class="comment">//自动的解析命令和参数，用于处理用户输入的命令。</span></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>) <span class="comment">//给终端的字体加上颜色。</span></span><br><span class="line"><span class="keyword">const</span> symbols = <span class="built_in">require</span>(<span class="string">&#x27;log-symbols&#x27;</span>) <span class="comment">//在终端上显示出 √ 或 × 等的图标。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="function">(<span class="params">command</span>) =&gt;</span> resolve(__dirname, <span class="string">&#x27;../commands/&#x27;</span>, command)</span><br></pre></td></tr></table></figure><h3 id="配置-usr-bin-env-node-的作用"><a href="#配置-usr-bin-env-node-的作用" class="headerlink" title="配置 !/usr/bin/env node 的作用"></a>配置 !/usr/bin/env node 的作用</h3><p>指定用 node 执行脚本文件 ,usr/bin/env 解决了不同的用户 node 路径不同的问题，可以让系统动态的去查找 node 来执行你的脚本文件。</p><h2 id="nodejs-依赖模块介绍与用法"><a href="#nodejs-依赖模块介绍与用法" class="headerlink" title="nodejs 依赖模块介绍与用法"></a>nodejs 依赖模块介绍与用法</h2><h3 id="commander（指挥官）"><a href="#commander（指挥官）" class="headerlink" title="commander（指挥官）"></a>commander（指挥官）</h3><p>自动地解析命令和参数，用于处理用户输入的命令。</p><ul><li><p>usage(): 设置 usage 值</p></li><li><p>command(): 定义一个命令名字</p></li><li><p>description(): 设置 description 值</p></li><li><p>option(): 定义参数，需要设置“关键字”和“描述”，关键字包括“简写”和“全写”两部分，以”,”,”|”,”空格”做分隔。</p></li><li><p>parse(): 解析命令行参数 argv</p></li><li><p>action(): 注册一个 callback 函数</p></li><li><p>version() : 终端输出版本号</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PS D:\yameiproject\mbs-cli&gt; mbs --help</span><br><span class="line">Usage: mbs &lt;command&gt;</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -V, --version  output the version number</span><br><span class="line">  -h, --help     output usage information</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  add|a          Add a <span class="keyword">new</span> template</span><br><span class="line">  init|i         Generate a <span class="keyword">new</span> project</span><br><span class="line">  init|ins       Generate a simple project</span><br><span class="line">  create|c       Generate a <span class="keyword">new</span> project</span><br><span class="line">  list|l         List all the templates</span><br></pre></td></tr></table></figure><p>定义常规命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>) <span class="comment">//自动的解析命令和参数，用于处理用户输入的命令。</span></span><br><span class="line"></span><br><span class="line">program.usage(<span class="string">&#x27;&lt;command&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">program.version(<span class="built_in">require</span>(<span class="string">&#x27;../package&#x27;</span>).version)</span><br></pre></td></tr></table></figure><p>init 命令逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">  .command(<span class="string">&#x27;init &lt;name&gt;&#x27;</span>)</span><br><span class="line">  .description(<span class="string">&#x27;Generate a new project&#x27;</span>)</span><br><span class="line">  .alias(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!existsSync(name)) &#123;</span><br><span class="line">      <span class="built_in">require</span>(res(<span class="string">&#x27;init&#x27;</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 错误提示项目已存在，避免覆盖原有项目</span></span><br><span class="line">      <span class="built_in">console</span>.log(symbols.error, chalk.red(<span class="string">&#x27;Project already exists&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>处理用户输入命令：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">  .command(<span class="string">&#x27;init &lt;name&gt;&#x27;</span>)</span><br><span class="line">  .description(<span class="string">&#x27;Generate a new project&#x27;</span>)</span><br><span class="line">  .alias(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!existsSync(name)) &#123;</span><br><span class="line">      <span class="built_in">require</span>(res(<span class="string">&#x27;init&#x27;</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 错误提示项目已存在，避免覆盖原有项目</span></span><br><span class="line">      <span class="built_in">console</span>.log(symbols.error, chalk.red(<span class="string">&#x27;Project already exists&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>最后处理解析命令行参数 ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">program.parse(process.argv)</span><br><span class="line"></span><br><span class="line"><span class="comment">//process:一个全局对象,控制有关信息，控制node.js的进程</span></span><br><span class="line"><span class="comment">//program.parse:解析命令之中的参数，根据上面定义好的规则执行相关命令</span></span><br><span class="line"><span class="comment">//process.argv:该属性返回一个数组,这个数组包含了启动node.js进程时的命令行参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!program.args.length) &#123;</span><br><span class="line">  program.help()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="inquirer（询问者）"><a href="#inquirer（询问者）" class="headerlink" title="inquirer（询问者）"></a>inquirer（询问者）</h3><p>通用的命令行用户界面集合，用于和用户进行交互。由于交互的问题种类不同，inquirer 为每个问题提供很多参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type：表示提问的类型，包括：input, confirm, list, rawlist, expand, checkbox, password, editor；</span><br><span class="line">name: 存储当前问题回答的变量；</span><br><span class="line">message：问题的描述；</span><br><span class="line">default：默认值；</span><br><span class="line">choices：列表选项，在某些type下可用，并且包含一个分隔符(separator)；</span><br><span class="line">validate：对用户的回答进行校验；</span><br><span class="line">filter：对用户的回答进行过滤处理，返回处理后的值；</span><br><span class="line">when：根据前面问题的回答，判断当前问题是否需要被回答；</span><br><span class="line">prefix：修改message默认前缀；</span><br><span class="line">suffix：修改message默认后缀。</span><br></pre></td></tr></table></figure><p>语法结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">&#x27;inquirer&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promptList = [</span><br><span class="line">  <span class="comment">// 具体交互内容</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">inquirer.prompt(promptList).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(answers) <span class="comment">// 返回的结果</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>input 类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">&#x27;inquirer&#x27;</span>);</span><br><span class="line">inquirer.prompt([</span><br><span class="line">    &#123;</span><br><span class="line">        type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;请输入作者名称&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(answers.author);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">效果：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：</p><p>confirm 类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promptList = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;confirm&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;是否使用监听？&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;watch&#x27;</span>,</span><br><span class="line">    prefix: <span class="string">&#x27;前缀&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;confirm&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;是否进行文件过滤？&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;filter&#x27;</span>,</span><br><span class="line">    suffix: <span class="string">&#x27;后缀&#x27;</span>,</span><br><span class="line">    when: <span class="function"><span class="keyword">function</span> (<span class="params">answers</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 当watch为true的时候才会提问当前问题</span></span><br><span class="line">      <span class="keyword">return</span> answers.watch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>效果：</p><p>list 类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promptList = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;请选择一种水果:&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;fruit&#x27;</span>,</span><br><span class="line">    choices: [<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Pear&#x27;</span>, <span class="string">&#x27;Banana&#x27;</span>],</span><br><span class="line">    filter: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 使用filter将回答变为小写</span></span><br><span class="line">      <span class="keyword">return</span> val.toLowerCase()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>效果：</p><h3 id="download-git-repo"><a href="#download-git-repo" class="headerlink" title="download-git-repo"></a>download-git-repo</h3><p>download-git-repo 支持从 Github、Gitlab 和 Bitbucket 下载仓库，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download(repository, destination, options, callback)</span><br></pre></td></tr></table></figure><p>repository</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- GitHub - github:owner&#x2F;name or simply owner&#x2F;name</span><br><span class="line">- GitLab - gitlab:owner&#x2F;name</span><br><span class="line">- Bitbucket - bitbucket:owner&#x2F;name</span><br><span class="line">- Direct - direct:url:branch</span><br></pre></td></tr></table></figure><p>destination</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The file path to download the repository to. xxxxxxxxxx </span><br></pre></td></tr></table></figure><p>options</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean default false - If true use git clone instead of an http download. While this can be a bit slower, it does allow private repositories to be used if the appropriate SSH keys are setup.</span><br></pre></td></tr></table></figure><p>callback</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The callback function as function (err).</span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">download(&#39;direct:https:&#x2F;&#x2F;gitlab.com&#x2F;flipxfx&#x2F;download-git-repo-fixture&#x2F;repository&#x2F;archive.zip&#39;, &#39;test&#x2F;tmp&#39;, function (err) &#123;</span><br><span class="line">  console.log(err ? &#39;Error&#39; : &#39;Success&#39;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="ora-（loading-动效）"><a href="#ora-（loading-动效）" class="headerlink" title="ora （loading 动效）"></a>ora （loading 动效）</h3><p>用于显示下载中的动画效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">&#x27;ora&#x27;</span>)</span><br><span class="line"><span class="comment">// 开始下载</span></span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">&#x27;正在下载模板...&#x27;</span>)</span><br><span class="line">spinner.start()</span><br><span class="line"><span class="comment">// 下载失败调用</span></span><br><span class="line">spinner.fail()</span><br><span class="line"><span class="comment">// 下载成功调用</span></span><br><span class="line">spinner.succeed()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\ Downloading template...</span><br></pre></td></tr></table></figure><h3 id="chalk（字体颜色）"><a href="#chalk（字体颜色）" class="headerlink" title="chalk（字体颜色）"></a>chalk（字体颜色）</h3><p>通过 chalk 来为打印信息加上样式，比如成功信息为绿色，失败信息为红色，这样子会让用户更加容易分辨，同时也让终端的显示更加的好看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(chalk.green(<span class="string">&#x27;项目创建成功&#x27;</span>))</span><br><span class="line"><span class="built_in">console</span>.log(chalk.red(<span class="string">&#x27;项目创建失败&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">&#x27;ora&#x27;</span>)</span><br><span class="line"><span class="comment">// 开始下载</span></span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">&#x27;正在下载模板...&#x27;</span>)</span><br><span class="line">spinner.start()</span><br><span class="line"><span class="comment">// 下载失败调用</span></span><br><span class="line">spinner.fail()</span><br><span class="line"><span class="comment">// 下载成功调用</span></span><br><span class="line">spinner.succeed()</span><br></pre></td></tr></table></figure><h3 id="log-symbols（日志符号）"><a href="#log-symbols（日志符号）" class="headerlink" title="log-symbols（日志符号）"></a>log-symbols（日志符号）</h3><p>使用 log-symbols 在信息前面加上 √ 或 × 等的图标，优化视觉体验：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  symbols.success,</span><br><span class="line">  chalk.green(<span class="string">&#x27;New project has been initialize successfully!&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="handlebars"><a href="#handlebars" class="headerlink" title="handlebars"></a>handlebars</h2><p>handlebars 可以对仓库的模板中的 package.json 文件做一些动态修改 :</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&#123;&#123;name&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&#123;&#123;description&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server  --config build/webpack.dev.conf.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;npm run dev&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;node build/build.js&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&#123;&#123;author&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>并在下载模板完成之后将用户输入的答案渲染到 package.json 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileName = <span class="string">&#x27;./package.json;&#x27;</span></span><br><span class="line"><span class="keyword">const</span> meta = &#123;</span><br><span class="line">  name,</span><br><span class="line">  description: answers.description,</span><br><span class="line">  author: answers.author</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> content = readFileSync(fileName).toString()</span><br><span class="line"><span class="keyword">const</span> result = handlebars.compile(content)(meta)</span><br><span class="line">writeFileSync(fileName, result)</span><br></pre></td></tr></table></figure><h3 id="cli-table"><a href="#cli-table" class="headerlink" title="cli-table"></a>cli-table</h3><p>表格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> table = <span class="keyword">new</span> Table(&#123;</span><br><span class="line">  head: [<span class="string">&#x27;Template Name&#x27;</span>, <span class="string">&#x27;Branch&#x27;</span>, <span class="string">&#x27;Url&#x27;</span>],</span><br><span class="line">  style: &#123;</span><br><span class="line">    head: [<span class="string">&#x27;green&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="配置下载模板"><a href="#配置下载模板" class="headerlink" title="配置下载模板"></a>配置下载模板</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">download(<span class="string">&#x27;http://git.ym/g-web/mbs-cli.git#master&#x27;</span>, jay/$&#123;name&#125;, &#123;<span class="attr">clone</span>: <span class="literal">true</span>&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            spinner.fail();</span><br><span class="line">            <span class="built_in">console</span>.log(symbols.error, chalk.red(err));</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            spinner.succeed();</span><br><span class="line">            <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;name&#125;</span>/package.json`</span>;</span><br><span class="line">            <span class="keyword">const</span> meta = &#123;</span><br><span class="line">              name,</span><br><span class="line">              description: answers.description,</span><br><span class="line">              author: answers.author</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fs.existsSync(fileName))&#123;</span><br><span class="line">              <span class="keyword">const</span> content = fs.readFileSync(fileName).toString();</span><br><span class="line">              <span class="keyword">const</span> result = handlebars.compile(content)(meta);</span><br><span class="line">              fs.writeFileSync(fileName, result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(symbols.success, chalk.green(<span class="string">&#x27;Project initialization completed&#x27;</span>));</span><br><span class="line">          &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="命令行交互"><a href="#命令行交互" class="headerlink" title="命令行交互"></a>命令行交互</h3><p>命令行交互功能可以在用户执行 init 命令后，向用户提出问题，接收用户的输入并作出相应的处理。使用 inquirer.js 实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tplList = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> questions = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;project&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;Project name:&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">validate</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (val !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Project name is required!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;Please enter the author name:&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;Please enter a description of the project:&#x27;</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">&#x27;a project do for you&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;place&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;Where to init the project:&#x27;</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">&#x27;./&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = prompt(questions).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> spinner = ora(<span class="string">&#x27;Downloading template...&#x27;</span>)</span><br><span class="line">  spinner.start()</span><br><span class="line">  download(</span><br><span class="line">    <span class="string">`direct:<span class="subst">$&#123;tplList[<span class="string">&#x27;template1&#x27;</span>][<span class="string">&#x27;url&#x27;</span>]&#125;</span>#<span class="subst">$&#123;tplList[<span class="string">&#x27;template1&#x27;</span>][<span class="string">&#x27;branch&#x27;</span>]&#125;</span>`</span>,</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;answers.place&#125;</span>/<span class="subst">$&#123;answers.project&#125;</span>`</span>,</span><br><span class="line">    &#123; <span class="attr">clone</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    (err) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        spinner.fail()</span><br><span class="line">        <span class="built_in">console</span>.log(symbols.error, chalk.red(err))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        spinner.succeed()</span><br><span class="line">        <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;answers.project&#125;</span>/package.json`</span></span><br><span class="line">        <span class="keyword">const</span> meta = &#123;</span><br><span class="line">          name: answers.project,</span><br><span class="line">          description: answers.description,</span><br><span class="line">          author: answers.author</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(meta)</span><br><span class="line">        <span class="keyword">if</span> (existsSync(fileName)) &#123;</span><br><span class="line">          <span class="keyword">const</span> content = readFileSync(fileName).toString()</span><br><span class="line">          <span class="keyword">const</span> result = handlebars.compile(content)(meta)</span><br><span class="line">          writeFileSync(fileName, result)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          symbols.success,</span><br><span class="line">          chalk.green(<span class="string">&#x27;New project has been initialize successfully!&#x27;</span>)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h3><p>用 handlebars 的语法对 模板中的 package.json 文件做一些修改 ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;&#123;&#123;name&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&#123;&#123;description&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&#123;&#123;author&#125;&#125;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在下载模板完成之后将用户输入的答案渲染到 package.json 中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">  .version(<span class="string">&#x27;1.0.0&#x27;</span>, <span class="string">&#x27;-v, --version&#x27;</span>)</span><br><span class="line">  .command(<span class="string">&#x27;init &lt;name&gt;&#x27;</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    inquirer</span><br><span class="line">      .prompt([</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">          message: <span class="string">&#x27;请输入项目描述&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">          message: <span class="string">&#x27;请输入作者名称&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ])</span><br><span class="line">      .then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">        download(<span class="string">&#x27;xxxxx#master&#x27;</span>, name, &#123; <span class="attr">clone</span>: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> meta = &#123;</span><br><span class="line">            name,</span><br><span class="line">            description: answers.description,</span><br><span class="line">            author: answers.author</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;name&#125;</span>/package.json`</span></span><br><span class="line">          <span class="keyword">const</span> content = fs.readFileSync(fileName).toString()</span><br><span class="line">          <span class="keyword">const</span> result = handlebars.compile(content)(meta)</span><br><span class="line">          fs.writeFileSync(fileName, result)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这里使用了 node.js 的文件模块 fs，将 handlebars 渲染完后的模板重新写入到文件中。</p><h3 id="视觉美化"><a href="#视觉美化" class="headerlink" title="视觉美化"></a>视觉美化</h3><p>在用户输入答案之后，开始下载模板，这时候使用 ora 来提示用户正在下载中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const ora &#x3D; require(&#39;ora&#39;);</span><br><span class="line">&#x2F;&#x2F; 开始下载</span><br><span class="line">const spinner &#x3D; ora(&#39;正在下载模板...&#39;);</span><br><span class="line">spinner.start();</span><br><span class="line">&#x2F;&#x2F; 下载失败调用</span><br><span class="line">spinner.fail();</span><br><span class="line">&#x2F;&#x2F; 下载成功调用</span><br><span class="line">spinner.succeed();</span><br></pre></td></tr></table></figure><h2 id="简单版脚手架完整示例"><a href="#简单版脚手架完整示例" class="headerlink" title="简单版脚手架完整示例"></a>简单版脚手架完整示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);<span class="comment">//系统内置模块 主要用来操作文件</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>);<span class="comment">//自动的解析命令和参数，用于处理用户输入的命令。</span></span><br><span class="line"><span class="keyword">const</span> download = <span class="built_in">require</span>(<span class="string">&#x27;download-git-repo&#x27;</span>);<span class="comment">//下载并提取 git 仓库，用于下载项目模板。</span></span><br><span class="line"><span class="keyword">const</span> handlebars = <span class="built_in">require</span>(<span class="string">&#x27;handlebars&#x27;</span>);<span class="comment">//模板引擎，将用户提交的信息动态填充到文件中。</span></span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">&#x27;inquirer&#x27;</span>);<span class="comment">//通用的命令行用户界面集合，用于和用户进行交互。</span></span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">&#x27;ora&#x27;</span>);<span class="comment">//下载过程久的话，可以用于显示下载中的动画效果。</span></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>);<span class="comment">//给终端的字体加上颜色。</span></span><br><span class="line"><span class="keyword">const</span> symbols = <span class="built_in">require</span>(<span class="string">&#x27;log-symbols&#x27;</span>);<span class="comment">//在终端上显示出 √ 或 × 等的图标。</span></span><br><span class="line"></span><br><span class="line">program.version(<span class="string">&#x27;1.0.4&#x27;</span>, <span class="string">&#x27;-v, --version&#x27;</span>)</span><br><span class="line">  .command(<span class="string">&#x27;init &lt;name&gt;&#x27;</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!fs.existsSync(name))&#123;</span><br><span class="line">      inquirer.prompt([<span class="comment">//prompt 提示</span></span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">          message: <span class="string">&#x27;Please enter a description of the project:&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          name: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">          message: <span class="string">&#x27;Please enter the author name:&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> spinner = ora(<span class="string">&#x27;Downloading template...&#x27;</span>);</span><br><span class="line">        spinner.start();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 一级目录  name</span></span><br><span class="line"><span class="comment">         * 二级目录 jay/$&#123;name&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        download(<span class="string">&#x27;http://git.ym/g-web/mbs-cli.git#master&#x27;</span>, jay/$&#123;name&#125;, &#123;<span class="attr">clone</span>: <span class="literal">true</span>&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            spinner.fail();</span><br><span class="line">            <span class="built_in">console</span>.log(symbols.error, chalk.red(err));</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            spinner.succeed();</span><br><span class="line">            <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;name&#125;</span>/package.json`</span>;</span><br><span class="line">            <span class="keyword">const</span> meta = &#123;</span><br><span class="line">              name,</span><br><span class="line">              description: answers.description,</span><br><span class="line">              author: answers.author</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fs.existsSync(fileName))&#123;</span><br><span class="line">              <span class="keyword">const</span> content = fs.readFileSync(fileName).toString();</span><br><span class="line">              <span class="keyword">const</span> result = handlebars.compile(content)(meta);</span><br><span class="line">              fs.writeFileSync(fileName, result);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(symbols.success, chalk.green(<span class="string">&#x27;Project initialization completed&#x27;</span>));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">// 错误提示项目已存在，避免覆盖原有项目</span></span><br><span class="line">      <span class="built_in">console</span>.log(symbols.error, chalk.red(<span class="string">&#x27;Project already exists&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">program.parse(process.argv);</span><br></pre></td></tr></table></figure><h3 id="mbs-cli-核心命令"><a href="#mbs-cli-核心命令" class="headerlink" title="mbs-cli 核心命令"></a>mbs-cli 核心命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">  add|a             Add a <span class="keyword">new</span> template</span><br><span class="line">  list|l            List all the templates</span><br><span class="line">  init|i            Generate a <span class="keyword">new</span> project</span><br><span class="line">  create|c          Generate a <span class="keyword">new</span> project by choose a template</span><br><span class="line">  init simple|ins   Generate a simple project</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">  -h, --help     output usage information</span><br><span class="line">  -V, --version  output the version number</span><br></pre></td></tr></table></figure><h3 id="入口文件-mbs"><a href="#入口文件-mbs" class="headerlink" title="入口文件 mbs"></a>入口文件 mbs</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line">process.env.NODE_PATH = __dirname + <span class="string">&#x27;/../node_modules/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; existsSync &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> symbols = <span class="built_in">require</span>(<span class="string">&#x27;log-symbols&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">&#x27;commander&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res = <span class="function">(<span class="params">command</span>) =&gt;</span> resolve(__dirname, <span class="string">&#x27;../commands/&#x27;</span>, command)</span><br><span class="line"></span><br><span class="line">program.usage(<span class="string">&#x27;&lt;command&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">program.version(<span class="built_in">require</span>(<span class="string">&#x27;../package&#x27;</span>).version)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">  .description(<span class="string">&#x27;Add a new template&#x27;</span>)</span><br><span class="line">  .alias(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  .action(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(res(<span class="string">&#x27;add&#x27;</span>))</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">&#x27;init&#x27;</span>)</span><br><span class="line">  .description(<span class="string">&#x27;Generate a new project&#x27;</span>)</span><br><span class="line">  .alias(<span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">  .action(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(res(<span class="string">&#x27;init&#x27;</span>))</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">&#x27;create&#x27;</span>)</span><br><span class="line">  .description(<span class="string">&#x27;Generate a new project&#x27;</span>)</span><br><span class="line">  .alias(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">  .action(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(res(<span class="string">&#x27;create&#x27;</span>))</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">&#x27;list&#x27;</span>)</span><br><span class="line">  .description(<span class="string">&#x27;List all the templates&#x27;</span>)</span><br><span class="line">  .alias(<span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">  .action(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(res(<span class="string">&#x27;list&#x27;</span>))</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">program.parse(process.argv)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!program.args.length) &#123;</span><br><span class="line">  program.help() <span class="comment">//如果没有输入参数，终端显示帮助</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="init-命令"><a href="#init-命令" class="headerlink" title="init 命令"></a>init 命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tplList = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> questions = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;project&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;Project name:&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">validate</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (val !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Project name is required!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;author name:&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;description of the project:&#x27;</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">&#x27;a simple spa project&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;place&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;Where to init the project:&#x27;</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">&#x27;./&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = prompt(questions).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> spinner = ora(<span class="string">&#x27;Downloading template...&#x27;</span>)</span><br><span class="line">  spinner.start()</span><br><span class="line">  download(</span><br><span class="line">    <span class="string">`direct:<span class="subst">$&#123;tplList[<span class="string">&#x27;template1&#x27;</span>][<span class="string">&#x27;url&#x27;</span>]&#125;</span>#<span class="subst">$&#123;tplList[<span class="string">&#x27;template1&#x27;</span>][<span class="string">&#x27;branch&#x27;</span>]&#125;</span>`</span>,</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;answers.place&#125;</span>/<span class="subst">$&#123;answers.project&#125;</span>`</span>,</span><br><span class="line">    &#123; <span class="attr">clone</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    (err) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        spinner.fail()</span><br><span class="line">        <span class="built_in">console</span>.log(symbols.error, chalk.red(err))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        spinner.succeed()</span><br><span class="line">        <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;answers.project&#125;</span>/package.json`</span></span><br><span class="line">        <span class="keyword">const</span> meta = &#123;</span><br><span class="line">          name: answers.project,</span><br><span class="line">          description: answers.description,</span><br><span class="line">          author: answers.author</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(meta)</span><br><span class="line">        <span class="keyword">if</span> (existsSync(fileName)) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;come in...&#x27;</span>)</span><br><span class="line">          <span class="keyword">const</span> content = readFileSync(fileName).toString()</span><br><span class="line">          <span class="keyword">const</span> result = handlebars.compile(content)(meta)</span><br><span class="line">          writeFileSync(fileName, result)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          symbols.success,</span><br><span class="line">          chalk.green(<span class="string">&#x27;New project has been initialize successfully!&#x27;</span>)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="init-simple-命令"><a href="#init-simple-命令" class="headerlink" title="init simple 命令"></a>init simple 命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tplList = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> question = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;Please enter a description of the project:&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;Please enter the author name:&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = prompt(question).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> spinner = ora(<span class="string">&#x27;Downloading template...&#x27;</span>)</span><br><span class="line">  spinner.start()</span><br><span class="line">  download(</span><br><span class="line">    <span class="string">`direct:<span class="subst">$&#123;tplList[<span class="string">&#x27;template2&#x27;</span>][<span class="string">&#x27;url&#x27;</span>]&#125;</span>#<span class="subst">$&#123;tplList[<span class="string">&#x27;template2&#x27;</span>][<span class="string">&#x27;branch&#x27;</span>]&#125;</span>`</span>,</span><br><span class="line">    <span class="string">`./<span class="subst">$&#123;name&#125;</span>`</span>,</span><br><span class="line">    &#123; <span class="attr">clone</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    (err) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        spinner.fail()</span><br><span class="line">        <span class="built_in">console</span>.log(symbols.error, chalk.red(err))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        spinner.succeed()</span><br><span class="line">        <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;name&#125;</span>/package.json`</span></span><br><span class="line">        <span class="keyword">const</span> meta = &#123;</span><br><span class="line">          name,</span><br><span class="line">          description: answers.description,</span><br><span class="line">          author: answers.author</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (existsSync(fileName)) &#123;</span><br><span class="line">          <span class="keyword">const</span> content = readFileSync(fileName).toString()</span><br><span class="line">          <span class="keyword">const</span> result = handlebars.compile(content)(meta)</span><br><span class="line">          writeFileSync(fileName, result)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          symbols.success,</span><br><span class="line">          chalk.green(<span class="string">&#x27;Project initialization completed&#x27;</span>)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="create-命令"><a href="#create-命令" class="headerlink" title="create 命令"></a>create 命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> templateList = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class="line"><span class="keyword">let</span> rmTempList = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../config/remote-templates`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> choices = rmTempList.map(<span class="function">(<span class="params">template</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name: <span class="string">`<span class="subst">$&#123;template.name&#125;</span> - <span class="subst">$&#123;template.description&#125;</span>`</span>,</span><br><span class="line">    value: template.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> questions = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;project&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;Project name:&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">validate</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (val !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Project name is required!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;template&#x27;</span>,</span><br><span class="line">    choices,</span><br><span class="line">    message: <span class="string">&#x27;Choose template you want:&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">validate</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (val !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;template name is required!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;author&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;author name:&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;description of the project:&#x27;</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;place&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;Where to init the project:&#x27;</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="string">&#x27;./&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = prompt(questions).then(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> spinner = ora(<span class="string">&#x27;Downloading template...&#x27;</span>)</span><br><span class="line">  spinner.start()</span><br><span class="line">  <span class="keyword">const</span> template = rmTempList.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> answers.template.includes(item.name) &amp;&amp; item</span><br><span class="line">  &#125;)[<span class="number">0</span>]</span><br><span class="line">  download(</span><br><span class="line">    <span class="string">`direct:<span class="subst">$&#123;template.url&#125;</span>#<span class="subst">$&#123;template.branch&#125;</span>`</span>,</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;answers.place&#125;</span>/<span class="subst">$&#123;answers.project&#125;</span>`</span>,</span><br><span class="line">    &#123; <span class="attr">clone</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    (err) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        spinner.fail()</span><br><span class="line">        <span class="built_in">console</span>.log(symbols.error, chalk.red(err))</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        spinner.succeed()</span><br><span class="line">        <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;answers.project&#125;</span>/package.json`</span></span><br><span class="line">        <span class="keyword">const</span> meta = &#123;</span><br><span class="line">          name: answers.project,</span><br><span class="line">          description: answers.description,</span><br><span class="line">          author: answers.author</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(meta)</span><br><span class="line">        <span class="keyword">if</span> (existsSync(fileName)) &#123;</span><br><span class="line">          <span class="keyword">const</span> content = readFileSync(fileName).toString()</span><br><span class="line">          <span class="keyword">const</span> result = handlebars.compile(content)(meta)</span><br><span class="line">          writeFileSync(fileName, result)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          symbols.success,</span><br><span class="line">          chalk.green(<span class="string">&#x27;New project has been initialize successfully!&#x27;</span>)</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ mbs create</span><br><span class="line"></span><br><span class="line">? Project name: demo</span><br><span class="line">? Choose template you want: (Use arrow keys)</span><br><span class="line">&gt; vue-webpack-pc - 基于webpack构建的vue项目模板</span><br><span class="line">  react-webpack-pc - 基于webpack构建的react项目模板</span><br><span class="line">  angular-webpack-pc - 基于webpack构建的angular项目模板</span><br><span class="line">  discover your template - 更多海量模板等你发掘与收藏.</span><br><span class="line">? Choose template you want: vue-webpack-pc - 基于webpack构建的vue项目模板</span><br><span class="line">? Please enter the author name: jay</span><br><span class="line">? Please enter a description of the project: a simple spa project</span><br><span class="line">? Where to init the project: .&#x2F;</span><br><span class="line">√ Downloading template...</span><br><span class="line">√ New project has been initialize successfully!</span><br></pre></td></tr></table></figure><h3 id="add-命令"><a href="#add-命令" class="headerlink" title="add 命令"></a>add 命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; prompt &#125; = <span class="built_in">require</span>(<span class="string">&#x27;inquirer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; writeFile &#125; = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; showTable &#125; = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../utils`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tempList = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> question = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;Set the custom name of the template:&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">validate</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (tempList[val]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Template is existed!&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val === <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Name is required!&#x27;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;branch&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;branch of the template:&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">validate</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (val !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;branch is required!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;url&#x27;</span>,</span><br><span class="line">    message: <span class="string">&#x27;Url of the template:&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="title">validate</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (val !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Url is required!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = prompt(question).then(<span class="function">(<span class="params">&#123; name, branch, url &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  tempList[name] = &#123;&#125;</span><br><span class="line">  tempList[name][<span class="string">&#x27;branch&#x27;</span>] = branch</span><br><span class="line">  tempList[name][<span class="string">&#x27;url&#x27;</span>] = url</span><br><span class="line"></span><br><span class="line">  writeFile(</span><br><span class="line">    <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../templates.json`</span>,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(tempList),</span><br><span class="line">    <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">    (err) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">      &#125;</span><br><span class="line">      showTable(tempList, <span class="string">&#x27;New template has been added successfully!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ mbs add</span><br><span class="line"></span><br><span class="line">? Set the custom name of the template: template1</span><br><span class="line">? branch of the template: master</span><br><span class="line">? Url of the template: http:&#x2F;&#x2F;git.ym&#x2F;Chenmh&#x2F;bs-init-template.git</span><br><span class="line">┌───────────────┬────────┬───────────────────────────────────────────┐</span><br><span class="line">│ Template Name │ Branch │ Url                                       │</span><br><span class="line">├───────────────┼────────┼───────────────────────────────────────────┤</span><br><span class="line">│ template1     │ master │ http:&#x2F;&#x2F;git.ym&#x2F;Chenmh&#x2F;bs-init-template.git │</span><br><span class="line">└───────────────┴────────┴───────────────────────────────────────────┘</span><br><span class="line">✔ New template has been added successfully!</span><br></pre></td></tr></table></figure><p><code>mbs</code> use <a href="https://github.com/flipxfx/download-git-repo">download-git-repo</a> to down load git repos. After answering 3 questions, you’ll add a new template to <code>mbs</code>.</p><h3 id="list-命令"><a href="#list-命令" class="headerlink" title="list 命令"></a>list 命令</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; showTable &#125; = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../utils`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tempList = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../templates`</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = showTable(tempList)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTable</span>(<span class="params">tempList</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> list = <span class="built_in">Object</span>.keys(tempList)</span><br><span class="line">  <span class="keyword">if</span> (list.length) &#123;</span><br><span class="line">    list.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      table.push([key, tempList[key][<span class="string">&#x27;branch&#x27;</span>], tempList[key][<span class="string">&#x27;url&#x27;</span>]])</span><br><span class="line">      <span class="keyword">if</span> (table.length === list.length) &#123;</span><br><span class="line">        process.exit()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(table.toString())</span><br><span class="line">    process.exit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ mbs list</span><br><span class="line"></span><br><span class="line">┌───────────────┬──────────┬───────────────────────────────────────────┐</span><br><span class="line">│ Template Name │ Branch   │ Url                                       │</span><br><span class="line">├───────────────┼──────────┼───────────────────────────────────────────┤</span><br><span class="line">│ template1     │ standard │ http:&#x2F;&#x2F;git.ym&#x2F;Chenmh&#x2F;bs-init-template.git │</span><br><span class="line">├───────────────┼──────────┼───────────────────────────────────────────┤</span><br><span class="line">│ template2     │ simple   │ http:&#x2F;&#x2F;git.ym&#x2F;Chenmh&#x2F;bs-init-template.git │</span><br><span class="line">└───────────────┴──────────┴───────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>utils.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Table = <span class="built_in">require</span>(<span class="string">&#x27;cli-table&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">&#x27;chalk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> table = <span class="keyword">new</span> Table(&#123;</span><br><span class="line">  head: [<span class="string">&#x27;Template Name&#x27;</span>, <span class="string">&#x27;Branch&#x27;</span>, <span class="string">&#x27;Url&#x27;</span>],</span><br><span class="line">  style: &#123;</span><br><span class="line">    head: [<span class="string">&#x27;green&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showTable</span>(<span class="params">tempList, Exp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> list = <span class="built_in">Object</span>.keys(tempList)</span><br><span class="line">  <span class="keyword">if</span> (list.length) &#123;</span><br><span class="line">    list.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      table.push([key, tempList[key][<span class="string">&#x27;branch&#x27;</span>], tempList[key][<span class="string">&#x27;url&#x27;</span>]])</span><br><span class="line">      <span class="keyword">if</span> (table.length === list.length) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(table.toString())</span><br><span class="line">        <span class="keyword">if</span> (Exp) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(chalk.green(<span class="string">`\u2714 <span class="subst">$&#123;Exp&#125;</span>`</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        process.exit()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(table.toString())</span><br><span class="line">    <span class="keyword">if</span> (Exp) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(chalk.green(<span class="string">`\u2714 <span class="subst">$&#123;Exp&#125;</span>`</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    process.exit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.showTable = showTable</span><br></pre></td></tr></table></figure><p>#脚手架发布</p><h3 id="npm-登录"><a href="#npm-登录" class="headerlink" title="npm 登录"></a>npm 登录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS D:\yameiproject\mbs-cli&gt; npm login</span><br><span class="line">Username: chenyumen</span><br><span class="line">Password:</span><br><span class="line">Email: (this IS public) 13172050157@126.com</span><br><span class="line">Logged in as chenyumen on https:&#x2F;&#x2F;registry.npmjs.org&#x2F;.</span><br></pre></td></tr></table></figure><h3 id="npm-发布"><a href="#npm-发布" class="headerlink" title="npm 发布"></a>npm 发布</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PS D:\yameiproject\mbs-cli&gt; npm publish</span><br><span class="line">npm notice</span><br><span class="line">npm notice package: mbs-cli@1.0.4</span><br><span class="line">npm notice &#x3D;&#x3D;&#x3D; Tarball Contents &#x3D;&#x3D;&#x3D;</span><br><span class="line">npm notice 573B  package.json</span><br><span class="line">npm notice 2.5kB index.js</span><br><span class="line">npm notice 193B  脚手架.md</span><br><span class="line">npm notice &#x3D;&#x3D;&#x3D; Tarball Details &#x3D;&#x3D;&#x3D;</span><br><span class="line">npm notice name:          mbs-cli</span><br><span class="line">npm notice version:       1.0.4</span><br><span class="line">npm notice package size:  1.8 kB</span><br><span class="line">npm notice total files:   3</span><br><span class="line">npm notice</span><br><span class="line">+ mbs-cli@1.0.4</span><br></pre></td></tr></table></figure><h2 id="本地-npm-模块调试"><a href="#本地-npm-模块调试" class="headerlink" title="本地 npm 模块调试"></a>本地 npm 模块调试</h2><h3 id="开启调试模式"><a href="#开启调试模式" class="headerlink" title="开启调试模式"></a>开启调试模式</h3><p><code>npm link</code>命令可以将一个任意位置的<code>npm包</code>链接到全局执行环境，从而在任意位置使用命令行都可以直接运行该 npm 包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\yamei\AppData\Roaming\npm\mbs -&gt; C:\Users\yamei\AppData\Roaming\npm\node_modules\mbs-cli\bin\mbs</span><br><span class="line">C:\Users\yamei\AppData\Roaming\npm\node_modules\mbs-cli -&gt; D:\yameiproject\mbs-cli</span><br></pre></td></tr></table></figure><h3 id="关闭调试模式"><a href="#关闭调试模式" class="headerlink" title="关闭调试模式"></a>关闭调试模式</h3><p>如果你的项目不再需要该模块，可以在项目目录内使用 npm unlink 命令，删除符号链接</p><h2 id="延申"><a href="#延申" class="headerlink" title="延申"></a>延申</h2><p>1、丰富命令行交互，以适应更多变的需求。</p><p>2、webpack 配置文件隐藏优化。</p><h2 id="模板集成常用功能"><a href="#模板集成常用功能" class="headerlink" title="模板集成常用功能"></a>模板集成常用功能</h2><ul><li>登录、注销</li><li>DashBord</li><li>表格</li><li>Tab 选项卡</li><li>图表</li><li>富文本编辑器</li><li>三级菜单</li><li>国际化</li><li>图片拖拽、裁剪上传</li><li>列表拖拽排序</li><li>权限管理</li><li>404/403/500</li></ul><h2 id="模板项目结构"><a href="#模板项目结构" class="headerlink" title="模板项目结构"></a>模板项目结构</h2><p>├── build 构建服务和 webpack 配置<br>|—— build.js webpack 打包服务<br>|—— webpack.base.conf.js webpack 基本通用配置<br>|—— webpack.dev.conf.js webpack 开发环境配置<br>|—— webpack.prod.conf.js webpack 生产环境配置<br>├── config 构建项目不同环境的配置<br>├── public 项目打包文件存放目录<br>├── index.html 项目入口文件<br>├── package.json 项目配置文件<br>├── .babelrc babel 配置文件<br>├── .gitignore git 忽略文件<br>├── postcss.config.js postcss 配置文件<br>├── src 项目目录<br>├── assets 静态资源<br> ├── components 集成组件目录<br> |—— json json 目录<br>|—— lang 中英文目录<br>|—— router vue 路由配置<br>|—— service ajax 请求配置<br>|—— store vuex 配置<br>|—— styles 公共样式<br>|—— utils 工具类<br>|—— views 页面组件目录<br>|—— App.vue vue 实例入口<br>|—— main.js 项目构建入口</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;为什么需要脚手架？&quot;&gt;&lt;a href=&quot;#为什么需要脚手架？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要脚手架？&quot;&gt;&lt;/a&gt;为什么需要脚手架？&lt;/h2&gt;&lt;p&gt;1、减少重复性的工作，不再需要复制其他项目再删除无关代码，或者从零创建一个项目和文件 。&lt;br&gt;2、根据交互动态生成项目结构和配置文件,具备更高的灵活性和人性化定制的能力 。&lt;br&gt;3、多人协作更为方便，避免了人工传递文件的繁琐。&lt;br&gt;4、集成互联网上的模板，方便自己与他人使用。&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://colorfulworld.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript动态规划和贪心算法</title>
    <link href="https://colorfulworld.github.io/JavaScript%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%92%8C%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>https://colorfulworld.github.io/JavaScript%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%92%8C%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</id>
    <published>2019-07-24T01:58:16.000Z</published>
    <updated>2021-05-06T12:22:09.894Z</updated>
    
    <content type="html"><![CDATA[<p>自从做了一个树的深度搜索、广度查询、树的之后，我就深刻的意识到自己对算法和数据结构一无所知，做出来的方案总感觉不是最优解。</p><span id="more"></span><p>这里记录两种常用的算法：动态规划和贪心算法。动态规划常被人比作是递归的逆过程，而贪心算法在很多求有问题上，是不二之选。</p><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><p>动态规划为什么会被认为是递归相反的技术呢，是因为递归是从顶部开始将问题分解，通过解决掉所有小问题的方式，来解决整个问题，动态规划是从底部开始解决问题，将所有小问题解决掉，然后合并成整个大的问题。</p><p>递归算法写法简单但是效率并不高。</p><h2 id="斐波拉契数列"><a href="#斐波拉契数列" class="headerlink" title="斐波拉契数列"></a>斐波拉契数列</h2><p>斐波拉契数列 定义为一下序列：0,1,1,2,3,5,8,13,21,34,55</p><p>公式为：n&gt;=2,a<sub>n</sub> = a<sub>n-1</sub>+a <sub>n-2</sub>,这个序列是用来描述在理想状况下兔子的增长情况。</p><p>若是用递归实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibo</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fibo(n - <span class="number">1</span>) + fibo(n - <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种实现方式非常耗性能，在 n 的数量级到达千级别就会变得特别慢，甚至失去响应。</p><p>优化方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibo</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">0</span>,</span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    b = a + b</span><br><span class="line">    a = b - a</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="寻找最长公共子串"><a href="#寻找最长公共子串" class="headerlink" title="寻找最长公共子串"></a>寻找最长公共子串</h2><p>例如在 hello 和 wellcome 中最长子串是 ell</p><p>一种暴力的办法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxSubString</span>(<span class="params">str1, str2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!str1 || !str2) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">var</span> len1 = str1.length,</span><br><span class="line">    len2 = str2.length</span><br><span class="line">  <span class="keyword">var</span> maxSubStr = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len1; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len2; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> tempStr = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        k = <span class="number">0</span></span><br><span class="line">      <span class="keyword">while</span> (i + k &lt; len1 &amp;&amp; j + k &lt; len2 &amp;&amp; str1[i + k] === str2[j + k]) &#123;</span><br><span class="line">        tempStr += str1[i + k]</span><br><span class="line">        k++</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (tempStr.length &gt; maxSubStr.length) &#123;</span><br><span class="line">        maxSubStr = tempStr</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> maxSubStr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且上面不考虑多个一样长的情况吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findSubStr</span>(<span class="params">str1, str2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (str1.length &gt; str2.length) &#123;</span><br><span class="line">    <span class="keyword">var</span> temp = str1</span><br><span class="line">    str1 = str2</span><br><span class="line">    str2 = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> len1 = str1.length,</span><br><span class="line">    len2 = str2.length</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = len1; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len1 - j; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> current = str1.substr(i, j)</span><br><span class="line">      <span class="keyword">if</span> (str2.indexOf(current) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> current</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(findSubStr(<span class="string">&#x27;aaa3333&#x27;</span>, <span class="string">&#x27;baa333cc&#x27;</span>)) <span class="comment">// aa333</span></span><br><span class="line"><span class="built_in">console</span>.log(findSubStr(<span class="string">&#x27;aaaX3333--&#x27;</span>, <span class="string">&#x27;baa333ccX3333333x&#x27;</span>)) <span class="comment">// X3333</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;自从做了一个树的深度搜索、广度查询、树的之后，我就深刻的意识到自己对算法和数据结构一无所知，做出来的方案总感觉不是最优解。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://colorfulworld.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack打包优化</title>
    <link href="https://colorfulworld.github.io/webpack%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/"/>
    <id>https://colorfulworld.github.io/webpack%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/</id>
    <published>2019-07-22T07:37:14.000Z</published>
    <updated>2021-04-13T12:53:02.916Z</updated>
    
    <content type="html"><![CDATA[<p>webpack 的使用及优化</p><p>我们的目的</p><ul><li>减小打包后的文件大小</li><li>首页按需引入文件</li><li>优化 webpack 打包时间</li></ul><span id="more"></span><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>新建一个空文件夹，用于创建项目，使用 npm init 命令创建一个 package.json 文件。<br>输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，也可以使用 npm init -y 这个命令来一次生成 package.json 文件，这样终端不会询问你问题。</p><h2 id="安装-webpack"><a href="#安装-webpack" class="headerlink" title="安装 webpack"></a>安装 webpack</h2><p>安装 webapck 时把 webpack-cli 也装上是因为在 webpack4.x 版本后 webpack 模块把一些功能分到了 webpack-cli 模块，所以两者都需要安装，安装方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli --<span class="built_in">global</span>    <span class="comment">//这是安装全局webpack及webpack-cli模块</span></span><br><span class="line">npm install webpack webpack-cli --save-dev  <span class="comment">//这是安装本地项目模块</span></span><br></pre></td></tr></table></figure><h2 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h2><p>在根目录件夹中新建两个文件夹，分别为 src 文件夹和 dist 文件夹，接下来再创建三个文件:此时，项目结构如下</p><ul><li>index.html –放在 dist 文件夹中；</li><li>hello.js –放在 src 文件夹中；</li><li>index.js –放在 src 文件夹中；</li></ul><h3 id="index-html-中写下-html-代码，它的作用是为了引入我们打包后的-js-文件："><a href="#index-html-中写下-html-代码，它的作用是为了引入我们打包后的-js-文件：" class="headerlink" title="index.html 中写下 html 代码，它的作用是为了引入我们打包后的 js 文件："></a>index.html 中写下 html 代码，它的作用是为了引入我们打包后的 js 文件：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这是打包之后的js文件，我们暂时命名为bundle.js--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在-hello-js-中导出一个模块："><a href="#在-hello-js-中导出一个模块：" class="headerlink" title="在 hello.js 中导出一个模块："></a>在 hello.js 中导出一个模块：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hello = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  hello.innerHTML = <span class="string">&#x27;welcome to China!&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> hello</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-index-js-中引入这个模块（hello-js）"><a href="#在-index-js-中引入这个模块（hello-js）" class="headerlink" title="在 index.js 中引入这个模块（hello.js）:"></a>在 index.js 中引入这个模块（hello.js）:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">const</span> hello = <span class="built_in">require</span>(<span class="string">&#x27;./hello.js&#x27;</span>)</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;#root&#x27;</span>).appendChild(hello())</span><br></pre></td></tr></table></figure><p>上述操作就相当于我们把 hello.js 模块合并到了 index.js 模块，之后我们打包时就只需把 index.js 模块打包成 bundle.js 即可。</p><h3 id="进行最简单的-webpack-打包"><a href="#进行最简单的-webpack-打包" class="headerlink" title="进行最简单的 webpack 打包"></a>进行最简单的 webpack 打包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在终端中使用如下命令进行打包：</span></span><br><span class="line">webpack src/index.js --output dist/bundle.js</span><br></pre></td></tr></table></figure><p>上述就相当于把 src 文件夹下的 index.js 文件打包到 dist 文件下的 bundle.js，这时就生成了 bundle.js 供 index.html 文件引用。现在打开 index.html 就可以看到我们的页面了。</p><h2 id="配置-webpack-config-js"><a href="#配置-webpack-config-js" class="headerlink" title="配置 webpack.config.js"></a>配置 webpack.config.js</h2><p>上述打包方式太 low 了，我们可以在当前项目的根目录下新建一个配置文件 webpack.config.js 用来配置打包方式。<br>webpack.config.js 配置如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">// 处理绝对路径</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: path.join(__dirname, <span class="string">&#x27;/src/index.js&#x27;</span>), <span class="comment">// 入口文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">&#x27;/dist&#x27;</span>), <span class="comment">//打包后的文件存放的地方</span></span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span> <span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个配置文件，我们只需在终端中运行 webpack 命令就可进行打包，这条命令会自动引用 webpack.config.js 文件中的配置选项。</p><h2 id="构建本地服务器"><a href="#构建本地服务器" class="headerlink" title="构建本地服务器"></a>构建本地服务器</h2><p>现在我们是通过打开本地文件来查看页面的，感觉还是有点 low。例如 vue, react 等脚手架都是在本地服务器运行的。所以我们再做进一步优化。</p><h3 id="webpack-dev-server-配置本地服务器"><a href="#webpack-dev-server-配置本地服务器" class="headerlink" title="webpack-dev-server 配置本地服务器"></a>webpack-dev-server 配置本地服务器</h3><p>Webpack 提供了一个可选的本地开发服务器，这个本地服务器基于 node.js 构建，它是一个单独的组件，在 webpack 中进行配置之前需要单独安装它作为项目依赖：npm i webpack-dev-server -D</p><p>以下是 devServer 的一些配置选项:</p><ul><li>contentBase ：设置服务器所读取文件的目录，当前我们设置为”./dist”</li><li>port ：设置端口号，如果省略，默认为 8080</li><li>inline ：设置为 true，当源文件改变时会自动刷新页面</li><li>historyApiFallback ：设置为 true，所有的跳转将指向 index.html</li></ul><p>现在我们把这些配置加到 webpack.config.js 文件上，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: path.join(__dirname, <span class="string">&#x27;/src/index.js&#x27;</span>), <span class="comment">// 入口文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">&#x27;/dist&#x27;</span>), <span class="comment">//打包后的文件存放的地方</span></span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span> <span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">&#x27;./dist&#x27;</span>, <span class="comment">// 本地服务器所加载文件的目录</span></span><br><span class="line">    port: <span class="string">&#x27;8088&#x27;</span>, <span class="comment">// 设置端口号为8088</span></span><br><span class="line">    inline: <span class="literal">true</span>, <span class="comment">// 文件修改后实时刷新</span></span><br><span class="line">    historyApiFallback: <span class="literal">true</span> <span class="comment">//不跳转</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="package-json-文件中添加启动和打包命令"><a href="#package-json-文件中添加启动和打包命令" class="headerlink" title="package.json 文件中添加启动和打包命令"></a>package.json 文件中添加启动和打包命令</h3><p>package.json 文件修改如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;webpack-project&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^4.23.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^3.1.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-dev-server&quot;</span>: <span class="string">&quot;^3.1.10&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就可以用以下命令进行本地运行或者打包文件了</p><ul><li>npm run dev 启动本地服务器，webpack-dev-server 就是启动服务器的命令，–open 是用于启动完服务器后自动打开浏览器。</li><li>npm run build 执行打包命令</li></ul><p>此时，我们只要输入 npm run dev 就可以在 <a href="http://localhost:8088/%E4%B8%AD%E6%9F%A5%E7%9C%8B%E9%A1%B5%E9%9D%A2%E4%BA%86%E3%80%82">http://localhost:8088/中查看页面了。</a></p><h2 id="配置常用-loader"><a href="#配置常用-loader" class="headerlink" title="配置常用 loader"></a>配置常用 loader</h2><p>loader 可以让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效模块，然后你就可以利用 webpack 的打包能力，对它们进行处理。</p><p>Loaders 的配置包括以下几方面：</p><ul><li>test：一个用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）</li><li>loader：loader 的名称（必须）</li><li>include/exclude：手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li><li>options：为 loaders 提供额外的设置选项（可选）</li></ul><h3 id="配置-css-loader-和-sass-loader"><a href="#配置-css-loader-和-sass-loader" class="headerlink" title="配置 css-loader 和 sass-loader"></a>配置 css-loader 和 sass-loader</h3><p>如果我们要加载一个 css 文件，需要安装配置 style-loader 和 css-loader。<br>如果我们要使用 sass，就要配置 sass-loader 和 node-sass。</p><ul><li>css-loader：加载.css 文件</li><li>style-loader：使用 style 标签将 css-loader 内部样式注入到我们的 HTML 页面</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: path.join(__dirname, <span class="string">&#x27;/src/index.js&#x27;</span>), <span class="comment">// 入口文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">&#x27;/dist&#x27;</span>), <span class="comment">//打包后的文件存放的地方</span></span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span> <span class="comment">//打包后输出文件的文件名</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">&#x27;./dist&#x27;</span>, <span class="comment">// 本地服务器所加载文件的目录</span></span><br><span class="line">    port: <span class="string">&#x27;8088&#x27;</span>, <span class="comment">// 设置端口号为8088</span></span><br><span class="line">    inline: <span class="literal">true</span>, <span class="comment">// 文件修改后实时刷新</span></span><br><span class="line">    historyApiFallback: <span class="literal">true</span> <span class="comment">//不跳转</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则匹配以.css结尾的文件</span></span><br><span class="line">        use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(scss|sass)$/</span>, <span class="comment">// 正则匹配以.scss和.sass结尾的文件</span></span><br><span class="line">        use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;sass-loader&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="css-压缩"><a href="#css-压缩" class="headerlink" title="css 压缩"></a>css 压缩</h4><p>css 代码也可以像 Javascript 那样被压缩，以达到提升加速度和代码混淆的作用。目前比较成熟可靠的 CSS 压缩工具是 cssnano，基于 postcss。</p><p>cssnano 能理解 CSS 代码的含义，而不仅仅是删除空格，例如：</p><ul><li>margin:10px 20px 10px 20px 被压缩成 margin：10px 20px</li><li>color：#ff0000 被压缩成 color:red</li></ul><p>通常压缩率能达到 60%，cssnano 介入到 webpack 中很简单，因为 css-loader 已经内置了，只需要开启 css-loader 的 minimize 选项，相关配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; WebPlugin &#125; = <span class="built_in">require</span>(<span class="string">&#x27;web-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">&#x27;extract-text-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">// 增加对 CSS 文件的支持</span></span><br><span class="line">        <span class="comment">// 提取出 Chunk 中的 CSS 代码到单独的文件中</span></span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          <span class="comment">// 通过 minimize 选项压缩 CSS 代码</span></span><br><span class="line">          use: [<span class="string">&#x27;css-loader?minimize&#x27;</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 用 WebPlugin 生成对应的 HTML 文件</span></span><br><span class="line">    <span class="keyword">new</span> WebPlugin(&#123;</span><br><span class="line">      template: <span class="string">&#x27;./template.html&#x27;</span>, <span class="comment">// HTML 模版文件所在的文件路径</span></span><br><span class="line">      filename: <span class="string">&#x27;index.html&#x27;</span> <span class="comment">// 输出的 HTML 的文件名称</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">      filename: <span class="string">`[name]_[contenthash:8].css`</span> <span class="comment">// 给输出的 CSS 文件名称加上 Hash 值</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置-Babel-loader"><a href="#配置-Babel-loader" class="headerlink" title="配置 Babel-loader"></a>配置 Babel-loader</h3><p>Babel 其实是一个编译 JavaScript 的平台，它可以编译代码帮你达到以下目的：</p><ul><li>让你能使用最新的 JavaScript 代码（ES6，ES7…）；</li><li>让你能使用基于 JavaScript 进行了拓展的语言，比如 React 的 JSX；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">      include: [resolve(<span class="string">&#x27;src&#x27;</span>)]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 loader 对文件的转换操作很耗时，需要让尽可能少的文件被 loader 处理，可以通过 test、include、exclude 三个配置来命中 loader 要应用规则的文件。为了尽可能少的让文件被 loader 处理，可以通过 include 去命中只有哪些文件被处理</p><h3 id="处理图片"><a href="#处理图片" class="headerlink" title="处理图片"></a>处理图片</h3><p>处理图片资源时，我们常用的两种 loader 是 file-loader 或者 url-loader。<br>当使用 url-loader 加载图片，图片小于上限值，则将图片转 base64 字符串，否则使用 file-loader 加载图片。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">      loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        limit: <span class="number">10000</span>,</span><br><span class="line">        name: utils.assetsPath(<span class="string">&#x27;img/[name].[hash:7].[ext]&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cache-loader"><a href="#cache-loader" class="headerlink" title="cache-loader"></a>cache-loader</h3><p>一些性能开销较大的 loader 之前添加 cache-loader，将结果缓存在磁盘中，默认保存在 node_modueles/.cache/cache-loader 目录下。<br>首先安装依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cache-loader -D</span><br></pre></td></tr></table></figure><p><code>cache-loader </code>的配置要放在其他的 loader 之前，webpack 的配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="comment">//我的项目中,babel-loader耗时比较长，所以我给它配置了`cache-loader`</span></span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;cache-loader&#x27;</span>, <span class="string">&#x27;babel-loader&#x27;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若是只想给 babel-loader 配置 cache 的话，也可以不使用 cache-loader，给 babel-loader 增加选项 CacheDirectory。<br>cacheDirectory：默认值为 false。当有设置时，指定的目录将用来缓存 loader 的执行结果。之后的 Webpack 构建，将会尝试读取缓存，来避免在每次执行时，可能产生的、高性能消耗的 Babel 重新编译过程。设置空值或者 true 的话，使用默认缓存目录：node_modules/.cache/babel-loader。开启 babel-loader 的缓存和配置 cache-loader，我比对了下，构建时间很接近。</p><h2 id="7、配置常用插件"><a href="#7、配置常用插件" class="headerlink" title="7、配置常用插件"></a>7、配置常用插件</h2><p>loader 被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。</p><h3 id="7-1、自动生成-html-文件-HtmlWebpackPlugin"><a href="#7-1、自动生成-html-文件-HtmlWebpackPlugin" class="headerlink" title="7.1、自动生成 html 文件(HtmlWebpackPlugin)"></a>7.1、自动生成 html 文件(HtmlWebpackPlugin)</h3><p>现在我们都是使用一开始建好的 index.html 文件，然后手动引入 bundle.js，如果以后我们引入不止一个 js 文件，那就得更改 index.html 中的 js 文件名，所以能不能自动生成 index.html 且自动引用打包后的 js 呢？<br>HtmlWebpackPlugin 插件就是用来解决这个问题的：</p><ol><li>安装插件 npm i html-webpack-plugin -D</li><li>把 dist 文件夹清空</li><li>在根目录新建 index.html,内容和原来的 html 一致，只是不引入 js 文件。</li><li>webpack.config.js 中我们引入了 HtmlWebpackPlugin 插件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    filename: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">    template: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">    inject: <span class="literal">true</span>,</span><br><span class="line">    minify: &#123;</span><br><span class="line">      removeComments: <span class="literal">true</span>,</span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">      removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>此时我们使用 npm run build 进行打包，你会发现，dist 文件夹和 html 文件都会自动生成。</p><h3 id="7-2、清理-dist-文件夹-CleanWebpackPlugin"><a href="#7-2、清理-dist-文件夹-CleanWebpackPlugin" class="headerlink" title="7.2、清理/dist 文件夹(CleanWebpackPlugin)"></a>7.2、清理/dist 文件夹(CleanWebpackPlugin)</h3><p>在每次构建前清理/dist 文件夹，生产最新的打包文件，这时候就用到 CleanWebpackPlugin 插件了。</p><ol><li>安装 npm i clean-webpack-plugin -D</li><li>配置 webpack.config.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    filename: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">    template: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">    inject: <span class="literal">true</span>,</span><br><span class="line">    minify: &#123;</span><br><span class="line">      removeComments: <span class="literal">true</span>,</span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">      removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">&#x27;dist&#x27;</span>])</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="7-3、热更新-HotModuleReplacementPlugin"><a href="#7-3、热更新-HotModuleReplacementPlugin" class="headerlink" title="7.3、热更新(HotModuleReplacementPlugin)"></a>7.3、热更新(HotModuleReplacementPlugin)</h3><p>我们要在修改代码后自动更新页面，这就需要 HotModuleReplacementPlugin（HMR）插件</p><ol><li>devServer 配置项中添加 hot: true 参数。</li><li>因为 HotModuleReplacementPlugin 是 webpack 模块自带的，所以引入 webpack 后，在 plugins 配置项中直接使用即可。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    filename: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">    template: <span class="string">&#x27;index.html&#x27;</span>,</span><br><span class="line">    inject: <span class="literal">true</span>,</span><br><span class="line">    minify: &#123;</span><br><span class="line">      removeComments: <span class="literal">true</span>,</span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">      removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">&#x27;dist&#x27;</span>])</span><br><span class="line">  <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="7-4、增加-css-前缀"><a href="#7-4、增加-css-前缀" class="headerlink" title="7.4、增加 css 前缀"></a>7.4、增加 css 前缀</h3><p>平时我们写 css 时，一些属性需要手动加上前缀，比如-webkit-border-radius: 10px;，在 webpack 中我们可以让他自动加上</p><ol><li>安装 npm i postcss-loader autoprefixer -D</li><li>在项目根目录下新建 postcss.config.js 文件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>) <span class="comment">// 引用autoprefixer模块</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>修改 webpack.config.js 文件中的 css-loader 配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">   ...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则匹配以.css结尾的文件</span></span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span> &#125;, <span class="comment">// 这里采用的是对象配置loader的写法</span></span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span> &#125; <span class="comment">// 使用postcss-loader</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">       ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5、css-分离-ExtractTextPlugin"><a href="#7-5、css-分离-ExtractTextPlugin" class="headerlink" title="7.5、css 分离 ExtractTextPlugin"></a>7.5、css 分离 ExtractTextPlugin</h3><p>将 css 成生文件，而非内联。该插件的主要是为了抽离 css 样式,防止将样式打包在 js 中引起页面样式加载错乱的现象。</p><ol><li>安装 npm i extract-text-webpack-plugin@next -D</li><li>在 webpack.config.js 文件中引入并使用该插件：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">&#x27;extract-text-webpack-plugin&#x27;</span>) <span class="comment">//引入分离插件</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则匹配以.css结尾的文件</span></span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          <span class="comment">// 相当于回滚，经postcss-loader和css-loader处理过的css最终再经过style-loader处理</span></span><br><span class="line">          fallback: <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          use: [<span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;postcss-loader&#x27;</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">&#x27;css/index.css&#x27;</span>) <span class="comment">// 将css分离到/dist文件夹下的css文件夹中的index.css</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时运行 npm run build 后会发现/dist 文件夹内多出了/css 文件夹及 index.css 文件。</p><h3 id="7-6、消除冗余-css"><a href="#7-6、消除冗余-css" class="headerlink" title="7.6、消除冗余 css"></a>7.6、消除冗余 css</h3><p>有时候我们 css 写得多了，可能会不自觉的写重复了一些样式，这就造成了多余的代码，以下方法可以优化</p><ol><li>安装 npm i purifycss-webpack purify-css glob -D</li><li>引入 clean-webpack-plugin 及 glob 插件并使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PurifyCssWebpack = <span class="built_in">require</span>(<span class="string">&#x27;purifycss-webpack&#x27;</span>) <span class="comment">// 引入PurifyCssWebpack插件</span></span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">&#x27;glob&#x27;</span>) <span class="comment">// 引入glob模块,用于扫描全部html文件中所引用的css</span></span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> PurifyCssWebpack(&#123;</span><br><span class="line">    paths: glob.sync(path.join(__dirname, <span class="string">&#x27;src/*.html&#x27;</span>)) <span class="comment">// 同步扫描所有html文件中所引用的css</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="至此，一些常用的配置以及弄好了，现在就开始愉快地写代码了。"><a href="#至此，一些常用的配置以及弄好了，现在就开始愉快地写代码了。" class="headerlink" title="至此，一些常用的配置以及弄好了，现在就开始愉快地写代码了。"></a>至此，一些常用的配置以及弄好了，现在就开始愉快地写代码了。</h3><h4 id="下面将讲述-webpack-的优化方法。以下的例子是由-vue-cli-脚手架搭建的项目，跟上述例子无关。"><a href="#下面将讲述-webpack-的优化方法。以下的例子是由-vue-cli-脚手架搭建的项目，跟上述例子无关。" class="headerlink" title="下面将讲述 webpack 的优化方法。以下的例子是由 vue-cli 脚手架搭建的项目，跟上述例子无关。"></a>下面将讲述 webpack 的优化方法。以下的例子是由 vue-cli 脚手架搭建的项目，跟上述例子无关。</h4><p>————————————————————————————————————————————</p><h2 id="webpack-打包优化"><a href="#webpack-打包优化" class="headerlink" title="webpack 打包优化"></a>webpack 打包优化</h2><h3 id="为什么要优化打包？"><a href="#为什么要优化打包？" class="headerlink" title="为什么要优化打包？"></a>为什么要优化打包？</h3><ul><li>项目越做越大，依赖包越来越多，打包文件太大</li><li>单页面应用首页白屏时间长，用户体验差</li></ul><h3 id="我们的目的"><a href="#我们的目的" class="headerlink" title="我们的目的"></a>我们的目的</h3><ul><li>减小打包后的文件大小</li><li>首页按需引入文件</li><li>优化 webpack 打包时间</li></ul><h3 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h3><p>1.1 路由组件按需加载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span></span><br><span class="line">      <span class="built_in">require</span>.ensure([], <span class="function">() =&gt;</span> resolve(<span class="built_in">require</span>(<span class="string">&#x27;@/components/index&#x27;</span>)))</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span></span><br><span class="line">      <span class="built_in">require</span>.ensure([], <span class="function">() =&gt;</span> resolve(<span class="built_in">require</span>(<span class="string">&#x27;@/components/about&#x27;</span>)))</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>1.2 第三方组件和插件。按需加载需引入第三方组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入全部组件</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按需引入组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Button &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line">Vue.component(Button.name, Button)</span><br></pre></td></tr></table></figure><p>1.3 对于一些插件，如果只是在个别组件中用的到，也可以不要在 main.js 里面引入，而是在组件中按需引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在main.js引入</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> vue</span><br><span class="line"><span class="keyword">import</span> Vuelidate <span class="keyword">from</span> <span class="string">&#x27;vuelidate&#x27;</span></span><br><span class="line">Vue.use(Vuelidate)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按组件按需引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; Vuelidate &#125; <span class="keyword">from</span> <span class="string">&#x27;vuelidate&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="优化-loader-配置"><a href="#优化-loader-配置" class="headerlink" title="优化 loader 配置"></a>优化 loader 配置</h3><ul><li>优化正则匹配</li><li>通过 cacheDirectory 选项开启缓存</li><li>通过 include、exclude 来减少被处理的文件。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      loader: <span class="string">&#x27;babel-loader?cacheDirectory&#x27;</span>,</span><br><span class="line">      include: [resolve(<span class="string">&#x27;src&#x27;</span>)]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优化文件路径——省下搜索文件的时间"><a href="#优化文件路径——省下搜索文件的时间" class="headerlink" title="优化文件路径——省下搜索文件的时间"></a>优化文件路径——省下搜索文件的时间</h3><ul><li>extension 配置之后可以不用在 require 或是 import 的时候加文件扩展名,会依次尝试添加扩展名进行匹配。</li><li>alias 通过配置别名可以加快 webpack 查找模块的速度。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  extensions: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>],</span><br><span class="line">  alias: &#123;</span><br><span class="line">    <span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="生产环境关闭-sourceMap"><a href="#生产环境关闭-sourceMap" class="headerlink" title="生产环境关闭 sourceMap"></a>生产环境关闭 sourceMap</h3><ul><li>sourceMap 本质上是一种映射关系，打包出来的 js 文件中的代码可以映射到代码文件的具体位置,这种映射关系会帮助我们直接找到在源代码中的错误。</li><li>打包速度减慢，生产文件变大，所以开发环境使用 sourceMap，生产环境则关闭。</li></ul><h3 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h3><ul><li>UglifyJS: vue-cli 默认使用的压缩代码方式，它使用的是单线程压缩代码，打包时间较慢</li><li>ParallelUglifyPlugin: 开启多个子进程，把对多个文件压缩的工作分别给多个子进程去完成</li></ul><p>两种方法使用如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">    uglifyOptions: &#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    sourceMap: <span class="literal">true</span>,</span><br><span class="line">    parallel: <span class="literal">true</span></span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> ParallelUglifyPlugin(&#123;</span><br><span class="line">    <span class="comment">//缓存压缩后的结果，下次遇到一样的输入时直接从缓存中获取压缩后的结果并返回，</span></span><br><span class="line">    <span class="comment">//cacheDir 用于配置缓存存放的目录路径。</span></span><br><span class="line">    cacheDir: <span class="string">&#x27;.cache/&#x27;</span>,</span><br><span class="line">    sourceMap: <span class="literal">true</span>,</span><br><span class="line">    uglifyJS: &#123;</span><br><span class="line">      output: &#123;</span><br><span class="line">        comments: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>打包速度和打包后的文件大小啊对比<br>| 方法 | 文件大小 | 打包速度 |<br>|———————|:———|:———|<br>| 不用插件 | 14.6M | 32s |<br>| UglifyJsPlugin | 12.9M | 33s |<br>| ParallelUglifyPlugi | 7.98M | 17s |</p><h3 id="提取公共代码"><a href="#提取公共代码" class="headerlink" title="提取公共代码"></a>提取公共代码</h3><ul><li>相同资源重复被加载，浪费用户流量，增加服务器成本。</li><li>每个页面需要加载的资源太大，导致网页首屏加载缓慢，影响用户体验。</li></ul><p>webpack3 使用 CommonsChunkPlugin 的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    name: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">    minChunks: <span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">module</span>, count</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">module</span>.resource, <span class="string">`引用次数<span class="subst">$&#123;count&#125;</span>`</span>)</span><br><span class="line">      <span class="comment">//&quot;有正在处理文件&quot; + &quot;这个文件是 .js 后缀&quot; + &quot;这个文件是在 node_modules 中&quot;</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="built_in">module</span>.resource &amp;&amp;</span><br><span class="line">        /\.js$/.test(<span class="built_in">module</span>.resource) &amp;&amp;</span><br><span class="line">        <span class="built_in">module</span>.resource.indexOf(path.join(__dirname, <span class="string">&#x27;./node_modules&#x27;</span>)) === <span class="number">0</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">    name: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">    chunks: <span class="string">&#x27;initial&#x27;</span>,</span><br><span class="line">    minChunks: <span class="number">2</span></span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="webpack4-使用-splitChunks-的实现："><a href="#webpack4-使用-splitChunks-的实现：" class="headerlink" title="webpack4 使用 splitChunks 的实现："></a>webpack4 使用 splitChunks 的实现：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">       chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">      ccacheGroups: &#123;</span><br><span class="line">        vendors: &#123;</span><br><span class="line">          name: <span class="string">&#x27;chunk-vendors&#x27;</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          priority: <span class="number">10</span>,</span><br><span class="line">          chunks: <span class="string">&#x27;initial&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        iview: &#123;</span><br><span class="line">          name: <span class="string">&#x27;chunk-iview&#x27;</span>,</span><br><span class="line">          priority: <span class="number">20</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]_?iview(.*)/</span></span><br><span class="line">        &#125;,</span><br><span class="line">        echarts: &#123;</span><br><span class="line">          name: <span class="string">&#x27;chunk-echarts&#x27;</span>,</span><br><span class="line">          priority: <span class="number">20</span>,</span><br><span class="line">          test: <span class="regexp">/[\\/]node_modules[\\/]_?echarts(.*)/</span></span><br><span class="line">        &#125;,</span><br><span class="line">        commons: &#123;</span><br><span class="line">          name: <span class="string">&#x27;chunk-commons&#x27;</span>,</span><br><span class="line">          minChunks: <span class="number">2</span>,</span><br><span class="line">          priority: <span class="number">5</span>,</span><br><span class="line">          chunks: <span class="string">&#x27;initial&#x27;</span>,</span><br><span class="line">          reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CDN-优化"><a href="#CDN-优化" class="headerlink" title="CDN 优化"></a>CDN 优化</h3><p>CDN 又叫内容分发网络，通过把资源部署到世界各地，用户在访问时按照就近原则从离用户最近的服务器获取资源，从而加速资源的获取速度。</p><ul><li>随着项目越做越大，依赖的第三方 npm 包越来越多，构建之后的文件也会越来越大。</li><li>再加上又是单页应用，这就会导致在网速较慢或者服务器带宽有限的情况出现长时间的白屏。</li></ul><p>1、将 vue、vue-router、vuex、element-ui 和 axios 这五个库，全部改为通过 CDN 链接获取，在 index.html 里插入 相应链接。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  &lt;link</span><br><span class="line">    rel=&quot;stylesheet&quot;</span><br><span class="line">    href=&quot;https://cdn.bootcss.com/element-ui/2.0.7/theme-chalk/index.css&quot;</span><br><span class="line">  /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue/2.6.10/vue.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vuex/3.1.0/vuex.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/vue-router/3.0.2/vue-router.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/element-ui/2.6.1/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>问题</strong>：开发环境也接入 vue.min.js 的 cdn 时无法使用 chrome 的 Vue.js devtools 插件，所以要分环境加载不同的资源。</p><p>2、在 webpack.config.js 配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"> ···</span><br><span class="line">    externals: &#123;</span><br><span class="line">      <span class="string">&#x27;vue&#x27;</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vuex&#x27;</span>: <span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;element-ui&#x27;</span>: <span class="string">&#x27;ELEMENT&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;Axios&#x27;</span>:<span class="string">&#x27;axios&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>3、卸载依赖的 npm 包，npm uninstall axios element-ui vue vue-router vuex</p><p>4、修改 main.js 文件里之前的引包方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import Vue from &#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// import ElementUI from &#x27;element-ui&#x27;</span></span><br><span class="line"><span class="comment">// import &#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="comment">// import VueRouter from &#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">&#x27;./utils/Utils&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(ELEMENT)</span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  mode: <span class="string">&#x27;hash&#x27;</span>, <span class="comment">//路由的模式</span></span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  render: <span class="function">(<span class="params">h</span>) =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用-HappyPack-多进程解析和处理文件"><a href="#使用-HappyPack-多进程解析和处理文件" class="headerlink" title="使用 HappyPack 多进程解析和处理文件"></a>使用 HappyPack 多进程解析和处理文件</h3><ul><li>由于运行在 Node.js 之上的 Webpack 是单线程模型的，所以 Webpack 需要处理的事情需要一件一件的做，不能多件事一起做。</li><li>HappyPack 就能让 Webpack 把任务分解给多个子进程去并发的执行，子进程处理完后再把结果发送给主进程。</li><li>HappyPack 对 file-loader、url-loader 支持的不友好，所以不建议对该 loader 使用。</li></ul><p>使用方法如下：</p><ol><li>HappyPack 插件安装： npm i -D happypack</li><li>webpack.base.conf.js 文件对 module.rules 进行配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      use: [<span class="string">&#x27;happypack/loader?id=babel&#x27;</span>],</span><br><span class="line">      include: [resolve(<span class="string">&#x27;src&#x27;</span>), resolve(<span class="string">&#x27;test&#x27;</span>)],</span><br><span class="line">      exclude: path.resolve(__dirname, <span class="string">&#x27;node_modules&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">      use: [<span class="string">&#x27;happypack/loader?id=vue&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在生产环境 webpack.prod.conf.js 文件进行配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">&#x27;happypack&#x27;</span>)</span><br><span class="line"><span class="comment">// 构造出共享进程池，在进程池中包含5个子进程</span></span><br><span class="line"><span class="keyword">const</span> HappyPackThreadPool = HappyPack.ThreadPool(&#123; <span class="attr">size</span>: <span class="number">5</span> &#125;)</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    <span class="comment">// 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件</span></span><br><span class="line">    id: <span class="string">&#x27;babel&#x27;</span>,</span><br><span class="line">    <span class="comment">// 如何处理.js文件，用法和Loader配置中一样</span></span><br><span class="line">    loaders: [<span class="string">&#x27;babel-loader?cacheDirectory&#x27;</span>],</span><br><span class="line">    threadPool: HappyPackThreadPool</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: <span class="string">&#x27;vue&#x27;</span>, <span class="comment">// 用唯一的标识符id，来代表当前的HappyPack是用来处理一类特定的文件</span></span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        loader: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">        options: vueLoaderConfig</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    threadPool: HappyPackThreadPool</span><br><span class="line">  &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="使用-DLLPlugin-提高打包编译速度"><a href="#使用-DLLPlugin-提高打包编译速度" class="headerlink" title="使用 DLLPlugin 提高打包编译速度"></a>使用 DLLPlugin 提高打包编译速度</h3><p><a href="https://webpack.docschina.org/plugins/dll-plugin/">DLLPlugin</a> 代码一般简单区分为业务代码和第三方库。如果不做处理，每次构建时都需要把所有的代码重新构建一次，耗费大量的时间，在大部分情况下，很多第三方库的代码不会变更（除非是版本升级），这时就可以使用到 dll：将复用性较高的第三方模块打包到动态链接库中，再不升级这些库的情况下，动态库不需要重新打包，每次构建只需要重新打包业务代码。</p><p>DllPlugin 是 webpack 内置的插件，不需要额外安装，直接配置 webpack.dll.config.js 文件，Webpack 已经内置了对动态链接库的支持，需要通过 2 个内置的插件接入，它们分别是：</p><p>DllPlugin 插件：用于打包出一个个单独的动态链接库文件。<br>DllReferencePlugin 插件：用于在主要配置文件中去引入 DllPlugin 插件打包好的动态链接库文件。</p><p>相关链接：</p><ul><li><a href="https://segmentfault.com/a/1190000016567986">webpack 使用-详解 DllPlugin</a></li><li><a href="https://juejin.cn/post/6844903635072057358">webpack 编译速度提升之 DllPlugin</a></li><li><a href="http://webpack.wuhaolin.cn/4%E4%BC%98%E5%8C%96/4-2%E4%BD%BF%E7%94%A8DllPlugin.html">4-2 使用 DllPlugin</a></li></ul><h3 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree shaking"></a>tree shaking</h3><p>通过 tree-shaking，将没有使用的模块摇掉，这样来达到删除无用代码的目的。<br>思路： 基于 ES6 提供的模块系统对代码进行静态分析,并将代码中的死代码（dead code）移除的一种技术。因此，利用 Tree Shaking 技术可以很方便地实现我们代码上的优化，减少代码体积。</p><p>摇树删除代码的原理：<br>webpack 基于 ES6 提供的模块系统，对代码的依赖树进行静态分析，把 import &amp; export 标记为 3 类：</p><ul><li>所有 import 标记为/_ harmony import _/</li><li>被使用过的 export 标记为/harmony export([type])/，其中[type]和 webpack 内部有关，可能是 binding，immutable 等；</li><li>没有被使用的 export 标记为/_ unused harmony export [FuncName] _/，其中[FuncName]为 export 的方法名，之后使用 Uglifyjs（或者其他类似的工具）进行代码精简，把没用的都删除。</li></ul><p>为何基于 es6 模块实现（ES6 module 特点：）：</p><ul><li>只能作为模块顶层的语句出现</li><li>import 的模块名只能是字符串常量</li><li>import binding 是 immutable 的</li></ul><p>条件：</p><ol><li>首先源码必须遵循 ES6 的模块规范 (import &amp; export)，如果是 CommonJS 规范 (require) 则无法使用。</li><li>编写的模块代码不能有副作用，如果在代码内部改变了外部的变量则不会被移除。</li></ol><p>配置方法：<br>在 package.json 里添加一个属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// sideEffects如果设为false，webpack就会认为所有没用到的函数都是没副作用的，即删了也没关系。</span></span><br><span class="line">    <span class="string">&quot;sideEffects&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 设置黑名单，用于防止误删代码</span></span><br><span class="line">    <span class="string">&quot;sideEffects&quot;</span>: [</span><br><span class="line">        <span class="comment">// 数组里列出黑名单，禁止shaking下列代码</span></span><br><span class="line">        <span class="string">&quot;@babel/polly-fill&quot;</span>,</span><br><span class="line">        <span class="string">&quot;*.less&quot;</span>,</span><br><span class="line">        <span class="comment">// 其它有副作用的模块</span></span><br><span class="line">        <span class="string">&quot;./src/some-side-effectful-file.js&quot;</span></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tree-shaking 摇掉代码中未使用的代码 在生产模式下自动开启</p><p>tree-shaking 并不是 webpack 中的某一个配置选项，是一组功能搭配使用后的优化效果，会在生产模式下自动启动</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在开发模式下，设置 usedExports: true ，打包时只会标记出哪些模块没有被使用，不会删除，因为可能会影响 source-map的标记位置的准确性。</span></span><br><span class="line">&#123;</span><br><span class="line">    mode: <span class="string">&#x27;develpoment&#x27;</span>,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        <span class="comment">// 优化导出的模块</span></span><br><span class="line">        usedExports: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在生产模式下默认开启 usedExports: true ，打包压缩时就会将没用到的代码移除</span></span><br><span class="line">&#123;</span><br><span class="line">    mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">    <span class="comment">//  这个属性的作用就是集中配置webpack内部的优化功能</span></span><br><span class="line">    optimizition: &#123;</span><br><span class="line">        <span class="comment">// 只导出外部使用的模块成员 负责标记枯树叶</span></span><br><span class="line">        usedExports: <span class="literal">true</span>,</span><br><span class="line">        minimize: <span class="literal">true</span>, <span class="comment">// 自动压缩代码 负责摇掉枯树叶</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * webpack打包默认会将一个模块单独打包到一个闭包中</span></span><br><span class="line"><span class="comment">         * webpack3中新增的API 将所有模块都放在一个函数中 ，尽可能将所有模块合并在一起，</span></span><br><span class="line"><span class="comment">         * 提升效率，减少体积  达到作用域提升的效果</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        concatenateModules: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用摇树的注意事项：</p><ul><li>使用 ES6 模块语法编写代码</li><li>工具类函数尽量以单独的形式输出，不要集中成一个对象或者类</li><li>声明 sideEffects</li><li>自己在重构代码时也要注意副作用</li></ul><p>tree-shaking &amp; babel 使用 babel-loader 处理 js 代码会导致 tree-shaking 失效的原因：<br>treeshaking 使用的前提必须是 ES module 组织的代码，也就是说交给 ESMOdule 处理的代码必须是 ESM。当我们使用 babel-loader 处理 js 代码之后就有可能将 ESM 转换 成 commonjs 规范（preset-env 插件工作的时候就会将 esm =&gt; coommonjs）</p><p>解决办法：<br>收到配置 preset-env 的 modules： false,确保不会开启自动转换的插件(在最新版本的 babel-loader 中自动帮我们关闭了转换成 commonjs 规范的功能)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">presets: [</span><br><span class="line">    [&#39;@babel&#x2F;preset-env&#39;, &#123;module: &#39;commonjs&#39;&#125;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>比较实用的方法: 按需加载，优化 loader 配置，关闭生产环境的 sourceMap，CDN 优化。</li><li>vue-cli 已做的优化： 代码压缩，提取公共代码，再优化空间不大。</li><li>根据项目实际需要和自身开发水平选择优化方法，必须避免因为优化产生 bug。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;webpack 的使用及优化&lt;/p&gt;
&lt;p&gt;我们的目的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减小打包后的文件大小&lt;/li&gt;
&lt;li&gt;首页按需引入文件&lt;/li&gt;
&lt;li&gt;优化 webpack 打包时间&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="webpack" scheme="https://colorfulworld.github.io/categories/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>常见的四种post方式</title>
    <link href="https://colorfulworld.github.io/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%9B%E7%A7%8Dpost%E6%96%B9%E5%BC%8F/"/>
    <id>https://colorfulworld.github.io/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%9B%E7%A7%8Dpost%E6%96%B9%E5%BC%8F/</id>
    <published>2019-07-16T02:21:57.000Z</published>
    <updated>2021-04-03T03:30:49.129Z</updated>
    
    <content type="html"><![CDATA[<p>自己常常在开发过程中被后台研发要求的数据格式搞的十分混乱，常常觉得自己记错了，常常不确定怎么设置header。所以现在进行一个彻底的总结。</p><span id="more"></span><h1 id="常见的四种post方式"><a href="#常见的四种post方式" class="headerlink" title="常见的四种post方式"></a>常见的四种post方式</h1><ol><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text-plain</li><li>application/json</li></ol><h2 id="一个form标签中的enctype有三种类型"><a href="#一个form标签中的enctype有三种类型" class="headerlink" title="一个form标签中的enctype有三种类型"></a>一个form标签中的enctype有三种类型</h2><ol><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li><li>text-plain</li></ol><p>enctype 属性规定在发送到服务器之前应该如何对表单数据进行编码，默认的情况下是 application/x-www-urlencoded,就是说，在发送到服务器之前，所有的字符都会进行编码。当表单使用POST请求时，数据会被以x-www-urlencoded，当表单使用POST请求时，数据会被以x-www-urlencoede方式编码到Body中来传送。</p><p>而如果是get请求，则是附在url链接后面来传送。</p><p>get请求只支持ASCLL字符集，因此，如果我们要发送更大字符集的内容，我们应使用POST请求。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>如果要发送大量的二进制数据（non-ASCLL）,”application/x-www-form-urlencoded”是最低效的，因为它需要用3个字符来表示一个non-ASCLL的字符。因此这时就要使用”multipart/form-data”。</p><h2 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h2><p><strong>在发送前编码所有字符</strong></p><p>在通过HTTP向服务器发送POST请求数据，都是通过form表单形式提交的，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://w.sohu.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> =<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;text1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;text2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提交数据时会向服务器端发出这样的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Content-Type:application&#x2F;x-www-form-urlencoded</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Host: w.sohu.com</span><br><span class="line">Content-Length: 21</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line">txt1&#x3D;hello&amp;txt2&#x3D;world</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于普通的HTML Form POST 请求，它会在头信息里使用Content-Length 注明长度。<br>请求头信息每行一条，空行之后便是Body,即内容。内容格式是在头信息中的Content-Type，如上是application/x-www-form-urlencoded。这也意味着消息内容会经过URL格式编码，就像是GET请求时URL中的QueryString。<code>text1=hello&amp;text2=world</code></p><h2 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h2><p><strong>不对字符编码，在使用包含文件上传的表单时，必须使用该值</strong></p><p>通过form 表单提交文件操作如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FORM</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://w.sohu.com/t2/upload.do&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">INPUT</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Santa colo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">INPUT</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">INPUT</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pic&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FORM</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器将会发送以下数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;t2&#x2F;upload.do HTTP&#x2F;1.1</span><br><span class="line">User-Agent: SOHUWapRebot</span><br><span class="line">Accept-Language: zh-cn,zh;q&#x3D;0.5</span><br><span class="line">Accept-Charset: GBK,utf-8;q&#x3D;0.7,*;q&#x3D;0.7</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 60408</span><br><span class="line">Content-Type:multipart&#x2F;form-data; boundary&#x3D;ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</span><br><span class="line">Host: w.sohu.com</span><br><span class="line"></span><br><span class="line">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;city&quot;</span><br><span class="line"></span><br><span class="line">Santa colo</span><br><span class="line">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</span><br><span class="line">Content-Disposition: form-data;name&#x3D;&quot;desc&quot;</span><br><span class="line">Content-Type: text&#x2F;plain; charset&#x3D;UTF-8</span><br><span class="line">Content-Transfer-Encoding: 8bit</span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC</span><br><span class="line">Content-Disposition: form-data;name&#x3D;&quot;pic&quot;; filename&#x3D;&quot;photo.jpg&quot;</span><br><span class="line">Content-Type: application&#x2F;octet-stream</span><br><span class="line">Content-Transfer-Encoding: binary</span><br><span class="line"> </span><br><span class="line">... binary data of the jpg ...</span><br><span class="line">--ZnGpDtePMx0KrHh_G0X99Yef9r8JZsRJSXC--</span><br></pre></td></tr></table></figure><p>从上面的 multipart/form-data 格式发送的请求来看，他包含了多个parts，每个part都包含头部信息部分，part头信息中必须包含一个Content-disposition 头，其他的头信息则为可选项，比如：Content-Type 等。</p><h2 id="text-plain"><a href="#text-plain" class="headerlink" title="text/plain"></a>text/plain</h2><p>**空格转换为“+”加号，但不对特殊字符编码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/example/html/form_action.asp&quot;</span> method=<span class="string">&quot;get&quot;</span> enctype=<span class="string">&quot;text/plain&quot;</span>&gt;</span><br><span class="line">  First name: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fname&quot;</span> /&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">  Last name: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lname&quot;</span> /&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line">  &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h2><p>最终发送的请求是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BASHPOST http:&#x2F;&#x2F;www.example.com HTTP&#x2F;1.1 </span><br><span class="line">Content-Type: application&#x2F;json;charset&#x3D;utf-8</span><br><span class="line"></span><br><span class="line">&#123;&quot;title&quot;:&quot;test&quot;,&quot;sub&quot;:[1,2,3]&#125;</span><br></pre></td></tr></table></figure><h2 id="Boundary-分隔符"><a href="#Boundary-分隔符" class="headerlink" title="Boundary 分隔符"></a>Boundary 分隔符</h2><p>每个部分使用 –boundary 分割开来，最后一行使用–boundary–结尾</p><h1 id="ajax-解读"><a href="#ajax-解读" class="headerlink" title="ajax 解读"></a>ajax 解读</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHTTPRequest();</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">&quot;method&quot;</span>, <span class="string">&quot;url&quot;</span>, <span class="string">&quot;async&quot;</span>);</span><br><span class="line"></span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(xhr.readystate == <span class="number">4</span>)&#123;</span><br><span class="line"></span><br><span class="line">　　　<span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line"></span><br><span class="line">　　　　　<span class="built_in">console</span>.log(xhr.responseText)</span><br><span class="line"></span><br><span class="line">　　　&#125;</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>XMLHTTPRequest对象</li><li>常用方法：<ul><li><code>open(&quot;method&quot;,&#39;url&#39;,&#39;async&#39;)</code><ul><li>method 表示通过什么方式进行服务器访问，包括post和get</li><li>url 表示访问服务器的地址</li><li>async 表示是否异步，包括true(异步)和false</li></ul></li><li><code>send(content)</code><ul><li>content 表示向服务器发送的数据。</li></ul></li></ul></li></ul><h2 id="原生-JS-的封装"><a href="#原生-JS-的封装" class="headerlink" title="原生 JS 的封装"></a>原生 JS 的封装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//可以以下步骤代替上面的open、setRequestHeader、send三行，此处对GET和POST做了很好的区分</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="keyword">var</span> ajaxData = &#123; </span><br><span class="line">    type: (<span class="built_in">arguments</span>[<span class="number">0</span>].type || <span class="string">&quot;GET&quot;</span>).toUpperCase(), </span><br><span class="line">    url: <span class="built_in">arguments</span>[<span class="number">0</span>].url || <span class="string">&quot;&quot;</span>, </span><br><span class="line">    <span class="keyword">async</span>: <span class="built_in">arguments</span>[<span class="number">0</span>].async || <span class="string">&quot;true&quot;</span>, </span><br><span class="line">    data: <span class="built_in">arguments</span>[<span class="number">0</span>].data || <span class="literal">null</span>, </span><br><span class="line">    dataType: <span class="built_in">arguments</span>[<span class="number">0</span>].dataType || <span class="string">&quot;json&quot;</span>, </span><br><span class="line">    contentType: <span class="built_in">arguments</span>[<span class="number">0</span>].contentType || <span class="string">&quot;application/x-www-form-urlencoded; charset=utf-8&quot;</span>, </span><br><span class="line">    beforeSend: <span class="built_in">arguments</span>[<span class="number">0</span>].beforeSend || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, </span><br><span class="line">    success: <span class="built_in">arguments</span>[<span class="number">0</span>].success || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;, </span><br><span class="line">    error: <span class="built_in">arguments</span>[<span class="number">0</span>].error || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  ajaxData.beforeSend() </span><br><span class="line">  <span class="keyword">var</span> xhr = createxmlHttpRequest();  </span><br><span class="line">  xhr.responseType=ajaxData.dataType; </span><br><span class="line"></span><br><span class="line">  xhr.open(ajaxData.type,ajaxData.url,ajaxData.async);  </span><br><span class="line">  xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>,ajaxData.contentType);  </span><br><span class="line">  xhr.send(convertData(ajaxData.data));  </span><br><span class="line"></span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;  </span><br><span class="line">      <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123; </span><br><span class="line">        ajaxData.success(xhr.response) </span><br><span class="line">      &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">        ajaxData.error() </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;  </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createxmlHttpRequest</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);  </span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertData</span>(<span class="params">data</span>)</span>&#123; </span><br><span class="line">  <span class="keyword">if</span>( <span class="keyword">typeof</span> data === <span class="string">&#x27;object&#x27;</span> )&#123; </span><br><span class="line">    <span class="keyword">var</span> convertResult = <span class="string">&quot;&quot;</span> ;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> c <span class="keyword">in</span> data)&#123;  </span><br><span class="line">      convertResult+= c + <span class="string">&quot;=&quot;</span> + data[c] + <span class="string">&quot;&amp;&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    convertResult=convertResult.substring(<span class="number">0</span>,convertResult.length-<span class="number">1</span>) </span><br><span class="line">    <span class="keyword">return</span> convertResult; </span><br><span class="line">  &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> data; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(&#123; </span><br><span class="line">  type:<span class="string">&quot;POST&quot;</span>, </span><br><span class="line">  url:<span class="string">&quot;ajax.php&quot;</span>, </span><br><span class="line">  dataType:<span class="string">&quot;json&quot;</span>, </span><br><span class="line">  data:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;abc&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>:<span class="string">&quot;456&quot;</span></span><br><span class="line">　&#125;, </span><br><span class="line">  beforeSend:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="comment">//some js code </span></span><br><span class="line">  &#125;, </span><br><span class="line">  success:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(msg) </span><br><span class="line">  &#125;, </span><br><span class="line">  error:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;error&quot;</span>) </span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;自己常常在开发过程中被后台研发要求的数据格式搞的十分混乱，常常觉得自己记错了，常常不确定怎么设置header。所以现在进行一个彻底的总结。&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="https://colorfulworld.github.io/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue小知识点运用</title>
    <link href="https://colorfulworld.github.io/Vue%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E8%BF%90%E7%94%A8/"/>
    <id>https://colorfulworld.github.io/Vue%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9%E8%BF%90%E7%94%A8/</id>
    <published>2019-07-09T06:56:06.000Z</published>
    <updated>2021-04-24T15:38:33.649Z</updated>
    
    <content type="html"><![CDATA[<p>Vue API 中的小知识点运用与总结</p><span id="more"></span><h2 id="状态共享"><a href="#状态共享" class="headerlink" title="状态共享"></a>状态共享</h2><p>随着组件的细化，就会遇到多组件状态共享的情况，Vuex 当然可以解决这些问题，但是如果应用不够大，为避免代码繁琐冗余，最好不要使用它。我们可以通过使用 Observable API 应对一些简单的跨组件数据状态共享的情况。</p><h3 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h3><p>让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象。可以实现简单的 store 管理。</p><p>返回的对象可以直接在渲染函数和计算属性中使用，并在编译时触发适当的更新。它还可以用作简单场景的最小跨组件状态存储：</p><p>store.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = vue.observable(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutation = &#123;</span><br><span class="line">  <span class="function"><span class="title">setCount</span>(<span class="params">count</span>)</span> &#123;</span><br><span class="line">    store.count = count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;setCount(testCount + 1)&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;setCount(testCount - 1)&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;testCount&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; store, mutation &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;HelloWorld&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        msg: <span class="string">&#x27;Welcome to Your Vue.js App&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      test</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      setCount: mutation.setCount</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">testCount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> store.count</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>test 组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>test&#123;&#123;testCount&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; store &#125; <span class="keyword">from</span> <span class="string">&#x27;@/store&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">testCount</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> store.count</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="长列表性能优化"><a href="#长列表性能优化" class="headerlink" title="长列表性能优化"></a>长列表性能优化</h2><p>vue 是通过 object.defineProperty 对数据进行劫持，来实现视图响应数据的变化，然而有些时候我们的组件就是纯粹的展示，不需要 vue 劫持我们的数据，在大量数据展示的情况下，这能够很明显的减少组件初始化的时间，<strong>我们可以通过<code>object.freeze</code>方法来冻结一个对象，一旦被冻结的对象就再也不能被修改了</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data: <span class="function">() =&gt;</span> (&#123; <span class="attr">user</span>: &#123;&#125; &#125;),</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> users = <span class="keyword">await</span> axios.get(<span class="string">&#x27;api/users&#x27;</span>)</span><br><span class="line">    <span class="built_in">this</span>.users = <span class="built_in">Object</span>.freeze(users)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里仅仅是冻结了 user 的值，引用不会被冻结，当我们需要 reactive 数据的时候，我们可以重新给 users 赋值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export default &#123; data: () =&gt; (&#123; users: [] &#125;), async created() &#123; const users =</span><br><span class="line">await axios.get(&quot;/api/users&quot;); this.users = Object.freeze(users); &#125;, methods: &#123;</span><br><span class="line">a() &#123; //改变值不会触发视图响应 this.users[0] = newValue;</span><br><span class="line">//改变引用依然会触发视图响应 this.users = newValue; &#125; &#125; &#125;;</span><br></pre></td></tr></table></figure><h2 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h2><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &lt;List</span><br><span class="line">      :items=&quot;[&#x27;Wonderwoman&#x27;, &#x27;Ironman&#x27;]&quot;</span><br><span class="line">      :item-click=&quot;item =&gt; (clicked = item)&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Clicked hero: &#123;&#123; clicked &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&#x27;./List&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    data: <span class="function">() =&gt;</span> (&#123; <span class="attr">clicked</span>: <span class="string">&#x27;&#x27;</span> &#125;),</span></span><br><span class="line">    components: &#123; List &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>List.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">functional</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">&quot;item in props.items&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;props.itemClick(item);&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="监听组件的生命周期"><a href="#监听组件的生命周期" class="headerlink" title="监听组件的生命周期"></a>监听组件的生命周期</h2><p>比如有父组件 Parent 和子组件 Child，如果父组件监听到子组件挂载 mounted 就做一些逻辑处理，常规写法可能如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Parent.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">Child</span> @<span class="attr">mounted</span>=<span class="string">&quot;doSomething&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">// Child.vue mounted() &#123; this.$emit(&quot;mounted&quot;); &#125;</span><br></pre></td></tr></table></figure><h2 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h2><p>分发 Vue 组件中的可复用功能<br>当我们开发应用时，经常会遇到一些功能和逻辑，需要在不同的组件间多次使用，比如同样的方法逻辑，两个组件都要用到，但我们又不想也不应该完全复制两遍，这个时候就该用 mixins 了。<br>这意味着，如果我创建了一个组件，它有 X 个不同的方法、周期逻辑、本地的状态等，我想复用它们，我就可以创建个 mixins，让其他的组件扩展这个 mixins，就可以在这些新的组件里使用原本它们没有的方法了</p><h2 id="前端路由和后端路由"><a href="#前端路由和后端路由" class="headerlink" title="前端路由和后端路由"></a>前端路由和后端路由</h2><p>对于路由这快的认知有一个盲点，好像都没有考虑过一直以来 jquery 等应用的页面的路由是怎么样的，webpack 管理的多页应用的路由又是怎么样实现的。</p><h2 id="后端路由"><a href="#后端路由" class="headerlink" title="后端路由"></a>后端路由</h2><p>对于普通的网站，所有超链接都是 URL 地址，所有 URL 地址都对应服务器上对应的资源。</p><h2 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h2><p>对于单页应用来说，主要通过 url 中的 hash（#号）来传值，来实现不同网页之间的切换。在单页面应用程序中，这种通过 hash 改变来切换页面的方式，称作前端路由（区别于后端路由）。</p><h3 id="前端路由实现"><a href="#前端路由实现" class="headerlink" title="前端路由实现"></a>前端路由实现</h3><h4 id="Pjax-PushState-Ajax"><a href="#Pjax-PushState-Ajax" class="headerlink" title="Pjax(PushState+Ajax)"></a>Pjax(PushState+Ajax)</h4><p>原理：利用 ajax 请求替代了 a 标签的默认跳转，然后利用 html5 中的 API 修改了 url。</p><p><strong>API：history.pushState 和 history.replaceSate。</strong></p><p>history.pushState 和 history.replaceSate 是 HTML5 的新接口,他们可以做到改变网址却不需要刷新页面，这个特性后来就运用到了单页应用，比如：vue-router,react-router-dom 里面，pushSate 会增加一条新的历史记录，而 replaceState 则会替换当前的历史记录。（Ajax 可以实现页面的无刷新操作，于是，返回的时候，通过 url 或者其他传参，我们就可以还原到 Ajax 之前的模样）</p><p>浏览器的前进和后退，会触发 window.onpopstate 事件，通过绑定 popstate 事件，就可以根据当前 url 地址中的查询内容让对应的菜单执行 Ajax 载入，实现 Ajax 的前进和后退效果。</p><p>页面首次载入的时候，如果没有查询地址、或查询地址不匹配，则使用第一个菜单的 Ajax 地址的查询内容，并使用 history.replaceSate 更改当前的浏览器历史，然后触发 Ajax 操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.pushSate(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&#x27;name/blue&#x27;</span>)</span><br><span class="line"><span class="built_in">window</span>.history.pushSate(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&#x27;name/orange&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="Hjax-Hash-Ajax"><a href="#Hjax-Hash-Ajax" class="headerlink" title="Hjax(Hash+Ajax)"></a>Hjax(Hash+Ajax)</h4><p>原理：url 中常会出现# ，一可以表示锚点（如回到顶部的按钮的原理），而是路由里的锚点（hash）,web 服务器并不会解析 hash，也就是说#后的内容 web 服务都会自动忽略，但是 javascript 是可以通过 window.loacation.hash 读取到的，读取到路径加以解析之后就可以响应不同路径的逻辑处理。</p><h3 id="前端路由的缺陷"><a href="#前端路由的缺陷" class="headerlink" title="前端路由的缺陷"></a>前端路由的缺陷</h3><p>使用浏览器的前进后退键时，会重新发出请求，没有合理的利用缓存。</p><h2 id="vue-列表组件中的-key-的作用"><a href="#vue-列表组件中的-key-的作用" class="headerlink" title="vue 列表组件中的 key 的作用"></a>vue 列表组件中的 key 的作用</h2><p><a href="https://vuejs.bootcss.com/api/#%E7%89%B9%E6%AE%8A-attribute">官网解释</a></p><p>在没有绑定 key 的情况下，并且在遍历模板简单的情况下（只读模式），会导致虚拟新旧节点对比更快，节点也会被复用，这种复用就是就地复用。但是现在 key 是必须要绑定的啊</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;i in dataList&quot;</span>&gt;</span>&#123;&#123; i &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      dataList: [1, 2, 3, 4, 5]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上的例子，v-for 的内容会生成以下的 dom 节点数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">;[</span><br><span class="line">  <span class="string">&#x27;&lt;div&gt;1&lt;/div&gt;&#x27;</span>, <span class="comment">// id： A</span></span><br><span class="line">  <span class="string">&#x27;&lt;div&gt;2&lt;/div&gt;&#x27;</span>, <span class="comment">// id:  B</span></span><br><span class="line">  <span class="string">&#x27;&lt;div&gt;3&lt;/div&gt;&#x27;</span>, <span class="comment">// id:  C</span></span><br><span class="line">  <span class="string">&#x27;&lt;div&gt;4&lt;/div&gt;&#x27;</span>, <span class="comment">// id:  D</span></span><br><span class="line">  <span class="string">&#x27;&lt;div&gt;5&lt;/div&gt;&#x27;</span> <span class="comment">// id:  E</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>改变 dataList 数据，进行数据位置替换，对比改变后的数据</p><h2 id="组件内导航之-beforeRouteUpdate-的使用"><a href="#组件内导航之-beforeRouteUpdate-的使用" class="headerlink" title="组件内导航之 beforeRouteUpdate 的使用"></a>组件内导航之 beforeRouteUpdate 的使用</h2><p>使用场景：</p><p>组件复用；路由跳转；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="forceUpdate"><a href="#forceUpdate" class="headerlink" title="$forceUpdate()"></a>$forceUpdate()</h2><p>迫使 Vue 实例重新 render 渲染虚拟 DOM，注意不是重新加载组件。结合 vue 生命周期，调用$forceUpdata 后只会触发 beforeUpdata 和 updata 这两个钩子函数，不会触发其他钩子函数。它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件。暂时不知道使用场景，组件复用重新渲染有 key</p><h2 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="$beforeDestroy"></a>$beforeDestroy</h2><p>当发生 A-&gt;B 路由跳转时，在 A 页面的$beforeDestroy 钩子函数并不在 B 页面的 beforeCreate 前面</p><h2 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h2><p>用法：跳过这个元素和它的子元素的编译过程，可以用来显示原始 Mustache 标签，跳过大量指令的节点会加快编译</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      message: <span class="string">&#x27;hello vue&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上代码，第一个 span 里的内容不会被编译，显示为<code>&#123;&#123;message&#125;&#125;</code></p><h2 id="v-cloak-指令"><a href="#v-cloak-指令" class="headerlink" title="v-cloak 指令"></a>v-cloak 指令</h2><p>在 vue 渲染完制定的整个 DOM 后才进行显示，它必须和 css 样式一起使用</p><p>在 vue 渲染完指定的整个 DOM 后才进行显示。它必须和 CSS 样式一起使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[v-cloak]&#123; display:none; &#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Vue API 中的小知识点运用与总结&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="https://colorfulworld.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>Web Workers</title>
    <link href="https://colorfulworld.github.io/webWorkers/"/>
    <id>https://colorfulworld.github.io/webWorkers/</id>
    <published>2019-07-05T08:43:57.000Z</published>
    <updated>2021-04-24T15:38:16.549Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 语言采用的是单线程模型，也就是说，所有任务只能在一个线程上完成，一次只能做一件事情。前面的任务没有做完，后面的任务只能等着。随着电脑计算能力增强，尤其是多核 CPU 的出现，单线程带来很大的不便，无法充分发挥计算机的计算能力。</p><span id="more"></span><h2 id="Web-Worker-的作用"><a href="#Web-Worker-的作用" class="headerlink" title="Web Worker 的作用"></a>Web Worker 的作用</h2><p>是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互相不打扰。等到 Worker 线程完成计算任务，再把结果返给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程担负了，主线程（通常负责 UI 交互）就会很流畅，不会因此阻塞/放慢。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ol><li>同源限制<br>分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。</li><li>DOM 限制<br>Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用 document、window、parent 这些对象。但是 Worker 线程可以 navigator 对象和 location 对象（PWA 的应用）。</li><li>通信联系<br>Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</li><li>脚本限制<br>Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</li><li>文件限制<br>Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。</li></ol><p><strong>Worker 线程一旦新建成功，就会始终运行</strong>，不会被主线程上的活动（比如用户点击按钮、提交表单）单端，这样有利于随时的响应主线程的通信。但是这也造成了 Worker 比较耗费资源，不应该过度使用，而且一旦使用完毕，就应该关闭。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">&#x27;work.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line">worker.postMessage(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line"></span><br><span class="line">worker.postMessage(&#123; <span class="attr">method</span>: <span class="string">&#x27;echo&#x27;</span>, <span class="attr">args</span>: [<span class="string">&#x27;Work&#x27;</span>] &#125;)</span><br></pre></td></tr></table></figure><p><code>worker.postMessage()</code>方法的参数，就是主线程传给 Worker 的数据。它可以是各种数据类型，包括二进制数据。</p><p>接着，主线程通过 worker.onmessage 指定监听函数，接收子线程发回来的消息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">worker.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Received message &#x27;</span> + event.data)</span><br><span class="line">  doSomething()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 执行任务</span></span><br><span class="line">  worker.postMessage(<span class="string">&#x27;Work done!&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，事件对象的 data 属性可以获取 Worker 发来的数据。</p><p>Worker 完成任务以后，主线程就可以把它关掉。</p><p><code>worker.terminate();</code></p><h2 id="Web-Worker-实战"><a href="#Web-Worker-实战" class="headerlink" title="Web Worker 实战"></a>Web Worker 实战</h2><p>Web Worker 可以提高应用的总体性能，并且提升用户体验</p><h3 id="如何使用-Worker-预加载图片"><a href="#如何使用-Worker-预加载图片" class="headerlink" title="如何使用 Worker 预加载图片"></a>如何使用 Worker 预加载图片</h3><p>ndex.js 中启用 worker</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> w = <span class="keyword">new</span> Worker(<span class="string">&#x27;js/workers.js&#x27;</span>)</span><br><span class="line">w.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*var img = document.createElement(&quot;img&quot;);</span></span><br><span class="line"><span class="comment"> img.src = window.URL.createObjectURL(event.data); document.querySelector(&#x27;#result&#x27;).appendChild(img) */</span></span><br><span class="line">  <span class="built_in">console</span>.log(event.data)</span><br><span class="line">&#125;</span><br><span class="line">w.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.currentTarget.terminate()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;erro: &#x27;</span> + e.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>worker.js 中请求图片</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [...好多图片路径];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line"> <span class="keyword">let</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">req.open(<span class="string">&#x27;GET&#x27;</span>, arr[i], <span class="literal">true</span>);</span><br><span class="line">req.responseType = <span class="string">&quot;blob&quot;</span>;</span><br><span class="line"><span class="comment">//req.setRequestHeader(&quot;client_type&quot;, &quot;DESKTOP_WEB&quot;);</span></span><br><span class="line"> req.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (req.readyState == <span class="number">4</span>) &#123;</span><br><span class="line"> <span class="comment">// postMessage(req.response);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; req.send(<span class="literal">null</span>); &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;JavaScript 语言采用的是单线程模型，也就是说，所有任务只能在一个线程上完成，一次只能做一件事情。前面的任务没有做完，后面的任务只能等着。随着电脑计算能力增强，尤其是多核 CPU 的出现，单线程带来很大的不便，无法充分发挥计算机的计算能力。&lt;/p&gt;</summary>
    
    
    
    <category term="Web" scheme="https://colorfulworld.github.io/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>jQuery-组件封装</title>
    <link href="https://colorfulworld.github.io/jQuery-%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/"/>
    <id>https://colorfulworld.github.io/jQuery-%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/</id>
    <published>2019-04-19T03:32:25.000Z</published>
    <updated>2021-02-27T12:24:38.485Z</updated>
    
    <content type="html"><![CDATA[<p>总结在 jQuery 项目开发中所使用到的组件封装技巧，封装一些频繁被使用的功能。</p><span id="more"></span><h1 id="JQuery-中封装组件的两种方法"><a href="#JQuery-中封装组件的两种方法" class="headerlink" title="JQuery 中封装组件的两种方法"></a>JQuery 中封装组件的两种方法</h1><ul><li>使用<code>$.extend</code>来扩展 JQuery</li><li>通过<code>$.fn</code>向 JQuery 添加新的方法</li></ul><h2 id="extend"><a href="#extend" class="headerlink" title="$.extend"></a><code>$.extend</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $.extend(&#123;</span><br><span class="line">    Alert: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!str) <span class="keyword">return</span>;</span><br><span class="line">      alert(str);</span><br><span class="line">      <span class="built_in">console</span>.log(str);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)(JQuery);</span><br><span class="line">$.Alert();</span><br><span class="line">$.Alert(<span class="string">&#x27;Hello&#x27;</span>);</span><br></pre></td></tr></table></figure><p>但是这种方式的弊端是无法使用<code>$(&quot;div&quot;).Alert()</code> 这种形式</p><h2 id="fn"><a href="#fn" class="headerlink" title="$.fn"></a><code>$.fn</code></h2><p>基本语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.fn.pluginName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>在插件名字定义的这个函数内部， this 指代的是我们在调用该插件时，用 jQuery 选择器选中的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $.fn.bgColor = <span class="function"><span class="keyword">function</span>(<span class="params">cor</span>) </span>&#123;</span><br><span class="line">    $(<span class="built_in">this</span>).css(<span class="string">&#x27;background-color&#x27;</span>, cor);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).bgColor(<span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;总结在 jQuery 项目开发中所使用到的组件封装技巧，封装一些频繁被使用的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="jQuery" scheme="https://colorfulworld.github.io/categories/jQuery/"/>
    
    
  </entry>
  
</feed>
